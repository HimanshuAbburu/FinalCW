*************************************;
*** begin scoring code for regression;
*************************************;

length _WARN_ $4;
label _WARN_ = 'Warnings' ;

length I_ORGYN $ 12;
label I_ORGYN = 'Into: ORGYN' ;
*** Target Values;
array REGDRF [2] $12 _temporary_ ('1' '0' );
label U_ORGYN = 'Unnormalized Into: ORGYN' ;
format U_ORGYN BEST12.;
*** Unnormalized target values;
ARRAY REGDRU[2]  _TEMPORARY_ (1 0);

*** Generate dummy variables for ORGYN ;
drop _Y ;
label F_ORGYN = 'From: ORGYN' ;
length F_ORGYN $ 12;
F_ORGYN = put( ORGYN , BEST12. );
%DMNORMIP( F_ORGYN )
if missing( ORGYN ) then do;
   _Y = .;
end;
else do;
   if F_ORGYN = '0'  then do;
      _Y = 1;
   end;
   else if F_ORGYN = '1'  then do;
      _Y = 0;
   end;
   else do;
      _Y = .;
   end;
end;

drop _DM_BAD;
_DM_BAD=0;

*** Check AFFL for missing values ;
if missing( AFFL ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check AGE for missing values ;
if missing( AGE ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check BILL for missing values ;
if missing( BILL ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check LTIME for missing values ;
if missing( LTIME ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check S_CONV for missing values ;
if missing( S_CONV ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check S_FVEG for missing values ;
if missing( S_FVEG ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check S_MT for missing values ;
if missing( S_MT ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check S_TOIL for missing values ;
if missing( S_TOIL ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Generate dummy variables for CLASS ;
drop _1_0 _1_1 _1_2 ;
if missing( CLASS ) then do;
   _1_0 = .;
   _1_1 = .;
   _1_2 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm8 $ 8; drop _dm8 ;
   _dm8 = put( CLASS , $8. );
   %DMNORMIP( _dm8 )
   if _dm8 = 'SILVER'  then do;
      _1_0 = 0;
      _1_1 = 0;
      _1_2 = 1;
   end;
   else if _dm8 = 'GOLD'  then do;
      _1_0 = 1;
      _1_1 = 0;
      _1_2 = 0;
   end;
   else if _dm8 = 'TIN'  then do;
      _1_0 = -1;
      _1_1 = -1;
      _1_2 = -1;
   end;
   else if _dm8 = 'PLATINUM'  then do;
      _1_0 = 0;
      _1_1 = 1;
      _1_2 = 0;
   end;
   else do;
      _1_0 = .;
      _1_1 = .;
      _1_2 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for GENDER ;
drop _2_0 _2_1 ;
if missing( GENDER ) then do;
   _2_0 = .;
   _2_1 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm1 $ 1; drop _dm1 ;
   _dm1 = put( GENDER , $1. );
   %DMNORMIP( _dm1 )
   if _dm1 = 'F'  then do;
      _2_0 = 1;
      _2_1 = 0;
   end;
   else if _dm1 = 'M'  then do;
      _2_0 = 0;
      _2_1 = 1;
   end;
   else if _dm1 = 'U'  then do;
      _2_0 = -1;
      _2_1 = -1;
   end;
   else do;
      _2_0 = .;
      _2_1 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for NGROUP ;
drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 ;
*** encoding is sparse, initialize to zero;
_3_0 = 0;
_3_1 = 0;
_3_2 = 0;
_3_3 = 0;
_3_4 = 0;
_3_5 = 0;
if missing( NGROUP ) then do;
   _3_0 = .;
   _3_1 = .;
   _3_2 = .;
   _3_3 = .;
   _3_4 = .;
   _3_5 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm1 $ 1; drop _dm1 ;
   _dm1 = put( NGROUP , $1. );
   %DMNORMIP( _dm1 )
   _dm_find = 0; drop _dm_find;
   if _dm1 <= 'D'  then do;
      if _dm1 <= 'B'  then do;
         if _dm1 = 'A'  then do;
            _3_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm1 = 'B'  then do;
               _3_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm1 = 'C'  then do;
            _3_2 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm1 = 'D'  then do;
               _3_3 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm1 <= 'F'  then do;
         if _dm1 = 'E'  then do;
            _3_4 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm1 = 'F'  then do;
               _3_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm1 = 'U'  then do;
            _3_0 = -1;
            _3_1 = -1;
            _3_2 = -1;
            _3_3 = -1;
            _3_4 = -1;
            _3_5 = -1;
            _dm_find = 1;
         end;
      end;
   end;
   if not _dm_find then do;
      _3_0 = .;
      _3_1 = .;
      _3_2 = .;
      _3_3 = .;
      _3_4 = .;
      _3_5 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for OAC ;
drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 ;
*** encoding is sparse, initialize to zero;
_4_0 = 0;
_4_1 = 0;
_4_2 = 0;
_4_3 = 0;
_4_4 = 0;
_4_5 = 0;
_4_6 = 0;
if missing( OAC ) then do;
   _4_0 = .;
   _4_1 = .;
   _4_2 = .;
   _4_3 = .;
   _4_4 = .;
   _4_5 = .;
   _4_6 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( OAC , BEST12. );
   %DMNORMIP( _dm12 )
   _dm_find = 0; drop _dm_find;
   if _dm12 <= '4'  then do;
      if _dm12 <= '2'  then do;
         if _dm12 = '1'  then do;
            _4_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '2'  then do;
               _4_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '3'  then do;
            _4_2 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '4'  then do;
               _4_3 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm12 <= '6'  then do;
         if _dm12 = '5'  then do;
            _4_4 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '6'  then do;
               _4_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm12 = '7'  then do;
            _4_6 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm12 = '8'  then do;
               _4_0 = -1;
               _4_1 = -1;
               _4_2 = -1;
               _4_3 = -1;
               _4_4 = -1;
               _4_5 = -1;
               _4_6 = -1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   if not _dm_find then do;
      _4_0 = .;
      _4_1 = .;
      _4_2 = .;
      _4_3 = .;
      _4_4 = .;
      _4_5 = .;
      _4_6 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for REGION ;
drop _5_0 _5_1 _5_2 _5_3 ;
*** encoding is sparse, initialize to zero;
_5_0 = 0;
_5_1 = 0;
_5_2 = 0;
_5_3 = 0;
if missing( REGION ) then do;
   _5_0 = .;
   _5_1 = .;
   _5_2 = .;
   _5_3 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm10 $ 10; drop _dm10 ;
   _dm10 = put( REGION , $10. );
   %DMNORMIP( _dm10 )
   _dm_find = 0; drop _dm_find;
   if _dm10 <= 'SCOTTISH'  then do;
      if _dm10 <= 'NORTH'  then do;
         if _dm10 = 'MIDLANDS'  then do;
            _5_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm10 = 'NORTH'  then do;
               _5_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm10 = 'SCOTTISH'  then do;
            _5_2 = 1;
            _dm_find = 1;
         end;
      end;
   end;
   else do;
      if _dm10 = 'SOUTH EAST'  then do;
         _5_3 = 1;
         _dm_find = 1;
      end;
      else do;
         if _dm10 = 'SOUTH WEST'  then do;
            _5_0 = -1;
            _5_1 = -1;
            _5_2 = -1;
            _5_3 = -1;
            _dm_find = 1;
         end;
      end;
   end;
   if not _dm_find then do;
      _5_0 = .;
      _5_1 = .;
      _5_2 = .;
      _5_3 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for TV_REG ;
drop _6_0 _6_1 _6_2 _6_3 _6_4 _6_5 _6_6 _6_7 _6_8 _6_9 _6_10 _6_11 ;
*** encoding is sparse, initialize to zero;
_6_0 = 0;
_6_1 = 0;
_6_2 = 0;
_6_3 = 0;
_6_4 = 0;
_6_5 = 0;
_6_6 = 0;
_6_7 = 0;
_6_8 = 0;
_6_9 = 0;
_6_10 = 0;
_6_11 = 0;
if missing( TV_REG ) then do;
   _6_0 = .;
   _6_1 = .;
   _6_2 = .;
   _6_3 = .;
   _6_4 = .;
   _6_5 = .;
   _6_6 = .;
   _6_7 = .;
   _6_8 = .;
   _6_9 = .;
   _6_10 = .;
   _6_11 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( TV_REG , $12. );
   %DMNORMIP( _dm12 )
   if _dm12 = 'LONDON'  then do;
      _6_3 = 1;
   end;
   else if _dm12 = 'MIDLANDS'  then do;
      _6_4 = 1;
   end;
   else if _dm12 = 'S & S EAST'  then do;
      _6_8 = 1;
   end;
   else if _dm12 = 'N WEST'  then do;
      _6_7 = 1;
   end;
   else if _dm12 = 'WALES & WEST'  then do;
      _6_11 = 1;
   end;
   else if _dm12 = 'EAST'  then do;
      _6_2 = 1;
   end;
   else if _dm12 = 'YORKSHIRE'  then do;
      _6_0 = -1;
      _6_1 = -1;
      _6_2 = -1;
      _6_3 = -1;
      _6_4 = -1;
      _6_5 = -1;
      _6_6 = -1;
      _6_7 = -1;
      _6_8 = -1;
      _6_9 = -1;
      _6_10 = -1;
      _6_11 = -1;
   end;
   else if _dm12 = 'C SCOTLAND'  then do;
      _6_1 = 1;
   end;
   else if _dm12 = 'N EAST'  then do;
      _6_5 = 1;
   end;
   else if _dm12 = 'S WEST'  then do;
      _6_9 = 1;
   end;
   else if _dm12 = 'N SCOT'  then do;
      _6_6 = 1;
   end;
   else if _dm12 = 'BORDER'  then do;
      _6_0 = 1;
   end;
   else do;
      _6_0 = .;
      _6_1 = .;
      _6_2 = .;
      _6_3 = .;
      _6_4 = .;
      _6_5 = .;
      _6_6 = .;
      _6_7 = .;
      _6_8 = .;
      _6_9 = .;
      _6_10 = .;
      _6_11 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** If missing inputs, use averages;
if _DM_BAD > 0 then do;
   _P0 = 0.2590142243;
   _P1 = 0.7409857757;
   goto REGDR1;
end;

*** Compute Linear Predictor;
drop _TEMP;
drop _LP0;
_LP0 = 0;

***  Effect: AFFL ;
_TEMP = AFFL ;
_LP0 = _LP0 + (    0.26067653499535 * _TEMP);

***  Effect: AGE ;
_TEMP = AGE ;
_LP0 = _LP0 + (   -0.04904238320601 * _TEMP);

***  Effect: BILL ;
_TEMP = BILL ;
_LP0 = _LP0 + (  6.1302992371945E-6 * _TEMP);

***  Effect: CLASS ;
_TEMP = 1;
_LP0 = _LP0 + (    0.08038394530612) * _TEMP * _1_0;
_LP0 = _LP0 + (   -0.33875132288112) * _TEMP * _1_1;
_LP0 = _LP0 + (    0.08217839969462) * _TEMP * _1_2;

***  Effect: GENDER ;
_TEMP = 1;
_LP0 = _LP0 + (     1.1237144758792) * _TEMP * _2_0;
_LP0 = _LP0 + (    0.00887835012839) * _TEMP * _2_1;

***  Effect: LTIME ;
_TEMP = LTIME ;
_LP0 = _LP0 + (   -0.00219212175817 * _TEMP);

***  Effect: NGROUP ;
_TEMP = 1;
_LP0 = _LP0 + (    0.19700537145578) * _TEMP * _3_0;
_LP0 = _LP0 + (   -0.08834433225023) * _TEMP * _3_1;
_LP0 = _LP0 + (    0.07274868795996) * _TEMP * _3_2;
_LP0 = _LP0 + (     0.0755026486156) * _TEMP * _3_3;
_LP0 = _LP0 + (   -0.19188062190085) * _TEMP * _3_4;
_LP0 = _LP0 + (    0.30987646097659) * _TEMP * _3_5;

***  Effect: OAC ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.11010715809235) * _TEMP * _4_0;
_LP0 = _LP0 + (    0.00420603496328) * _TEMP * _4_1;
_LP0 = _LP0 + (    0.17997942794654) * _TEMP * _4_2;
_LP0 = _LP0 + (    0.04721785876799) * _TEMP * _4_3;
_LP0 = _LP0 + (    0.03869450141979) * _TEMP * _4_4;
_LP0 = _LP0 + (   -0.06563730165486) * _TEMP * _4_5;
_LP0 = _LP0 + (   -0.14861255083878) * _TEMP * _4_6;

***  Effect: REGION ;
_TEMP = 1;
_LP0 = _LP0 + (     0.0306968240525) * _TEMP * _5_0;
_LP0 = _LP0 + (   -0.22305048822113) * _TEMP * _5_1;
_LP0 = _LP0 + (   -0.39982488770133) * _TEMP * _5_2;
_LP0 = _LP0 + (    0.09018713772051) * _TEMP * _5_3;

***  Effect: S_CONV ;
_TEMP = S_CONV ;
_LP0 = _LP0 + (   -0.02099156764441 * _TEMP);

***  Effect: S_FVEG ;
_TEMP = S_FVEG ;
_LP0 = _LP0 + (   -0.00631994553664 * _TEMP);

***  Effect: S_MT ;
_TEMP = S_MT ;
_LP0 = _LP0 + (    0.00993125880482 * _TEMP);

***  Effect: S_TOIL ;
_TEMP = S_TOIL ;
_LP0 = _LP0 + (    0.00521768557474 * _TEMP);

***  Effect: TV_REG ;
_TEMP = 1;
_LP0 = _LP0 + (    -0.1991522604879) * _TEMP * _6_0;
_LP0 = _LP0 + (    0.72616495353485) * _TEMP * _6_1;
_LP0 = _LP0 + (    0.01926553787121) * _TEMP * _6_2;
_LP0 = _LP0 + (   -0.13087809925283) * _TEMP * _6_3;
_LP0 = _LP0 + (    0.02546631965082) * _TEMP * _6_4;
_LP0 = _LP0 + (    0.13763844040915) * _TEMP * _6_5;
_LP0 = _LP0 + (   -0.30397354717804) * _TEMP * _6_6;
_LP0 = _LP0 + (                   0) * _TEMP * _6_7;
_LP0 = _LP0 + (                   0) * _TEMP * _6_8;
_LP0 = _LP0 + (                   0) * _TEMP * _6_9;
_LP0 = _LP0 + (                   0) * _TEMP * _6_10;
_LP0 = _LP0 + (                   0) * _TEMP * _6_11;

*** Naive Posterior Probabilities;
drop _MAXP _IY _P0 _P1;
_TEMP =    -1.78090410749898 + _LP0;
if (_TEMP < 0) then do;
   _TEMP = exp(_TEMP);
   _P0 = _TEMP / (1 + _TEMP);
end;
else _P0 = 1 / (1 + exp(-_TEMP));
_P1 = 1.0 - _P0;

REGDR1:

*** Residuals;
if (_Y = .) then do;
   R_ORGYN1 = .;
   R_ORGYN0 = .;
end;
else do;
    label R_ORGYN1 = 'Residual: ORGYN=1' ;
    label R_ORGYN0 = 'Residual: ORGYN=0' ;
   R_ORGYN1 = - _P0;
   R_ORGYN0 = - _P1;
   select( _Y );
      when (0)  R_ORGYN1 = R_ORGYN1 + 1;
      when (1)  R_ORGYN0 = R_ORGYN0 + 1;
   end;
end;

*** Posterior Probabilities and Predicted Level;
label P_ORGYN1 = 'Predicted: ORGYN=1' ;
label P_ORGYN0 = 'Predicted: ORGYN=0' ;
P_ORGYN1 = _P0;
_MAXP = _P0;
_IY = 1;
P_ORGYN0 = _P1;
if (_P1 >  _MAXP + 1E-8) then do;
   _MAXP = _P1;
   _IY = 2;
end;
I_ORGYN = REGDRF[_IY];
U_ORGYN = REGDRU[_IY];

*************************************;
***** end scoring code for regression;
*************************************;
