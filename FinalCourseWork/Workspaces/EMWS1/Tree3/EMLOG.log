*------------------------------------------------------------*
User:                P2503016
Date:                03 December 2021
Time:                17:46:38
Site:                51200470
Platform:            X64_10PRO
Maintenance Release: 9.04.01M7P080520
EM Version:          15.2
* 
*------------------------------------------------------------*
* Training Log
Date:                03 December 2021
Time:                17:46:23
*------------------------------------------------------------*
15240  proc freq data=EMWS1.Tree3_VariableSet noprint;
15241  table ROLE*LEVEL/out=WORK.Tree3META;
15242  run;
 
NOTE: There were 18 observations read from the data set EMWS1.TREE3_VARIABLESET.
NOTE: The data set WORK.TREE3META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
15243  proc print data=WORK.Tree3META label noobs;
15244  var ROLE LEVEL COUNT;
15245  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15246  title9 ' ';
15247  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15248  run;
 
NOTE: There were 5 observations read from the data set WORK.TREE3META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
15249  title10;
 
15250  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15297  data WORK.Tree3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15298  length ORDER $20;
15299  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15300     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15301  set EMWS1.TREE3_ORGYN_DM( where=(_TYPE_="TARGET"));
15302  NumLevels=2;
15303  select(upcase(ORDER));
15304  when('DESC') ORDER = 'Descending';
15305  when('ASC') ORDER = 'Ascending';
15306  when('FMTDESC') ORDER = 'Formatted Descending';
15307  when('FMTASC') ORDER = 'Formatted Ascending';
15308  otherwise ORDER = 'Descending';
15309  end;
15310  output;
15311  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_ORGYN_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE3_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
15312  title9 ' ';
15313  proc print data=WORK.Tree3_EVENT noobs label;
15314  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15315  title9 ' ';
15316  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15317  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE3_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
15318  title10;
 
"No decisions defined for target "ORGYN"."
15319  proc print data = EMWS1.Tree3_ORGYN_DM noobs label;
15320  var _type_ variable label;
15321  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15322  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15323  title9 ' ';
15324  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15325  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE3_ORGYN_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
15326  title10;
 
15327  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15852  *------------------------------------------------------------*;
15853  * Tree3: Generation of macros and macro variables;
15854  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15855  *------------------------------------------------------------*;
 
15856  %let EMEXCEPTIONSTRING=;
15857  *------------------------------------------------------------*;
15858  * TRAIN: Tree3;
15859  *------------------------------------------------------------*;
15860  %let EM_ACTION = TRAIN;
15861  %let syscc = 0;
15862  %macro main;
15863
15864    %if %upcase(&EM_ACTION) = CREATE %then %do;
15865      filename temp catalog 'sashelp.emmodl.tree_create.source';
15866      %include temp;
15867      filename temp;
15868
15869      %em_tree_create;
15870    %end;
15871
15872     %else
15873     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15874
15875         filename temp catalog 'sashelp.emmodl.tree_train.source';
15876         %include temp;
15877         filename temp;
15878         %em_tree_train;
15879     %end;
15880
15881    %else
15882    %if %upcase(&EM_ACTION) = SCORE %then %do;
15883      filename temp catalog 'sashelp.emmodl.tree_score.source';
15884      %include temp;
15885      filename temp;
15886
15887      %em_tree_score;
15888
15889    %end;
15890
15891    %else
15892    %if %upcase(&EM_ACTION) = REPORT %then %do;
15893
15894         filename temp catalog 'sashelp.emmodl.tree_report.source';
15895         %include temp;
15896         filename temp;
15897
15898         %em_tree_report;
15899     %end;
15900
15901    %else
15902    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15903
15904         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15905         %include temp;
15906         filename temp;
15907         %EM_TREE_OPENTREEVIEWER;
15908
15909     %end;
15910
15911    %else
15912    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15913
15914         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15915         %include temp;
15916         filename temp;
15917         %EM_TREE_CLOSETREEVIEWER;
15918
15919     %end;
15920
15921
15922     %doendm:
15923  %mend main;
15924
15925  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15927 +%macro em_tree_train;
15929 +   %if &EM_IMPORT_DATA eq %then %do;
15930 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15931 +       %put &em_codebar;
15932 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15933 +       %put &errormsg;
15934 +       %put &em_codebar;
15935 +       %goto doendm;
15936 +   %end;
15937 +   %else
15938 +       %let EMEXCEPTIONSTRING =;
15940 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15941 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15942 +        %put &em_codebar;
15943 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15944 +        %put &errormsg;
15945 +        %put &em_codebar;
15946 +        %goto doendm;
15947 +   %end;
15949 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15950 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15951 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15952 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15953 +        %put &em_codebar;
15954 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15955 +        %put &errormsg;
15956 +        %put &em_codebar;
15957 +        %goto doendm;
15958 +   %end;
15960 +   /* Initialize property macro variables */
15961 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15962 +   %include temp;
15963 +   filename temp;
15965 +   %EM_SetProperties;
15967 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15968 +   %EM_GETNAME(key=EMTREE, type=DATA);
15969 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15970 +     /* if import eq Y and no importtable defined, throw an exception */
15971 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15972 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15973 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15974 +         %put &em_codebar;
15975 +         %put &errmsg;
15976 +         %put &em_codebar;
15977 +         %goto doendm;
15978 +      %end;
15979 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15980 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15981 +         %put &em_codebar;
15982 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15983 +         %put &errormsg;
15984 +         %put &em_codebar;
15985 +         %goto doendm;
15986 +      %end;
15987 +      %else %do;
15988 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15989 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15990 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15991 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15992 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15993 +         %let dsid = %sysfunc(close(&dsid));
15994 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15995 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15996 +            %put &em_codebar;
15997 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15998 +            %put &errormsg;
15999 +            %put &em_codebar;
16000 +            %goto doendm;
16001 +         %end;
16002 +      %end;
16003 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
16004 +         proc delete data=&EM_USER_EMTREE;
16005 +         run;
16006 +      %end;
16007 +   %end;
16008 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
16009 +      proc delete data=&EM_USER_EMTREE;
16010 +      run;
16011 +   %end;
16013 +   /* load tree macros */
16014 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16015 +   %include temp;
16016 +   filename temp;
16018 +   /* data sets */
16019 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
16020 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
16021 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
16023 +   /* files */
16024 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
16026 +   /* check actual num of target levels */
16027 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
16028 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16029 +                              nLevel=_nTargetLevel );
16030 +      %if &_nTargetLevel  > 2 %then %do;
16031 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16032 +        %put &em_codebar;
16033 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16034 +        %put &errormsg;
16035 +        %put &em_codebar;
16036 +        %goto doendm;
16037 +      %end;
16038 +   %end;
16040 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16041 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16042 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16043 +        %let costflag=0;
16044 +        data _null_;
16045 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16046 +          if eof then call symput("costflag", _N_);
16047 +        run;
16048 +        %if &costflag gt 0 %then %do;
16049 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16050 +          %put &em_codebar;
16051 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16052 +          %put &errormsg;
16053 +          %put &em_codebar;
16054 +          %goto doendm;
16055 +       %end;
16056 +     %end;
16057 +   %end;
16059 +   /* determine if multiple targets will be processed */
16060 +   %let em_tree_multipleTargets=N;
16061 +   %let em_tree_numTarget = 1;
16062 +   %let em_tree_targetVars=;
16064 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16065 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16066 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16067 +         %let em_tree_multipleTargets=N;
16068 +      %end;
16069 +      %else %do;
16070 +         /* create macro array of targets  */
16071 +         data _null_;
16072 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16073 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16074 +           if eof then
16075 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16076 +        run;
16078 +        %if &em_tree_numTarget gt 1 %then %do;
16079 +           %let em_tree_multipleTargets=Y;
16080 +        %end;
16081 +      %end;
16082 +   %end;
16084 +   /* create view of only necessary variable for performance reasons */
16085 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16086 +   data &tempData / view=&tempData;
16087 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16088 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16089 +       %EM_TARGET
16090 +     %end;
16091 +     %else %do;
16092 +       %if &em_tree_numTarget ne 0 %then %do;
16093 +         %do i=1 %to &em_tree_numTarget;
16094 +            &&em_tree_targetVars&i
16095 +         %end;
16096 +       %end;
16097 +     %end;
16098 +     );
16099 +   run;
16101 +   /* run Tree procedure */
16102 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16104 +   /* Check return code and throw exception if error is detected */
16105 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16106 +   %if &syserr %then %do;
16107 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16108 +     %goto doendm;
16109 +   %end;
16111 +   /* add decision score code if multiple targets are processed */
16112 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16113 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16114 +   %end;
16116 +   /* create outfit dataset if multiple score statements have been executed */
16117 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16119 +   /* create English Rules */
16120 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16121 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16122 +       %em_tree_makeEnglishRules;
16124 +       /* English Rules */
16125 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16127 +     %end;
16128 +   filename x;
16130 +   %doendm:
16131 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16132 +%macro EM_SetProperties;
16134 +   /* train properties */
16135 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16148 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16149 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16150 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16153 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16154 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16155 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16163 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16165 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16166 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16167 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16168 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16169 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16170 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16171 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16172 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16173 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16174 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16175 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16177 +   /* properties for interactive sample */
16178 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16179 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16180 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16181 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16183 +   /* report properties */
16184 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16185 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16186 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16187 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16188 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16189 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16190 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16191 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16192 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16193 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16194 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16195 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16196 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16198 +   /* score properties */
16199 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16200 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16202 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE3_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16204 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16205 +  %global &nLevel;
16206 +  proc dmdb batch data=&indata
16207 +    classout=_tmp_dmdbout;
16208 +    class &target;
16209 +  run;
16210 +  data _tmp_dmdbout;
16211 +    set _tmp_dmdbout;
16212 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16213 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16214 +  run;
16215 +  data _null_;
16216 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16217 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16218 +    %let dsid = %sysfunc(close(&dsid));
16219 +     call symput("&nLevel", put(&_obs, Best12.));
16220 +  run;
16222 +  proc datasets lib=work nolist;
16223 +     delete _tmp_dmdbout;
16224 +  run;
16225 +  quit;
16226 +%Mend EM_CheckBinaryTargetLevel;
16229 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16231 +  /* determine the number of obs in training data */
16232 +  proc sql;
16233 +    reset noprint;
16234 +    select count(*) into :em_nobs from &indata;
16235 +  quit;
16237 +  /* determine the number of input variables */
16238 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16239 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16241 +  /* retrieve targetEvent from decmeta */
16242 +  %let targetEvent=;
16243 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16244 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16245 +      data _null_;
16246 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16247 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16248 +      run;
16249 +    %end;
16250 +  %end;
16252 +  /* create targetTable if multipleTar eq Y */
16253 +  data temptarget;
16254 +    set &EM_DATA_VARIABLESET;
16255 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16256 +  run;
16258 + /* data sets */
16259 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16260 + %EM_GETNAME(key=EMTREE,        type=DATA);
16261 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16262 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16263 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16264 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16265 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16266 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16267 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16268 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16270 + /* files */
16271 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16272 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16274 + /* turn on pmml if requested */
16275 + %let nnpmml=0;
16276 + %if %symexist(EM_PMML) %then %do;
16277 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16278 +       %let nnpmml=1;
16280 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16281 +   %end;
16282 +%end;
16284 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16286 +%if &nnpmml or &numClassTarget %then %do;
16288 +    /* create dmdb needed for pmml generation */
16289 +    %let tree_maxlevel = 512;
16290 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16291 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16292 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16293 +      %end;
16294 +    %end;
16295 +    %if &tree_maxlevel gt 0 %then %do;
16296 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16297 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16298 +    %end;
16300 +    %let targetOrderString =;
16301 +    %let targetString = ;
16302 +    data _null_;
16303 +       length orderString nameString $10000;
16304 +       retain orderString nameString;
16305 +       set &em_data_variableset end=eof;
16306 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16307 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16308 +       %end;
16309 +       %else %do;
16310 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16311 +       %end;          select(order);
16312 +         when('')        order ='DESC';
16313 +         when('FMTASC')  order='ASCFMT';
16314 +         when('FMTDESC') order='DESFMT';
16315 +         otherwise;
16316 +       end;
16317 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16318 +       nameString = trim(nameString)!!' '!!trim(NAME);
16320 +       if eof then do;
16321 +          call symput('targetOrderString', trim(orderString));
16322 +          call symput('targetString', trim(nameString));
16323 +       end;
16324 +    run;
16326 +    %let arborkluge= "work._treeDMDB";
16328 +    proc dmdb batch data=&indata
16329 +    %if &nnpmml %then %do;
16330 +        PMML
16331 +    %end;
16332 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16334 +      %if &nnpmml %then %do;
16335 +           %if "%EM_ID" ne "" %then %do;
16336 +             id %EM_ID;
16337 +           %end;
16338 +           %if &EM_NUM_CLASS gt 0 %then %do;
16339 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16340 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16341 +                  &targetOrderString;
16342 +           %end;
16343 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16344 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16345 +           %end;
16346 +           target &targetString %EM_INTERVAL_TARGET;
16347 +           %if "%EM_FREQ" ne "" %then %do;
16348 +             freq %EM_FREQ;
16349 +           %end;
16350 +      %end;
16351 +      %else %do;
16352 +         class  &targetOrderString;
16353 +         target &targetString %EM_INTERVAL_TARGET;
16354 +      %end;
16355 +    run;
16356 +    quit;
16358 +    proc datasets lib=work nolist;
16359 +       delete classout varout;
16360 +    run;
16361 +    quit;
16363 + %end;
16366 + /* run Arbor procedure */
16367 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16368 +  proc arbor data=&INDATA
16370 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16371 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16372 +  %end;
16374 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16375 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16376 +  %end;
16378 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16379 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16380 +  %end;
16382 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16383 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16384 +  %end;
16386 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16387 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16388 +  %end;
16390 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16391 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16392 +  %end;
16393 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16394 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16395 +  %end;
16396 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16397 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16398 +  %end;
16400 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16401 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16402 +      alpha = &EM_PROPERTY_SIGLEVEL
16403 +    %end;
16404 +  %end;
16406 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16407 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16408 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16409 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16410 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16412 +        padjust =
16413 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16414 +          &chaid
16415 +        %end;
16416 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16417 +          DEPTH
16418 +        %end;
16419 +      %end;
16420 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16421 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16422 +         pvars = &num_inputs
16423 +      %end;
16424 +    %end;
16425 +  %end;
16426 +  %else %do;
16427 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16428 +         padjust = NONE
16429 +      %end;
16430 +  %end;
16432 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16433 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16434 +    Maxrules = &num_nrules
16435 +  %end;
16437 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16438 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16439 +    Maxsurrs = &num_nsurrs
16440 +  %end;
16442 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16443 +     Missing=&EM_PROPERTY_MISSINGVALUE
16444 +  %end;
16446 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16447 +     USEVARONCE
16448 +  %end;
16450 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16451 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16452 +  %end;
16455 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16456 +    event = "&targetEvent"
16457 +  %end;
16459 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16460 +     DECSEARCH
16461 +  %end;
16463 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16464 +     PRIORSSEARCH
16465 +  %end;
16467 +  %if &arbor_1 ne %then %do;
16468 +    &arbor_1
16469 +  %end;
16471 +  %if &em_arbor ne %then %do;
16472 +     &em_arbor
16473 +  %end;
16474 +  ;
16475 + %end;
16476 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16477 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16478 +       Performance &EM_PROPERTY_PERFORMANCE
16479 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16480 +         nodesize=&EM_PROPERTY_NODESAMPLE
16481 +       %end;
16482 +       ;
16483 +       interact;
16484 + %end;
16485 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16486 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16487 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16488 +    %put &em_codebar;
16489 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16490 +    %put &errormsg;
16491 +    %put &em_codebar;
16492 +    %goto doendm;
16493 +   %end;
16494 +   %else %do;
16495 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16496 +       Performance &EM_PROPERTY_PERFORMANCE
16497 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16498 +         nodesize=&EM_PROPERTY_NODESAMPLE
16499 +       %end;
16500 +       ;
16501 +       interact;
16502 +   %end;
16503 + %end;
16505 + %else %do;
16506 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16507 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16508 +    %put &em_codebar;
16509 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16510 +    %put &errormsg;
16511 +    %put &em_codebar;
16512 +    %goto doendm;
16513 +   %end;
16514 +   %else %do;
16515 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16516 +       Performance &EM_PROPERTY_PERFORMANCE
16517 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16518 +         nodesize=&EM_PROPERTY_NODESAMPLE
16519 +       %end;
16520 +       ;
16521 +        interact;
16522 +   %end;
16523 + %end;
16525 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16526 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16527 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16528 +    %end;
16530 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16531 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16532 +    %end;
16534 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16535 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16536 +    %end;
16538 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16539 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16540 +    %end;
16542 +    %if "%EM_FREQ" ne "" %then %do;
16543 +       freq %EM_FREQ;
16544 +    %end;
16546 +    %if "&multipleTar" eq "Y" %then %do;
16547 +       /* cycle through all target vars in variableset */
16548 +       %let tdsid = %sysfunc(open(temptarget));
16549 +       %if &tdsid %then %do;
16550 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16551 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16552 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16553 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16554 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16555 +             target &var / level = &lvl
16556 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16557 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16558 +             %end;
16559 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16560 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16561 +             %end;
16562 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16563 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16564 +             %end;
16565 +          %end;
16566 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16567 +       %end;
16568 +       useTarget variable = %EM_TARGET;
16569 +    %end;
16570 +    %else %do;
16571 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16572 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16573 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16574 +      %end;
16575 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16576 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16577 +      %end;
16578 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16579 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16580 +      %end;
16581 +    %end;
16583 +    %if "&multipleTar" eq "N" %then %do;
16584 +      &EM_DEC_STATEMENT;
16585 +    %end;
16587 +    Performance &EM_PROPERTY_PERFORMANCE
16588 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16589 +      nodesize=&EM_PROPERTY_NODESAMPLE
16590 +    %end;
16591 +    ;
16593 +    %if "&intFlag" eq "Y" %then %do;
16594 +       INTERACT Largest;
16595 +       Train maxnewdepth=0;
16596 +    %end;
16598 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16599 +         Assess
16600 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16601 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16602 +              %put &em_codebar;
16603 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16604 +              %put &errormsg;
16605 +              %put &em_codebar;
16606 +            %end;
16607 +            %else %do;
16608 +               Validata=&EM_IMPORT_VALIDATE
16609 +            %end;
16610 +         %end;
16611 +         %else %do;
16612 +           NoValidata
16613 +         %end;
16614 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16615 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16616 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16617 +               %if &dsid %then %do;
16618 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16619 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16620 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16621 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16622 +                   %else %do;
16623 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16624 +                      %else %let measure= MISC;
16625 +                   %end;
16626 +                 %end;
16627 +               %end;
16628 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16629 +            %end;
16630 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16631 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16632 +                 %let measure=ASE;
16633 +              %end;
16634 +              %else %do;
16635 +                 %let measure=MISC;
16636 +              %end;
16637 +            %end;
16638 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16639 +              %let measure=ASE;
16640 +            %end;
16641 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16642 +               %let measure = LIFT;
16643 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16644 +               %if &dsid %then %do;
16645 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16646 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16647 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16648 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16649 +                 %end;
16650 +               %end;
16651 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16652 +            %end;
16653 +            measure=&measure
16654 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16655 +               event = "&targetEvent"
16656 +            %end;
16657 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16658 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16659 +            %end;
16660 +         %end;
16661 +         %if "&multipleTar" eq "N" %then %do;
16662 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16663 +               CV
16664 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16665 +                 CVNITer = &EM_PROPERTY_CVNITER
16666 +               %end;
16667 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16668 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16669 +               %end;
16670 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16671 +                 CVSeed = &EM_PROPERTY_CVSEED
16672 +               %end;
16673 +            %end;
16674 +         %end;
16675 +       %end;
16676 +      ;
16678 +      %if "&intFlag" ne "Y" %then %do;
16679 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16680 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16681 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16682 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16684 +          SUBTREE &subtree
16685 +          %if "&subtree" eq "NLEAVES" %then %do;
16686 +            =&EM_PROPERTY_NSUBTREE
16687 +          %end;
16688 +          ;
16689 +        %end;
16691 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16692 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16693 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16694 +          %end;
16695 +       %end;
16696 +      %end;
16697 + %end;
16700 + MakeMacro nleaves = nleaves;
16701 + save
16702 + %if "&EM_USER_EMTREE" ne "" %then %do;
16703 +   MODEL=&EM_USER_EMTREE
16704 + %end;
16705 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16706 +   SEQUENCE=&EM_USER_OUTSEQ
16707 + %end;
16708 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16709 +   IMPORTANCE=&EM_USER_OUTIMPORT
16710 + %end;
16711 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16712 +   NODESTAT=&EM_USER_OUTNODES
16713 + %end;
16714 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16715 +   SUMMARY=&EM_USER_OUTSUMMARY
16716 + %end;
16717 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16718 +   STATSBYNODE=&EM_USER_OUTSTATS
16719 + %end;
16720 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16721 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16722 + %end;
16723 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16724 +   Pathlistnonmissing=&EM_USER_OUTPATH
16725 + %end;
16726 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16727 +   RULES = &EM_USER_OUTRULES
16728 + %end;
16729 + ;
16731 + %if "&intFlag" ne "Y" %then %do;
16733 +   %let lookupString = ;
16734 +   %if ^%symexist(EM_OPTION) %then
16735 +      %let EM_OPTION=;
16737 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16738 +      %let lookupString = LOOKUP=SELECT;
16739 +   %end;
16741 +   %let codetext=;
16742 +   %let norescodetxt=;
16744 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16745 +     %let codetext=&codetext DUMMY;
16746 +     %let norescodetxt=&norescodetxt DUMMY;
16747 +   %end;
16748 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16749 +     %let codetext=&codetext NOLEAFID;
16750 +     %let norescodetxt=&norescodetxt NOLEAFID;
16751 +   %end;
16752 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16753 +     %let norescodetxt=&norescodetxt NOPRED;
16754 +   %end;
16756 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16757 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16759 +   %if &nnpmml %then %do;
16760 +     code pmml;
16761 +   %end;
16763 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16764 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16765 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16766 +   %end;
16767 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16768 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16769 +   %end;
16770 + %end;
16772 + run;
16773 + quit;
16775 + /*%em_checkerror(); */
16776 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16777 +   /* Delete DMDB catalog */
16778 +   proc datasets lib=work nolist;
16779 +       delete _treeDMDB / mt=cat;
16780 +  run;
16781 +  %end;
16783 + %if &nnpmml %then %do;
16784 +    ods pmml close;
16785 + %end;
16787 +  %doendm:
16789 +%mend em_tree_runTreeProcedure;
16791 +%macro em_tree_createFitStats( multipleTar= );
16794 +  /* create targetTable is multipleTar eq Y */
16795 +  data temptarget;
16796 +    set &EM_DATA_VARIABLESET;
16797 +    where ROLE="TARGET";
16798 +  run;
16800 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16801 +   data &EM_USER_EMOUTFIT;
16802 +     length target $32;
16803 +     merge work.fit_train
16804 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16805 +       work.fit_valid
16806 +     %end;
16807 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16808 +       work.fit_test
16809 +     %end;
16810 +     ;
16811 +     %if "&multipleTar" eq "N" %then %do;
16812 +       target="%EM_TARGET";
16813 +     %end;
16814 +     %else %do;
16815 +       target = _TARGET_;
16816 +     %end;
16817 +     drop _NW_ _SUMW_
16818 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16819 +        _VSUMW_
16820 +     %end;
16821 +     ;
16822 +   run;
16824 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16825 +     proc datasets library=work nolist;
16826 +       delete fit_valid;
16827 +     run;
16828 +   %end;
16829 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16830 +     proc datasets library=work nolist;
16831 +       delete fit_test;
16832 +     run;
16833 +   %end;
16835 +%mend em_tree_createFitStats;
16838 +%macro em_tree_makeEnglishRules;
16840 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16841 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16843 +  /* verify that necessary tables exist and if not, skip processing */
16844 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16845 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16846 +    %goto doendm;
16847 +  %end;
16848 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16849 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16850 +    %goto doendm;
16851 +  %end;
16853 +  /* determine length of variable in outpath dataset */
16854 +  %let vlength= ;
16855 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16856 +  %if &dsid ne %then %do;
16857 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16858 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16859 +  %end;
16860 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16862 +  data tempoutpath;
16863 +    length varname $&vlength;
16864 +    retain varname;
16865 +    set &EM_USER_OUTPATH;
16867 +    if ^missing(variable) then varname=variable;
16868 +    else if ^missing(var_name) then varname=var_name;
16869 +    output;
16870 +  run;
16872 +  /* create an array of generated predicted variable names */
16873 +  %let tree_pred_vars = ;
16874 +  %let tree_pred_label = ;
16875 +  %let numpred= 0;
16876 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16878 +    data _null_;
16879 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16880 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16881 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16882 +     if eof then
16883 +       call symput('numpred', strip(put(_N_, BEST.)));
16884 +    run;
16885 +  %end;
16887 +  /* determine if NPRIORS exists in outnodes  */
16888 +  %local nprior_flag;
16889 +  data _null_;
16890 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16891 +    if eof then do;
16892 +      call symput('nprior_flag', strip(put(npriors, best.)));
16893 +    end;
16894 +  run;
16896 +  proc sort data=tempoutpath; by node; run;
16897 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16899 +  data tempoutpath;
16900 +    merge tempoutpath(in=_a) outnodes(keep= node
16901 +    %if "&nprior_flag" ne "." %then %do;
16902 +      NPRIORS
16903 +    %end;
16904 +    %else %do;
16905 +      N
16906 +    %end;
16907 +    %if &numpred gt 0 %then %do;
16908 +      %do i=1 %to &numpred;
16909 +        &&tree_pred_vars&i
16910 +      %end;
16911 +    %end;
16912 +    );
16913 +    by node;
16914 +    if _a;
16915 +  run;
16917 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16919 +  data _null_;
16920 +    file x;
16921 +    set tempoutpath;
16922 +    by node descending varname;
16923 +    retain origvar oldnode string;
16924 +    length origvar $32 oldnode 8 string $5000;
16926 +    if _N_ = 1 then do;
16927 +      origvar = varname;
16928 +      oldnode = node;
16929 +    end;
16931 +    if first.node then do;
16932 +       put "&EM_CODEBAR";
16933 +       put " Node = " node;
16934 +       put "&EM_CODEBAR";
16935 +    end;
16937 +      if first.varname then do;
16938 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16939 +            if MISSING(CHARACTER_VALUE) then do;
16940 +             if NUMERIC_VALUE ne .  then do;
16941 +              if ^first.node then do;
16942 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16943 +              end;
16944 +              else do;
16945 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16946 +              end;
16947 +             end;
16948 +            end;
16949 +            else do;
16950 +              if ^first.node then do;
16951 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16952 +              end;
16953 +              else do;
16954 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16955 +              end;
16956 +             end;
16957 +         end;
16958 +         else if RELATION in ("=") then do;
16959 +            if ^first.node then do;
16960 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16961 +            end;
16962 +            else do;
16963 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16964 +            end;
16965 +         end;
16966 +         else if RELATION in ("ISMISSING") then do;
16967 +            if ^first.node then do;
16968 +              string = " AND "|| strip(varname) || " equals Missing";
16969 +            end;
16970 +            else do;
16971 +              string = "if "|| strip(varname) ||" equals Missing";
16972 +            end;
16973 +         end;
16974 +         else if RELATION in ("ISNOTMISSING") then do;
16975 +            if ^first.node then do;
16976 +              string = " AND "|| strip(varname) || " equals All Values";
16977 +            end;
16978 +            else do;
16979 +              string = "if "|| strip(varname) ||" equals All Values";
16980 +            end;
16981 +         end;
16982 +         if ^missing(varname) then origvar = varname;
16983 +         oldnode=node;
16985 +      end;
16986 +      else do;
16987 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16988 +          if MISSING(CHARACTER_VALUE) then do;
16989 +           if  NUMERIC_VALUE ne .  then do;
16990 +            if ^MISSING(string) then
16991 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16992 +            else
16993 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16994 +           end;
16995 +          end;
16996 +          else do;
16997 +            if ^MISSING(string) then
16998 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16999 +            else
17000 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17001 +          end;
17003 +         end;
17004 +         else if RELATION in ("=") then do;
17005 +           string = strip(string)||", "||strip(character_value);
17006 +         end;
17007 +         else if RELATION in ("ISMISSING") then do;
17009 +         end;
17010 +         if ^missing(varname) then origvar = varname;
17011 +         oldnode=node;
17012 +      end;
17013 +      if last.varname then do;
17014 +         if RELATION in ("ISMISSING") then do;
17015 +           if ^first.varname then do;
17016 +             string = strip(string) || " or MISSING";
17017 +           end;
17018 +         end;
17019 +         put string;
17020 +         if ^missing(varname) then origvar = varname;
17021 +         oldnode=node;
17022 +      end;
17024 +      if last.node then do;
17025 +         put "then ";
17026 +         put " Tree Node Identifier   = " node;
17028 +         %if "&nprior_flag" ne "." %then %do;
17029 +           put " Number of Observations = " NPRIORS;
17030 +         %end;
17031 +         %else %do;
17032 +           put " Number of Observations = " N;
17033 +         %end;
17035 +         %if &numpred gt 0 %then %do;
17036 +           %do i=1 %to &numpred;
17037 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17038 +           %end;
17039 +         %end;
17041 +         put " ";
17042 +         if ^missing(varname) then origvar = varname;
17043 +         oldnode=node;
17044 +      end;
17046 +  run;
17048 +  proc datasets lib=work nolist;
17049 +    delete tempoutpath outnodes;
17050 +  run;
17052 +  %doendm:
17053 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 4000   Memory used = 511K.
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE3.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_ORGYN_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 4000   Memory used = 511K.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4000 observations read from the data set EMWS1.EM_TREE3.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
NOTE: 1596456 kilobytes of physical memory.
NOTE: Will use 4000 out of 4000 training cases.
NOTE: Using memory pool with 152157184 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 1517200 bytes of work memory.
NOTE: The subtree sequence contains 23 subtrees. The largest has 42 nodes and 25 leaves.
NOTE: Using subtree with 21 nodes and 13 leaves.
NOTE: Using subtree with 21 nodes and 13 leaves.
NOTE: Created macro variable NLEAVES equal to 13.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 14 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_EMTREE has 1094 observations and 4 variables.
NOTE: The data set EMWS1.TREE3_OUTNODES has 21 observations and 24 variables.
NOTE: The data set EMWS1.TREE3_OUTPATH has 72 observations and 7 variables.
NOTE: The data set EMWS1.TREE3_OUTRULES has 228 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_OUTSEQ has 23 observations and 20 variables.
NOTE: The data set EMWS1.TREE3_OUTSTATS has 147 observations and 5 variables.
NOTE: The data set EMWS1.TREE3_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_OUTTOPOLOGY has 21 observations and 5 variables.
NOTE: External file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\TREEFLOW.sas opened.
NOTE: External file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
 
 
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.76 seconds
      cpu time            0.37 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4000 observations read from the data set EMWS1.EM_TREE3.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.77 seconds
      cpu time            0.37 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE3_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 72 observations read from the data set EMWS1.TREE3_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 72 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_ORGYN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 72 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: The data set WORK.OUTNODES has 21 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 21 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 72 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 72 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=03 December 2021 17:46:27,
      Create Time=03 December 2021 17:46:27
 
NOTE: 149 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 72 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref X has been deassigned.
17055
17056  *------------------------------------------------------------*;
17057  * End TRAIN: Tree3;
17058  *------------------------------------------------------------*;
 
17059  *------------------------------------------------------------*;
17060  * Close any missing semi colons;
17061  *------------------------------------------------------------*;
17062  ;
17063  ;
17064  ;
17065  ;
17066  quit;
17067  *------------------------------------------------------------*;
17068  * Close any unbalanced quotes;
17069  *------------------------------------------------------------*;
17070  /*; *"; *'; */
17071  ;
17072  run;
17073  quit;
17074  /* Reset EM Options */
17075  options formchar="|----|+|---+=|-/\<>*";
17076  options nocenter ls=256 ps=10000;
17077  goptions reset=all device=GIF NODISPLAY;
 
17078  proc sort data=WORK.EM_USER_REPORT;
17079  by ID VIEW;
17080  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                03 December 2021
Time:                17:46:28
*------------------------------------------------------------*
17182  %let EMEXCEPTIONSTRING=;
17183  *------------------------------------------------------------*;
17184  * SCORE: Tree3;
17185  *------------------------------------------------------------*;
17186  %let EM_ACTION = SCORE;
17187  %let syscc = 0;
17188  %macro main;
17189
17190    %if %upcase(&EM_ACTION) = CREATE %then %do;
17191      filename temp catalog 'sashelp.emmodl.tree_create.source';
17192      %include temp;
17193      filename temp;
17194
17195      %em_tree_create;
17196    %end;
17197
17198     %else
17199     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17200
17201         filename temp catalog 'sashelp.emmodl.tree_train.source';
17202         %include temp;
17203         filename temp;
17204         %em_tree_train;
17205     %end;
17206
17207    %else
17208    %if %upcase(&EM_ACTION) = SCORE %then %do;
17209      filename temp catalog 'sashelp.emmodl.tree_score.source';
17210      %include temp;
17211      filename temp;
17212
17213      %em_tree_score;
17214
17215    %end;
17216
17217    %else
17218    %if %upcase(&EM_ACTION) = REPORT %then %do;
17219
17220         filename temp catalog 'sashelp.emmodl.tree_report.source';
17221         %include temp;
17222         filename temp;
17223
17224         %em_tree_report;
17225     %end;
17226
17227    %else
17228    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17229
17230         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17231         %include temp;
17232         filename temp;
17233         %EM_TREE_OPENTREEVIEWER;
17234
17235     %end;
17236
17237    %else
17238    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17239
17240         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17241         %include temp;
17242         filename temp;
17243         %EM_TREE_CLOSETREEVIEWER;
17244
17245     %end;
17246
17247
17248     %doendm:
17249  %mend main;
17250
17251  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17253 +%macro em_tree_score;
17255 +   /* determine if multiple targets will be processed */
17256 +   %let em_tree_multipleTargets=N;
17257 +   %let em_tree_numTarget=1;
17258 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17259 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17260 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17261 +         %let em_tree_multipleTargets=N;
17262 +      %end;
17263 +      %else %do;
17264 +         /* create macro array of targets  */
17265 +         data _null_;
17266 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17267 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17268 +           if eof then
17269 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17270 +        run;
17272 +        %if &em_tree_numTarget gt 1 %then %do;
17273 +           %let em_tree_multipleTargets=Y;
17274 +        %end;
17275 +      %end;
17276 +   %end;
17278 +   /* build flow and publish scoring code */
17279 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17280 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17282 +   filename treeflow "&EM_USER_TREEFLOW";
17283 +   filename treepub "&EM_USER_TREEPUBLISH";
17285 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17286 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17288 +   %em_copyfile(infref=treeflow, outfref=flowref);
17289 +   %em_copyfile(infref=treepub, outfref=pubref);
17291 +   filename treeflow;
17292 +   filename treepub;
17294 +   /* if priors are used, add code to generate unadjusted residuals in export */
17295 +   %let useAdjPriors = N;
17296 +   data _null_;
17297 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17298 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17299 +   run;
17300 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17301 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17302 +      %include temp;
17303 +      filename temp;
17305 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17306 +      filename adjref "&EM_USER_adjResidualCode";
17307 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17309 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17311 +      filename adjref;
17312 +   %end;
17314 +   /* LEAF */
17315 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17316 +      data _null_;
17317 +        file flowref mod;
17318 +        put 'drop _LEAF_;';
17319 +      run;
17321 +      data _null_;
17322 +        file pubref mod;
17323 +        put 'drop _LEAF_;';
17324 +      run;
17326 +   %end;
17328 +   filename flowref;
17329 +   filename pubref;
17331 +   /* em_metachange code */
17332 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17333 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17334 +   %end;
17336 +   /* variable selection based on importance stat    */
17337 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17338 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17339 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17340 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17341 +     %let obs = %sysfunc(fetch(&dsid));
17342 +     %do %while(&obs=0);
17343 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17344 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17345 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17346 +       %let obs = %sysfunc(fetch(&dsid));
17347 +     %end;
17348 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17349 +   %end;
17351 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17352 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17353 +    %let tree_pred_vars = ;
17354 +    %let tree_pred_lvl =;
17355 +    %let numpred= 0;
17357 +    data _null_;
17358 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17359 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17360 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17361 +     if eof then
17362 +       call symput('numpred', strip(put(_N_, BEST.)));
17363 +    run;
17364 +   %end;
17366 +   %if &numpred ne 0 %then %do;
17367 +    %do i=1 %to &numpred;
17368 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17369 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17370 +    %end;
17371 +   %end;
17373 +   /* determine if multiple targets will be processed */
17374 +   %let em_tree_multipleTargets=N;
17375 +   %let em_tree_numTarget=1;
17376 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17377 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17378 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17379 +         %let em_tree_multipleTargets=N;
17380 +      %end;
17381 +      %else %do;
17382 +        data _null_;
17383 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17384 +          if eof then
17385 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17386 +        run;
17388 +        %if &em_tree_numTarget gt 1 %then %do;
17389 +           %let em_tree_multipleTargets=Y;
17390 +        %end;
17391 +     %end;
17392 +   %end;
17394 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17395 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17397 +      /* variable importance */
17398 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17399 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17401 +         %let validexist=0;
17402 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17403 +           %let validexist=1;
17404 +         %end;
17406 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17407 +         /* and the columns may not be generated                                                                                 */
17408 +         %let em_tree_cvexists=;
17409 +         %let em_tree_surrexists=.;
17410 +         data _null_;
17411 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17412 +            if eof then do ;
17413 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17414 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17415 +            end;
17416 +         run;
17418 +         data &EM_USER_OUTIMPORT;
17419 +            set &EM_USER_OUTIMPORT;
17421 +            /* format columns based on Precison value specified */
17422 +            format importance 15.&EM_PROPERTY_PRECISION
17423 +                 %if &validexist %then %do;
17424 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17425 +                 %end;
17426 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17427 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17428 +                 %end;
17429 +            ;
17430 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17431 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17432 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17433 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17434 +                 %if "&em_tree_surrexists" ne "" %then %do;
17435 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17436 +                 %end;
17437 +                 %if &validexist %then %do;
17438 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17439 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17440 +                 %end;
17441 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17442 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17443 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17444 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17445 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17446 +                 %end;
17447 +            ;
17448 +         run;
17450 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17451 +      %end;
17452 +   %end;
17454 +   %doendm:
17455 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=03 December 2021 17:46:27,
      Create Time=03 December 2021 17:46:27
 
NOTE: 242 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=03 December 2021 17:46:27,
      Create Time=03 December 2021 17:46:27
 
NOTE: 220 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_ORGYN_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=8201,
      Last Modified=03 December 2021 17:46:27,
      Create Time=03 December 2021 17:46:27
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=7616,
      Last Modified=03 December 2021 17:46:27,
      Create Time=03 December 2021 17:46:27
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_ORGYN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 14 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
17456
17457  *------------------------------------------------------------*;
17458  * End SCORE: Tree3;
17459  *------------------------------------------------------------*;
 
17460  proc sort data=WORK.EM_METACHANGE;
17461  by key uname;
17462  run;
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17463  filename x "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\CDELTA_TRAIN.sas";
17464  data _null_;
17465  file x;
17466  put 'if upcase(NAME) = "BILL" then do;';
17467  put 'ROLE = "REJECTED";';
17468  put 'end;';
17469  put 'else ';
17470  put 'if upcase(NAME) = "CLASS" then do;';
17471  put 'ROLE = "REJECTED";';
17472  put 'end;';
17473  put 'else ';
17474  put 'if upcase(NAME) = "LTIME" then do;';
17475  put 'ROLE = "REJECTED";';
17476  put 'end;';
17477  put 'else ';
17478  put 'if upcase(NAME) = "NGROUP" then do;';
17479  put 'ROLE = "REJECTED";';
17480  put 'end;';
17481  put 'else ';
17482  put 'if upcase(NAME) = "OAC" then do;';
17483  put 'ROLE = "REJECTED";';
17484  put 'end;';
17485  put 'else ';
17486  put 'if upcase(NAME) = "Q_ORGYN0" then do;';
17487  put 'ROLE = "ASSESS";';
17488  put 'end;';
17489  put 'else ';
17490  put 'if upcase(NAME) = "Q_ORGYN1" then do;';
17491  put 'ROLE = "ASSESS";';
17492  put 'end;';
17493  put 'else ';
17494  put 'if upcase(NAME) = "REGION" then do;';
17495  put 'ROLE = "REJECTED";';
17496  put 'end;';
17497  put 'else ';
17498  put 'if upcase(NAME) = "S_CONV" then do;';
17499  put 'ROLE = "REJECTED";';
17500  put 'end;';
17501  put 'else ';
17502  put 'if upcase(NAME) = "S_FVEG" then do;';
17503  put 'ROLE = "REJECTED";';
17504  put 'end;';
17505  put 'else ';
17506  put 'if upcase(NAME) = "S_MT" then do;';
17507  put 'ROLE = "REJECTED";';
17508  put 'end;';
17509  put 'else ';
17510  put 'if upcase(NAME) = "S_TOIL" then do;';
17511  put 'ROLE = "REJECTED";';
17512  put 'end;';
17513  put 'else ';
17514  put 'if upcase(NAME) = "TV_REG" then do;';
17515  put 'ROLE = "REJECTED";';
17516  put 'end;';
17517  put 'else ';
17518  put 'if upcase(NAME) = "_NODE_" then do;';
17519  put 'ROLE = "SEGMENT";';
17520  put 'LEVEL = "NOMINAL";';
17521  put 'end;';
17522  run;
 
NOTE: The file X is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=03 December 2021 17:46:28,
      Create Time=30 November 2021 18:45:47
 
NOTE: 56 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 37.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17523  filename x;
NOTE: Fileref X has been deassigned.
 
17524  filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
17525  *------------------------------------------------------------*;
17526  * Tree3: Scoring DATA data;
17527  *------------------------------------------------------------*;
17528  data EMWS1.Tree3_TRAIN
17529  / view=EMWS1.Tree3_TRAIN
17530  ;
17531  set EMWS1.Part_TRAIN
17532  ;
17533  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas.
17534 +****************************************************************;
17535 +******             DECISION TREE SCORING CODE             ******;
17536 +****************************************************************;
17537 +
17538 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17539 +LENGTH F_ORGYN  $   12;
17540 +LENGTH I_ORGYN  $   12;
17541 +LENGTH _WARN_  $    4;
17542 +
17543 +******              LABELS FOR NEW VARIABLES              ******;
17544 +label _NODE_ = 'Node' ;
17545 +label _LEAF_ = 'Leaf' ;
17546 +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
17547 +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
17548 +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
17549 +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
17550 +label V_ORGYN1 = 'Validated: ORGYN=1' ;
17551 +label V_ORGYN0 = 'Validated: ORGYN=0' ;
17552 +label R_ORGYN1 = 'Residual: ORGYN=1' ;
17553 +label R_ORGYN0 = 'Residual: ORGYN=0' ;
17554 +label F_ORGYN = 'From: ORGYN' ;
17555 +label I_ORGYN = 'Into: ORGYN' ;
17556 +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
17557 +label _WARN_ = 'Warnings' ;
17558 +
17559 +
17560 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17561 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17562 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17563 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17564 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17565 +
17566 +
17567 +_ARBFMT_12 = PUT( ORGYN , BEST12.);
17568 + %DMNORMCP( _ARBFMT_12, F_ORGYN );
17569 +
17570 +******             ASSIGN OBSERVATION TO NODE             ******;
17571 +IF  NOT MISSING(AGE ) AND
17572 +  AGE  <                 39.5 THEN DO;
17573 +  _ARBFMT_1 = PUT( GENDER , $1.);
17574 +   %DMNORMIP( _ARBFMT_1);
17575 +  IF _ARBFMT_1 IN ('F' ) THEN DO;
17576 +    _NODE_  =                    5;
17577 +    _LEAF_  =                    1;
17578 +    P_ORGYN1  =     0.69696969696969;
17579 +    P_ORGYN0  =      0.3030303030303;
17580 +    Q_ORGYN1  =     0.69696969696969;
17581 +    Q_ORGYN0  =      0.3030303030303;
17582 +    V_ORGYN1  =     0.73404255319148;
17583 +    V_ORGYN0  =     0.26595744680851;
17584 +    I_ORGYN  = '1' ;
17585 +    U_ORGYN  =                    1;
17586 +    END;
17587 +  ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17588 +    IF  NOT MISSING(AFFL ) AND
17589 +                      10.5 <= AFFL  THEN DO;
17590 +      _NODE_  =                   17;
17591 +      _LEAF_  =                    3;
17592 +      P_ORGYN1  =     0.73684210526315;
17593 +      P_ORGYN0  =     0.26315789473684;
17594 +      Q_ORGYN1  =     0.73684210526315;
17595 +      Q_ORGYN0  =     0.26315789473684;
17596 +      V_ORGYN1  =                0.625;
17597 +      V_ORGYN0  =                0.375;
17598 +      I_ORGYN  = '1' ;
17599 +      U_ORGYN  =                    1;
17600 +      END;
17601 +    ELSE DO;
17602 +      _NODE_  =                   16;
17603 +      _LEAF_  =                    2;
17604 +      P_ORGYN1  =     0.30681818181818;
17605 +      P_ORGYN0  =     0.69318181818181;
17606 +      Q_ORGYN1  =     0.30681818181818;
17607 +      Q_ORGYN0  =     0.69318181818181;
17608 +      V_ORGYN1  =     0.35365853658536;
17609 +      V_ORGYN0  =     0.64634146341463;
17610 +      I_ORGYN  = '0' ;
17611 +      U_ORGYN  =                    0;
17612 +      END;
17613 +    END;
17614 +  ELSE DO;
17615 +    _NODE_  =                    7;
17616 +    _LEAF_  =                    4;
17617 +    P_ORGYN1  =     0.19402985074626;
17618 +    P_ORGYN0  =     0.80597014925373;
17619 +    Q_ORGYN1  =     0.19402985074626;
17620 +    Q_ORGYN0  =     0.80597014925373;
17621 +    V_ORGYN1  =     0.32786885245901;
17622 +    V_ORGYN0  =     0.67213114754098;
17623 +    I_ORGYN  = '0' ;
17624 +    U_ORGYN  =                    0;
17625 +    END;
17626 +  END;
17627 +ELSE IF  NOT MISSING(AGE ) AND
17628 +                  39.5 <= AGE  AND
17629 +  AGE  <                 44.5 THEN DO;
17630 +  IF  NOT MISSING(AFFL ) AND
17631 +    AFFL  <                  9.5 THEN DO;
17632 +    _NODE_  =                    8;
17633 +    _LEAF_  =                    5;
17634 +    P_ORGYN1  =     0.25462962962962;
17635 +    P_ORGYN0  =     0.74537037037037;
17636 +    Q_ORGYN1  =     0.25462962962962;
17637 +    Q_ORGYN0  =     0.74537037037037;
17638 +    V_ORGYN1  =     0.25850340136054;
17639 +    V_ORGYN0  =     0.74149659863945;
17640 +    I_ORGYN  = '0' ;
17641 +    U_ORGYN  =                    0;
17642 +    END;
17643 +  ELSE IF  NOT MISSING(AFFL ) AND
17644 +                    15.5 <= AFFL  THEN DO;
17645 +    _NODE_  =                   10;
17646 +    _LEAF_  =                    8;
17647 +    P_ORGYN1  =     0.94444444444444;
17648 +    P_ORGYN0  =     0.05555555555555;
17649 +    Q_ORGYN1  =     0.94444444444444;
17650 +    Q_ORGYN0  =     0.05555555555555;
17651 +    V_ORGYN1  =     0.85714285714285;
17652 +    V_ORGYN0  =     0.14285714285714;
17653 +    I_ORGYN  = '1' ;
17654 +    U_ORGYN  =                    1;
17655 +    END;
17656 +  ELSE DO;
17657 +    _ARBFMT_1 = PUT( GENDER , $1.);
17658 +     %DMNORMIP( _ARBFMT_1);
17659 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17660 +      _NODE_  =                   18;
17661 +      _LEAF_  =                    6;
17662 +      P_ORGYN1  =     0.66666666666666;
17663 +      P_ORGYN0  =     0.33333333333333;
17664 +      Q_ORGYN1  =     0.66666666666666;
17665 +      Q_ORGYN0  =     0.33333333333333;
17666 +      V_ORGYN1  =     0.67213114754098;
17667 +      V_ORGYN0  =     0.32786885245901;
17668 +      I_ORGYN  = '1' ;
17669 +      U_ORGYN  =                    1;
17670 +      END;
17671 +    ELSE DO;
17672 +      _NODE_  =                   19;
17673 +      _LEAF_  =                    7;
17674 +      P_ORGYN1  =     0.34545454545454;
17675 +      P_ORGYN0  =     0.65454545454545;
17676 +      Q_ORGYN1  =     0.34545454545454;
17677 +      Q_ORGYN0  =     0.65454545454545;
17678 +      V_ORGYN1  =     0.43589743589743;
17679 +      V_ORGYN0  =     0.56410256410256;
17680 +      I_ORGYN  = '0' ;
17681 +      U_ORGYN  =                    0;
17682 +      END;
17683 +    END;
17684 +  END;
17685 +ELSE DO;
17686 +  IF  NOT MISSING(AFFL ) AND
17687 +    AFFL  <                  8.5 THEN DO;
17688 +    _NODE_  =                   11;
17689 +    _LEAF_  =                    9;
17690 +    P_ORGYN1  =     0.07707006369426;
17691 +    P_ORGYN0  =     0.92292993630573;
17692 +    Q_ORGYN1  =     0.07707006369426;
17693 +    Q_ORGYN0  =     0.92292993630573;
17694 +    V_ORGYN1  =     0.08198121263877;
17695 +    V_ORGYN0  =     0.91801878736122;
17696 +    I_ORGYN  = '0' ;
17697 +    U_ORGYN  =                    0;
17698 +    END;
17699 +  ELSE IF  NOT MISSING(AFFL ) AND
17700 +                    12.5 <= AFFL  THEN DO;
17701 +    IF  NOT MISSING(AFFL ) AND
17702 +                      17.5 <= AFFL  THEN DO;
17703 +      _NODE_  =                   25;
17704 +      _LEAF_  =                   13;
17705 +      P_ORGYN1  =      0.9090909090909;
17706 +      P_ORGYN0  =     0.09090909090909;
17707 +      Q_ORGYN1  =      0.9090909090909;
17708 +      Q_ORGYN0  =     0.09090909090909;
17709 +      V_ORGYN1  =                 0.95;
17710 +      V_ORGYN0  =                 0.05;
17711 +      I_ORGYN  = '1' ;
17712 +      U_ORGYN  =                    1;
17713 +      END;
17714 +    ELSE DO;
17715 +      _ARBFMT_1 = PUT( GENDER , $1.);
17716 +       %DMNORMIP( _ARBFMT_1);
17717 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
17718 +        _NODE_  =                   32;
17719 +        _LEAF_  =                   11;
17720 +        P_ORGYN1  =     0.51764705882352;
17721 +        P_ORGYN0  =     0.48235294117647;
17722 +        Q_ORGYN1  =     0.51764705882352;
17723 +        Q_ORGYN0  =     0.48235294117647;
17724 +        V_ORGYN1  =     0.52678571428571;
17725 +        V_ORGYN0  =     0.47321428571428;
17726 +        I_ORGYN  = '1' ;
17727 +        U_ORGYN  =                    1;
17728 +        END;
17729 +      ELSE DO;
17730 +        _NODE_  =                   33;
17731 +        _LEAF_  =                   12;
17732 +        P_ORGYN1  =     0.25773195876288;
17733 +        P_ORGYN0  =     0.74226804123711;
17734 +        Q_ORGYN1  =     0.25773195876288;
17735 +        Q_ORGYN0  =     0.74226804123711;
17736 +        V_ORGYN1  =      0.2289156626506;
17737 +        V_ORGYN0  =     0.77108433734939;
17738 +        I_ORGYN  = '0' ;
17739 +        U_ORGYN  =                    0;
17740 +        END;
17741 +      END;
17742 +    END;
17743 +  ELSE DO;
17744 +    _NODE_  =                   12;
17745 +    _LEAF_  =                   10;
17746 +    P_ORGYN1  =     0.17847769028871;
17747 +    P_ORGYN0  =     0.82152230971128;
17748 +    Q_ORGYN1  =     0.17847769028871;
17749 +    Q_ORGYN0  =     0.82152230971128;
17750 +    V_ORGYN1  =     0.17075892857142;
17751 +    V_ORGYN0  =     0.82924107142857;
17752 +    I_ORGYN  = '0' ;
17753 +    U_ORGYN  =                    0;
17754 +    END;
17755 +  END;
17756 +
17757 +*****  RESIDUALS R_ *************;
17758 +IF  F_ORGYN  NE '1'
17759 +AND F_ORGYN  NE '0'  THEN DO;
17760 +        R_ORGYN1  = .;
17761 +        R_ORGYN0  = .;
17762 + END;
17763 + ELSE DO;
17764 +       R_ORGYN1  =  -P_ORGYN1 ;
17765 +       R_ORGYN0  =  -P_ORGYN0 ;
17766 +       SELECT( F_ORGYN  );
17767 +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
17768 +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
17769 +       END;
17770 + END;
17771 +
17772 +****************************************************************;
17773 +******          END OF DECISION TREE SCORING CODE         ******;
17774 +****************************************************************;
17775 +
17776 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17777  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE3_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17778  quit;
17779  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17780  filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
17781  *------------------------------------------------------------*;
17782  * Tree3: Scoring VALIDATE data;
17783  *------------------------------------------------------------*;
17784  data EMWS1.Tree3_VALIDATE
17785  / view=EMWS1.Tree3_VALIDATE
17786  ;
17787  set EMWS1.Part_VALIDATE
17788  ;
17789  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas.
17790 +****************************************************************;
17791 +******             DECISION TREE SCORING CODE             ******;
17792 +****************************************************************;
17793 +
17794 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17795 +LENGTH F_ORGYN  $   12;
17796 +LENGTH I_ORGYN  $   12;
17797 +LENGTH _WARN_  $    4;
17798 +
17799 +******              LABELS FOR NEW VARIABLES              ******;
17800 +label _NODE_ = 'Node' ;
17801 +label _LEAF_ = 'Leaf' ;
17802 +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
17803 +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
17804 +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
17805 +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
17806 +label V_ORGYN1 = 'Validated: ORGYN=1' ;
17807 +label V_ORGYN0 = 'Validated: ORGYN=0' ;
17808 +label R_ORGYN1 = 'Residual: ORGYN=1' ;
17809 +label R_ORGYN0 = 'Residual: ORGYN=0' ;
17810 +label F_ORGYN = 'From: ORGYN' ;
17811 +label I_ORGYN = 'Into: ORGYN' ;
17812 +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
17813 +label _WARN_ = 'Warnings' ;
17814 +
17815 +
17816 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17817 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17818 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17819 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17820 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17821 +
17822 +
17823 +_ARBFMT_12 = PUT( ORGYN , BEST12.);
17824 + %DMNORMCP( _ARBFMT_12, F_ORGYN );
17825 +
17826 +******             ASSIGN OBSERVATION TO NODE             ******;
17827 +IF  NOT MISSING(AGE ) AND
17828 +  AGE  <                 39.5 THEN DO;
17829 +  _ARBFMT_1 = PUT( GENDER , $1.);
17830 +   %DMNORMIP( _ARBFMT_1);
17831 +  IF _ARBFMT_1 IN ('F' ) THEN DO;
17832 +    _NODE_  =                    5;
17833 +    _LEAF_  =                    1;
17834 +    P_ORGYN1  =     0.69696969696969;
17835 +    P_ORGYN0  =      0.3030303030303;
17836 +    Q_ORGYN1  =     0.69696969696969;
17837 +    Q_ORGYN0  =      0.3030303030303;
17838 +    V_ORGYN1  =     0.73404255319148;
17839 +    V_ORGYN0  =     0.26595744680851;
17840 +    I_ORGYN  = '1' ;
17841 +    U_ORGYN  =                    1;
17842 +    END;
17843 +  ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17844 +    IF  NOT MISSING(AFFL ) AND
17845 +                      10.5 <= AFFL  THEN DO;
17846 +      _NODE_  =                   17;
17847 +      _LEAF_  =                    3;
17848 +      P_ORGYN1  =     0.73684210526315;
17849 +      P_ORGYN0  =     0.26315789473684;
17850 +      Q_ORGYN1  =     0.73684210526315;
17851 +      Q_ORGYN0  =     0.26315789473684;
17852 +      V_ORGYN1  =                0.625;
17853 +      V_ORGYN0  =                0.375;
17854 +      I_ORGYN  = '1' ;
17855 +      U_ORGYN  =                    1;
17856 +      END;
17857 +    ELSE DO;
17858 +      _NODE_  =                   16;
17859 +      _LEAF_  =                    2;
17860 +      P_ORGYN1  =     0.30681818181818;
17861 +      P_ORGYN0  =     0.69318181818181;
17862 +      Q_ORGYN1  =     0.30681818181818;
17863 +      Q_ORGYN0  =     0.69318181818181;
17864 +      V_ORGYN1  =     0.35365853658536;
17865 +      V_ORGYN0  =     0.64634146341463;
17866 +      I_ORGYN  = '0' ;
17867 +      U_ORGYN  =                    0;
17868 +      END;
17869 +    END;
17870 +  ELSE DO;
17871 +    _NODE_  =                    7;
17872 +    _LEAF_  =                    4;
17873 +    P_ORGYN1  =     0.19402985074626;
17874 +    P_ORGYN0  =     0.80597014925373;
17875 +    Q_ORGYN1  =     0.19402985074626;
17876 +    Q_ORGYN0  =     0.80597014925373;
17877 +    V_ORGYN1  =     0.32786885245901;
17878 +    V_ORGYN0  =     0.67213114754098;
17879 +    I_ORGYN  = '0' ;
17880 +    U_ORGYN  =                    0;
17881 +    END;
17882 +  END;
17883 +ELSE IF  NOT MISSING(AGE ) AND
17884 +                  39.5 <= AGE  AND
17885 +  AGE  <                 44.5 THEN DO;
17886 +  IF  NOT MISSING(AFFL ) AND
17887 +    AFFL  <                  9.5 THEN DO;
17888 +    _NODE_  =                    8;
17889 +    _LEAF_  =                    5;
17890 +    P_ORGYN1  =     0.25462962962962;
17891 +    P_ORGYN0  =     0.74537037037037;
17892 +    Q_ORGYN1  =     0.25462962962962;
17893 +    Q_ORGYN0  =     0.74537037037037;
17894 +    V_ORGYN1  =     0.25850340136054;
17895 +    V_ORGYN0  =     0.74149659863945;
17896 +    I_ORGYN  = '0' ;
17897 +    U_ORGYN  =                    0;
17898 +    END;
17899 +  ELSE IF  NOT MISSING(AFFL ) AND
17900 +                    15.5 <= AFFL  THEN DO;
17901 +    _NODE_  =                   10;
17902 +    _LEAF_  =                    8;
17903 +    P_ORGYN1  =     0.94444444444444;
17904 +    P_ORGYN0  =     0.05555555555555;
17905 +    Q_ORGYN1  =     0.94444444444444;
17906 +    Q_ORGYN0  =     0.05555555555555;
17907 +    V_ORGYN1  =     0.85714285714285;
17908 +    V_ORGYN0  =     0.14285714285714;
17909 +    I_ORGYN  = '1' ;
17910 +    U_ORGYN  =                    1;
17911 +    END;
17912 +  ELSE DO;
17913 +    _ARBFMT_1 = PUT( GENDER , $1.);
17914 +     %DMNORMIP( _ARBFMT_1);
17915 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17916 +      _NODE_  =                   18;
17917 +      _LEAF_  =                    6;
17918 +      P_ORGYN1  =     0.66666666666666;
17919 +      P_ORGYN0  =     0.33333333333333;
17920 +      Q_ORGYN1  =     0.66666666666666;
17921 +      Q_ORGYN0  =     0.33333333333333;
17922 +      V_ORGYN1  =     0.67213114754098;
17923 +      V_ORGYN0  =     0.32786885245901;
17924 +      I_ORGYN  = '1' ;
17925 +      U_ORGYN  =                    1;
17926 +      END;
17927 +    ELSE DO;
17928 +      _NODE_  =                   19;
17929 +      _LEAF_  =                    7;
17930 +      P_ORGYN1  =     0.34545454545454;
17931 +      P_ORGYN0  =     0.65454545454545;
17932 +      Q_ORGYN1  =     0.34545454545454;
17933 +      Q_ORGYN0  =     0.65454545454545;
17934 +      V_ORGYN1  =     0.43589743589743;
17935 +      V_ORGYN0  =     0.56410256410256;
17936 +      I_ORGYN  = '0' ;
17937 +      U_ORGYN  =                    0;
17938 +      END;
17939 +    END;
17940 +  END;
17941 +ELSE DO;
17942 +  IF  NOT MISSING(AFFL ) AND
17943 +    AFFL  <                  8.5 THEN DO;
17944 +    _NODE_  =                   11;
17945 +    _LEAF_  =                    9;
17946 +    P_ORGYN1  =     0.07707006369426;
17947 +    P_ORGYN0  =     0.92292993630573;
17948 +    Q_ORGYN1  =     0.07707006369426;
17949 +    Q_ORGYN0  =     0.92292993630573;
17950 +    V_ORGYN1  =     0.08198121263877;
17951 +    V_ORGYN0  =     0.91801878736122;
17952 +    I_ORGYN  = '0' ;
17953 +    U_ORGYN  =                    0;
17954 +    END;
17955 +  ELSE IF  NOT MISSING(AFFL ) AND
17956 +                    12.5 <= AFFL  THEN DO;
17957 +    IF  NOT MISSING(AFFL ) AND
17958 +                      17.5 <= AFFL  THEN DO;
17959 +      _NODE_  =                   25;
17960 +      _LEAF_  =                   13;
17961 +      P_ORGYN1  =      0.9090909090909;
17962 +      P_ORGYN0  =     0.09090909090909;
17963 +      Q_ORGYN1  =      0.9090909090909;
17964 +      Q_ORGYN0  =     0.09090909090909;
17965 +      V_ORGYN1  =                 0.95;
17966 +      V_ORGYN0  =                 0.05;
17967 +      I_ORGYN  = '1' ;
17968 +      U_ORGYN  =                    1;
17969 +      END;
17970 +    ELSE DO;
17971 +      _ARBFMT_1 = PUT( GENDER , $1.);
17972 +       %DMNORMIP( _ARBFMT_1);
17973 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
17974 +        _NODE_  =                   32;
17975 +        _LEAF_  =                   11;
17976 +        P_ORGYN1  =     0.51764705882352;
17977 +        P_ORGYN0  =     0.48235294117647;
17978 +        Q_ORGYN1  =     0.51764705882352;
17979 +        Q_ORGYN0  =     0.48235294117647;
17980 +        V_ORGYN1  =     0.52678571428571;
17981 +        V_ORGYN0  =     0.47321428571428;
17982 +        I_ORGYN  = '1' ;
17983 +        U_ORGYN  =                    1;
17984 +        END;
17985 +      ELSE DO;
17986 +        _NODE_  =                   33;
17987 +        _LEAF_  =                   12;
17988 +        P_ORGYN1  =     0.25773195876288;
17989 +        P_ORGYN0  =     0.74226804123711;
17990 +        Q_ORGYN1  =     0.25773195876288;
17991 +        Q_ORGYN0  =     0.74226804123711;
17992 +        V_ORGYN1  =      0.2289156626506;
17993 +        V_ORGYN0  =     0.77108433734939;
17994 +        I_ORGYN  = '0' ;
17995 +        U_ORGYN  =                    0;
17996 +        END;
17997 +      END;
17998 +    END;
17999 +  ELSE DO;
18000 +    _NODE_  =                   12;
18001 +    _LEAF_  =                   10;
18002 +    P_ORGYN1  =     0.17847769028871;
18003 +    P_ORGYN0  =     0.82152230971128;
18004 +    Q_ORGYN1  =     0.17847769028871;
18005 +    Q_ORGYN0  =     0.82152230971128;
18006 +    V_ORGYN1  =     0.17075892857142;
18007 +    V_ORGYN0  =     0.82924107142857;
18008 +    I_ORGYN  = '0' ;
18009 +    U_ORGYN  =                    0;
18010 +    END;
18011 +  END;
18012 +
18013 +*****  RESIDUALS R_ *************;
18014 +IF  F_ORGYN  NE '1'
18015 +AND F_ORGYN  NE '0'  THEN DO;
18016 +        R_ORGYN1  = .;
18017 +        R_ORGYN0  = .;
18018 + END;
18019 + ELSE DO;
18020 +       R_ORGYN1  =  -P_ORGYN1 ;
18021 +       R_ORGYN0  =  -P_ORGYN0 ;
18022 +       SELECT( F_ORGYN  );
18023 +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
18024 +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
18025 +       END;
18026 + END;
18027 +
18028 +****************************************************************;
18029 +******          END OF DECISION TREE SCORING CODE         ******;
18030 +****************************************************************;
18031 +
18032 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18033  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE3_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18034  quit;
18035  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
18036  filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
18037  *------------------------------------------------------------*;
18038  * Tree3: Scoring TEST data;
18039  *------------------------------------------------------------*;
18040  data EMWS1.Tree3_TEST
18041  / view=EMWS1.Tree3_TEST
18042  ;
18043  set EMWS1.Part_TEST
18044  ;
18045  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas.
18046 +****************************************************************;
18047 +******             DECISION TREE SCORING CODE             ******;
18048 +****************************************************************;
18049 +
18050 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
18051 +LENGTH F_ORGYN  $   12;
18052 +LENGTH I_ORGYN  $   12;
18053 +LENGTH _WARN_  $    4;
18054 +
18055 +******              LABELS FOR NEW VARIABLES              ******;
18056 +label _NODE_ = 'Node' ;
18057 +label _LEAF_ = 'Leaf' ;
18058 +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
18059 +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
18060 +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
18061 +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
18062 +label V_ORGYN1 = 'Validated: ORGYN=1' ;
18063 +label V_ORGYN0 = 'Validated: ORGYN=0' ;
18064 +label R_ORGYN1 = 'Residual: ORGYN=1' ;
18065 +label R_ORGYN0 = 'Residual: ORGYN=0' ;
18066 +label F_ORGYN = 'From: ORGYN' ;
18067 +label I_ORGYN = 'Into: ORGYN' ;
18068 +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
18069 +label _WARN_ = 'Warnings' ;
18070 +
18071 +
18072 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
18073 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
18074 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
18075 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
18076 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
18077 +
18078 +
18079 +_ARBFMT_12 = PUT( ORGYN , BEST12.);
18080 + %DMNORMCP( _ARBFMT_12, F_ORGYN );
18081 +
18082 +******             ASSIGN OBSERVATION TO NODE             ******;
18083 +IF  NOT MISSING(AGE ) AND
18084 +  AGE  <                 39.5 THEN DO;
18085 +  _ARBFMT_1 = PUT( GENDER , $1.);
18086 +   %DMNORMIP( _ARBFMT_1);
18087 +  IF _ARBFMT_1 IN ('F' ) THEN DO;
18088 +    _NODE_  =                    5;
18089 +    _LEAF_  =                    1;
18090 +    P_ORGYN1  =     0.69696969696969;
18091 +    P_ORGYN0  =      0.3030303030303;
18092 +    Q_ORGYN1  =     0.69696969696969;
18093 +    Q_ORGYN0  =      0.3030303030303;
18094 +    V_ORGYN1  =     0.73404255319148;
18095 +    V_ORGYN0  =     0.26595744680851;
18096 +    I_ORGYN  = '1' ;
18097 +    U_ORGYN  =                    1;
18098 +    END;
18099 +  ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
18100 +    IF  NOT MISSING(AFFL ) AND
18101 +                      10.5 <= AFFL  THEN DO;
18102 +      _NODE_  =                   17;
18103 +      _LEAF_  =                    3;
18104 +      P_ORGYN1  =     0.73684210526315;
18105 +      P_ORGYN0  =     0.26315789473684;
18106 +      Q_ORGYN1  =     0.73684210526315;
18107 +      Q_ORGYN0  =     0.26315789473684;
18108 +      V_ORGYN1  =                0.625;
18109 +      V_ORGYN0  =                0.375;
18110 +      I_ORGYN  = '1' ;
18111 +      U_ORGYN  =                    1;
18112 +      END;
18113 +    ELSE DO;
18114 +      _NODE_  =                   16;
18115 +      _LEAF_  =                    2;
18116 +      P_ORGYN1  =     0.30681818181818;
18117 +      P_ORGYN0  =     0.69318181818181;
18118 +      Q_ORGYN1  =     0.30681818181818;
18119 +      Q_ORGYN0  =     0.69318181818181;
18120 +      V_ORGYN1  =     0.35365853658536;
18121 +      V_ORGYN0  =     0.64634146341463;
18122 +      I_ORGYN  = '0' ;
18123 +      U_ORGYN  =                    0;
18124 +      END;
18125 +    END;
18126 +  ELSE DO;
18127 +    _NODE_  =                    7;
18128 +    _LEAF_  =                    4;
18129 +    P_ORGYN1  =     0.19402985074626;
18130 +    P_ORGYN0  =     0.80597014925373;
18131 +    Q_ORGYN1  =     0.19402985074626;
18132 +    Q_ORGYN0  =     0.80597014925373;
18133 +    V_ORGYN1  =     0.32786885245901;
18134 +    V_ORGYN0  =     0.67213114754098;
18135 +    I_ORGYN  = '0' ;
18136 +    U_ORGYN  =                    0;
18137 +    END;
18138 +  END;
18139 +ELSE IF  NOT MISSING(AGE ) AND
18140 +                  39.5 <= AGE  AND
18141 +  AGE  <                 44.5 THEN DO;
18142 +  IF  NOT MISSING(AFFL ) AND
18143 +    AFFL  <                  9.5 THEN DO;
18144 +    _NODE_  =                    8;
18145 +    _LEAF_  =                    5;
18146 +    P_ORGYN1  =     0.25462962962962;
18147 +    P_ORGYN0  =     0.74537037037037;
18148 +    Q_ORGYN1  =     0.25462962962962;
18149 +    Q_ORGYN0  =     0.74537037037037;
18150 +    V_ORGYN1  =     0.25850340136054;
18151 +    V_ORGYN0  =     0.74149659863945;
18152 +    I_ORGYN  = '0' ;
18153 +    U_ORGYN  =                    0;
18154 +    END;
18155 +  ELSE IF  NOT MISSING(AFFL ) AND
18156 +                    15.5 <= AFFL  THEN DO;
18157 +    _NODE_  =                   10;
18158 +    _LEAF_  =                    8;
18159 +    P_ORGYN1  =     0.94444444444444;
18160 +    P_ORGYN0  =     0.05555555555555;
18161 +    Q_ORGYN1  =     0.94444444444444;
18162 +    Q_ORGYN0  =     0.05555555555555;
18163 +    V_ORGYN1  =     0.85714285714285;
18164 +    V_ORGYN0  =     0.14285714285714;
18165 +    I_ORGYN  = '1' ;
18166 +    U_ORGYN  =                    1;
18167 +    END;
18168 +  ELSE DO;
18169 +    _ARBFMT_1 = PUT( GENDER , $1.);
18170 +     %DMNORMIP( _ARBFMT_1);
18171 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
18172 +      _NODE_  =                   18;
18173 +      _LEAF_  =                    6;
18174 +      P_ORGYN1  =     0.66666666666666;
18175 +      P_ORGYN0  =     0.33333333333333;
18176 +      Q_ORGYN1  =     0.66666666666666;
18177 +      Q_ORGYN0  =     0.33333333333333;
18178 +      V_ORGYN1  =     0.67213114754098;
18179 +      V_ORGYN0  =     0.32786885245901;
18180 +      I_ORGYN  = '1' ;
18181 +      U_ORGYN  =                    1;
18182 +      END;
18183 +    ELSE DO;
18184 +      _NODE_  =                   19;
18185 +      _LEAF_  =                    7;
18186 +      P_ORGYN1  =     0.34545454545454;
18187 +      P_ORGYN0  =     0.65454545454545;
18188 +      Q_ORGYN1  =     0.34545454545454;
18189 +      Q_ORGYN0  =     0.65454545454545;
18190 +      V_ORGYN1  =     0.43589743589743;
18191 +      V_ORGYN0  =     0.56410256410256;
18192 +      I_ORGYN  = '0' ;
18193 +      U_ORGYN  =                    0;
18194 +      END;
18195 +    END;
18196 +  END;
18197 +ELSE DO;
18198 +  IF  NOT MISSING(AFFL ) AND
18199 +    AFFL  <                  8.5 THEN DO;
18200 +    _NODE_  =                   11;
18201 +    _LEAF_  =                    9;
18202 +    P_ORGYN1  =     0.07707006369426;
18203 +    P_ORGYN0  =     0.92292993630573;
18204 +    Q_ORGYN1  =     0.07707006369426;
18205 +    Q_ORGYN0  =     0.92292993630573;
18206 +    V_ORGYN1  =     0.08198121263877;
18207 +    V_ORGYN0  =     0.91801878736122;
18208 +    I_ORGYN  = '0' ;
18209 +    U_ORGYN  =                    0;
18210 +    END;
18211 +  ELSE IF  NOT MISSING(AFFL ) AND
18212 +                    12.5 <= AFFL  THEN DO;
18213 +    IF  NOT MISSING(AFFL ) AND
18214 +                      17.5 <= AFFL  THEN DO;
18215 +      _NODE_  =                   25;
18216 +      _LEAF_  =                   13;
18217 +      P_ORGYN1  =      0.9090909090909;
18218 +      P_ORGYN0  =     0.09090909090909;
18219 +      Q_ORGYN1  =      0.9090909090909;
18220 +      Q_ORGYN0  =     0.09090909090909;
18221 +      V_ORGYN1  =                 0.95;
18222 +      V_ORGYN0  =                 0.05;
18223 +      I_ORGYN  = '1' ;
18224 +      U_ORGYN  =                    1;
18225 +      END;
18226 +    ELSE DO;
18227 +      _ARBFMT_1 = PUT( GENDER , $1.);
18228 +       %DMNORMIP( _ARBFMT_1);
18229 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
18230 +        _NODE_  =                   32;
18231 +        _LEAF_  =                   11;
18232 +        P_ORGYN1  =     0.51764705882352;
18233 +        P_ORGYN0  =     0.48235294117647;
18234 +        Q_ORGYN1  =     0.51764705882352;
18235 +        Q_ORGYN0  =     0.48235294117647;
18236 +        V_ORGYN1  =     0.52678571428571;
18237 +        V_ORGYN0  =     0.47321428571428;
18238 +        I_ORGYN  = '1' ;
18239 +        U_ORGYN  =                    1;
18240 +        END;
18241 +      ELSE DO;
18242 +        _NODE_  =                   33;
18243 +        _LEAF_  =                   12;
18244 +        P_ORGYN1  =     0.25773195876288;
18245 +        P_ORGYN0  =     0.74226804123711;
18246 +        Q_ORGYN1  =     0.25773195876288;
18247 +        Q_ORGYN0  =     0.74226804123711;
18248 +        V_ORGYN1  =      0.2289156626506;
18249 +        V_ORGYN0  =     0.77108433734939;
18250 +        I_ORGYN  = '0' ;
18251 +        U_ORGYN  =                    0;
18252 +        END;
18253 +      END;
18254 +    END;
18255 +  ELSE DO;
18256 +    _NODE_  =                   12;
18257 +    _LEAF_  =                   10;
18258 +    P_ORGYN1  =     0.17847769028871;
18259 +    P_ORGYN0  =     0.82152230971128;
18260 +    Q_ORGYN1  =     0.17847769028871;
18261 +    Q_ORGYN0  =     0.82152230971128;
18262 +    V_ORGYN1  =     0.17075892857142;
18263 +    V_ORGYN0  =     0.82924107142857;
18264 +    I_ORGYN  = '0' ;
18265 +    U_ORGYN  =                    0;
18266 +    END;
18267 +  END;
18268 +
18269 +*****  RESIDUALS R_ *************;
18270 +IF  F_ORGYN  NE '1'
18271 +AND F_ORGYN  NE '0'  THEN DO;
18272 +        R_ORGYN1  = .;
18273 +        R_ORGYN0  = .;
18274 + END;
18275 + ELSE DO;
18276 +       R_ORGYN1  =  -P_ORGYN1 ;
18277 +       R_ORGYN0  =  -P_ORGYN0 ;
18278 +       SELECT( F_ORGYN  );
18279 +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
18280 +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
18281 +       END;
18282 + END;
18283 +
18284 +****************************************************************;
18285 +******          END OF DECISION TREE SCORING CODE         ******;
18286 +****************************************************************;
18287 +
18288 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18289  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE3_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
18290  quit;
18291  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18293  proc sort data=WORK.EM_USER_REPORT;
18294  by ID VIEW;
18295  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18296  *------------------------------------------------------------*;
18297  * Tree3: Computing metadata for TRAIN data;
18298  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18702  data WORK.MODELTEMP_INFO;
18703  set EMWS1.Tree3_EMINFO;
18704  where DATA='Tree3' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18705  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE3_EMINFO.
      WHERE (DATA='Tree3') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18706  data EMWS1.Tree3_EMINFO;
18707  length TARGET KEY $32 DATA $43;
18708  input TARGET KEY DATA $;
18709  cards;
 
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18713  run;
18714  data EMWS1.Tree3_EMINFO;
18715  set EMWS1.Tree3_EMINFO WORK.MODELTEMP_INFO;
18716  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE3_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
18717  proc sort data = EMWS1.Tree3_EMINFO NOTHREADS;
18718  by TARGET KEY;
18719  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE3_EMINFO.
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
18720  proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18721  by TARGET KEY;
18722  run;
 
NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18723  proc sort data = EMWS1.Tree3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18724  by TARGET KEY;
18725  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE3_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18726  data EMWS1.Tree3_EMINFO;
18727  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18728  by TARGET KEY;
18729  run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE3_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18730  proc datasets lib=work nolist;
18731  delete TEMP_INFO SORTEDEMINFO;
18732  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18733  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.TREE3_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                03 December 2021
Time:                17:46:30
*------------------------------------------------------------*
18757  data EMWS1.Tree3_EMOUTFIT;
18758  set EMWS1.Tree3_EMOUTFIT;
18759  length TargetLabel $200;
18760  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18761  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMOUTFIT.
NOTE: The data set EMWS1.TREE3_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
18762  proc sort data=EMWS1.Tree3_EMREPORTFIT nothreads;
18763  by TARGET;
18764  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMREPORTFIT.
NOTE: The data set EMWS1.TREE3_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
18765  %let _EMwarndup = 0;
18766  %let _EMtargetdup =;
18767  %let _EMASEtargetdup =;
18768  data _null_;
18769  set EMWS1.Tree3_EMOUTFIT;
18770  if .<_ASE_<0.000001 then do;
18771  call symput('_EMwarndup', '1');
18772  call symput('_EMtargetdup', target);
18773  call symput('_EMASEtargetdup', put(_ASE_, best.));
18774  end;
18775  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18776  %let EMEXCEPTIONSTRING=;
18777  *------------------------------------------------------------*;
18778  * REPORT: Tree3;
18779  *------------------------------------------------------------*;
18780  %let EM_ACTION = REPORT;
18781  %let syscc = 0;
18782  %macro main;
18783
18784    %if %upcase(&EM_ACTION) = CREATE %then %do;
18785      filename temp catalog 'sashelp.emmodl.tree_create.source';
18786      %include temp;
18787      filename temp;
18788
18789      %em_tree_create;
18790    %end;
18791
18792     %else
18793     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18794
18795         filename temp catalog 'sashelp.emmodl.tree_train.source';
18796         %include temp;
18797         filename temp;
18798         %em_tree_train;
18799     %end;
18800
18801    %else
18802    %if %upcase(&EM_ACTION) = SCORE %then %do;
18803      filename temp catalog 'sashelp.emmodl.tree_score.source';
18804      %include temp;
18805      filename temp;
18806
18807      %em_tree_score;
18808
18809    %end;
18810
18811    %else
18812    %if %upcase(&EM_ACTION) = REPORT %then %do;
18813
18814         filename temp catalog 'sashelp.emmodl.tree_report.source';
18815         %include temp;
18816         filename temp;
18817
18818         %em_tree_report;
18819     %end;
18820
18821    %else
18822    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18823
18824         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18825         %include temp;
18826         filename temp;
18827         %EM_TREE_OPENTREEVIEWER;
18828
18829     %end;
18830
18831    %else
18832    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18833
18834         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18835         %include temp;
18836         filename temp;
18837         %EM_TREE_CLOSETREEVIEWER;
18838
18839     %end;
18840
18841
18842     %doendm:
18843  %mend main;
18844
18845  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18847 +%macro em_tree_makePlotDs( multipleTar= );
18849 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18850 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18851 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18852 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18854 +  /* determine if validation statistics will be displayed */
18855 +  %let validflag=N;
18856 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18857 +    /* determine if validation data exists */
18858 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18859 +      %let validflag=Y;
18860 +    %end;
18861 +  %end;
18863 +   /* retrieve name of decmeta even in presence of multiple targets */
18864 +   %let decmeta = ;
18865 +   %if &EM_DEC_DECMETA eq %then %do;
18866 +     data _Target;
18867 +       set &em_data_variableset;
18868 +       where ROLE='TARGET' and USE in('D', 'Y');
18869 +       keep NAME;
18870 +     run;
18871 +     proc sort data=_Target;
18872 +       by NAME;
18873 +     run;
18874 +     proc sort data=EM_TARGETDECINFO;
18875 +       by TARGET;
18876 +     run;
18877 +     data _Target;
18878 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18879 +       by NAME;
18880 +       if _a then do;
18881 +         call symput('decmeta', trim(DECMETA));
18882 +       end;
18883 +     run;
18884 +     proc delete data=_Target;run;
18885 +   %end;
18886 +   %else %let decmeta = &EM_DEC_DECMETA;
18889 +  /* retrieve targetEvent from decmeta */
18890 +  %let targetEvent=;
18891 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18892 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18893 +      data _null_;
18894 +       set &DECMETA(where=(_TYPE_="TARGET"));
18895 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18896 +      run;
18897 +    %end;
18898 +  %end;
18900 +  /* retrieve predicted var for targetEvent from decmeta */
18901 +  %let predTarget=;
18902 +  %let predLvl=;
18903 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18904 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18905 +      data _null_;
18906 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18907 +       call symput('predTarget', strip(VARIABLE));
18908 +       call symput('predLvl', strip(LEVEL));
18909 +      run;
18910 +    %end;
18911 +  %end;
18912 +  %else %do;
18913 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18914 +      data _null_;
18915 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18916 +       call symput('predTarget', strip(VARIABLE));
18917 +      run;
18918 +    %end;
18919 +  %end;
18921 +  /* create BelowText value */
18922 +  data belowtext;
18923 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18924 +    keep node belowtext;
18925 +  run;
18927 +  /* replace belowtext with variable label if it exists */
18928 +  data belowtext2;
18929 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18930 +    keep node belowtextlbl;
18931 +  run;
18933 +  proc sort data=belowtext; by node; run;
18934 +  proc sort data=belowtext2; by node; run;
18936 +  data belowtext;
18937 +    merge belowtext belowtext2(in=_a);
18938 +    by node;
18939 +    if _a then belowtext=belowtextlbl;
18940 +    keep node belowtext;
18941 +  run;
18943 +  /* create AboveText value */
18944 +  data abovetext;
18945 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18946 +  run;
18947 +  proc sort data=abovetext; by node numeric_value; run;
18949 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18950 +  data abovetext;
18951 +    set abovetext(rename=(node=parent));
18952 +    by parent numeric_value;
18953 +    retain abovetext tempstring flag branch origval origchar ;
18954 +    length abovetext $256;
18955 +    length tempstring origchar $64;
18957 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18958 +      if first.parent then do;
18959 +        if missing(character_value) then do;
18960 +          numeric_value = round(numeric_value, &sp_precision);
18961 +          abovetext = "< "||strip(NUMERIC_VALUE);
18962 +          branch = 1;
18963 +          origval = numeric_value;
18964 +          output;
18965 +        end;
18966 +        else do;
18967 +          abovetext = "< "||strip(CHARACTER_VALUE);
18968 +          branch = 1;
18969 +          origchar = character_value;
18970 +          output;
18971 +        end;
18973 +        if first.parent AND last.parent then do;
18974 +          if missing(character_value) then do;
18975 +            numeric_value = round(numeric_value, &sp_precision);
18976 +            branch = branch + 1;
18977 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18978 +            output;
18979 +          end;
18980 +          else do;
18981 +            branch = branch + 1;
18982 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18983 +            output;
18984 +          end;
18985 +        end;
18986 +      end;
18987 +      else if last.parent then do;
18988 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18989 +          if missing(character_value) then do;
18990 +            numeric_value = round(numeric_value, &sp_precision);
18991 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18992 +          end;
18993 +          else do;
18994 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18995 +          end;
18996 +          branch = branch + 1;
18997 +          output;
18999 +          if missing(character_value) then do;
19000 +            numeric_value = round(numeric_value, &sp_precision);
19001 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19002 +          end;
19003 +          else do;
19004 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19005 +          end;
19006 +          branch = branch + 1;
19007 +          output;
19008 +        end;
19009 +        else do;
19010 +          if missing(character_value) then do;
19011 +            numeric_value = round(numeric_value, &sp_precision);
19012 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19013 +          end;
19014 +          else do;
19015 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19016 +          end;
19017 +          branch = branch + 1;
19018 +          output;
19019 +        end;
19020 +      end;
19021 +      else do;
19022 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19023 +          if missing(character_value) then do;
19024 +            numeric_value = round(numeric_value,&sp_precision);
19025 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19026 +            origval = numeric_value;
19027 +          end;
19028 +          else do;
19029 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19030 +            origchar = character_value;
19031 +          end;
19032 +          branch = branch + 1;
19033 +          output;
19035 +        end;
19036 +        else do;
19037 +          if missing(character_value) then do;
19038 +            numeric_value = round(numeric_value, &sp_precision);
19039 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19040 +            origval = numeric_value;
19041 +          end;
19042 +          else do;
19043 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19044 +            origval = character_value;
19045 +          end;
19046 +          branch = branch + 1;
19047 +          output;
19048 +        end;
19049 +      end;
19050 +    end;
19051 +    else do;
19052 +       if first.numeric_value then do;
19053 +         flag = 0;
19054 +         abovetext = strip(CHARACTER_VALUE);
19055 +         branch = numeric_value;
19056 +         if first.numeric_value AND last.numeric_value then do;
19057 +           output;
19058 +         end;
19059 +       end;
19060 +       else if last.numeric_value then do;
19061 +         if flag=0 then do;
19062 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19063 +           length = length(strip(tempstring));
19064 +           if length < 32 then do;
19065 +             abovetext = strip(tempstring);
19066 +           end;
19067 +           else do;
19068 +             abovetext = strip(abovetext)||", ...";
19069 +             flag = 1;
19070 +           end;
19071 +         end;
19072 +         branch = numeric_value;
19073 +         output;
19074 +       end;
19075 +       else do;
19076 +         if flag=0 then do;
19077 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19078 +           length = length(strip(tempstring));
19079 +           if length < 32 then do;
19080 +             abovetext = strip(tempstring);
19081 +           end;
19082 +           else do;
19083 +             abovetext = strip(abovetext)||", ...";
19084 +             flag=1;
19085 +           end;
19086 +         end;
19087 +         branch = numeric_value;
19088 +       end;
19089 +    end;
19090 +    keep parent branch abovetext;
19091 +  run;
19093 +  /* Missing value to abovetext */
19094 +  data tempmissing;
19095 +    set &EM_USER_OUTRULES;
19096 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
19097 +    rename node=parent numeric_value=branch character_value=misschar;
19098 +  run;
19101 +  proc sort data=abovetext; by parent branch; run;
19102 +  proc sort data=tempmissing; by parent branch; run;
19103 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
19105 +  data tempoutnodes;
19106 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
19107 +    by parent branch;
19108 +    length traintotal validtotal 8;
19109 +    retain traintotal validtotal;
19111 +    if _a then do;
19112 +      if ^MISSING(abovetext) then do;
19113 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
19114 +      end;
19115 +      else do;
19116 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
19117 +      end;
19118 +    end;
19119 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
19121 +    if node=1 then do;
19122 +      traintotal = N;
19123 +      validtotal=VN;
19124 +    end;
19126 +    drop role rank stat misschar belowtext;
19127 +  run;
19128 +  proc sort data=tempoutnodes; by node; run;
19129 +  proc sort data=belowtext; by node; run;
19131 +  data tempoutnodes;
19132 +    merge tempoutnodes belowtext;
19133 +    by node;
19135 +  run;
19137 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19138 +  %let adjusted = N;
19139 +  %let npriors = 0;
19140 +  data _null_ ;
19141 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19142 +    if eof then do ;
19143 +      call symput("npriors" , strip(put(_N_,best.))) ;
19144 +    end;
19145 +  run;
19146 +  %if &npriors gt 0 %then %let adjusted=Y;
19149 +  /* create a table with targetUsed and targetLevel columns for each node */
19150 +  data temptarmeta;
19151 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19152 +    %if &multipleTar eq N %then %do;
19153 +      AND USE in ('D', 'Y')
19154 +    %end;
19155 +    ));
19156 +    length TARGET $32;
19157 +    Target=name;
19158 +    keep target level;
19159 +  run;
19161 +  %if &multipleTar eq Y %then %do;
19162 +    data temptargetused;
19163 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19164 +      keep node target;
19165 +    run;
19166 +    proc sort data=temptargetused; by target; run;
19167 +    proc sort data=temptarmeta; by target; run;
19168 +    data temptargetused;
19169 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19170 +      by target;
19171 +      if _a and _b;
19172 +    run;
19173 +  %end;
19174 +  %else %do;
19175 +    data temptargetused;
19176 +      set &EM_USER_OUTSTATS;
19177 +      length target $32 tarlevel $10;
19178 +      target="%EM_TARGET";
19179 +      tarlevel="%EM_TARGET_LEVEL";
19180 +      keep node target tarlevel;
19181 +    run;
19182 +    proc sort data=temptargetused nodupkey; by node; run;
19183 +  %end;
19185 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
19186 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19187 +  proc sort data=temptargetused; by node; run;
19190 +  /* create tables for all interval targets as well as all class targets */
19191 +  data tempinterval tempclass;
19192 +    merge tempoutstats temptargetused( rename=(target=targetused));
19193 +    by node;
19194 +    %if "&multipleTar" eq "Y" %then %do;
19195 +      if ((missing(Target)) OR (target=targetused ));
19196 +    %end;
19198 +    if tarlevel="INTERVAL" then output tempinterval;
19199 +    else output tempclass;
19200 +  run;
19202 +  /* initialize intTarget and classTarget flags */
19203 +  %let em_intNobs =0;
19204 +  %let em_classNobs = 0;
19205 +  %let em_intTarget= N;
19206 +  %let em_classTarget= N;
19208 +  proc sql;
19209 +    reset noprint;
19210 +    select count(*) into :em_intNobs from tempinterval;
19211 +  quit;
19212 +  proc sql;
19213 +    reset noprint;
19214 +    select count(*) into :em_classNobs from tempclass;
19215 +  quit;
19217 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19218 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19220 +  /* retrieve all information for interval targets */
19221 +  %if &em_intTarget eq Y %then %do;
19223 +    /* determine if leaf variable exists */
19224 +    %let dsid=%sysfunc(open(tempinterval,i));
19225 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19226 +    %let rc=%sysfunc(close(&dsid));
19228 +    proc transpose data=tempinterval
19229 +      %if &leafexists %then %do;
19230 +        (drop=leaf)
19231 +      %end;
19232 +      %if &validexist %then %do;
19233 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19234 +      %end;
19235 +      %else %do;
19236 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19237 +      %end;
19238 +      by node;
19239 +      id statname;
19240 +    run;
19241 +    data tempinterval;
19242 +      set tempinterval;
19243 +      if missing(N) then delete;
19244 +    run;
19245 +  %end;
19247 +  /* retrieve all information for class targets */
19248 +  %if &em_classTarget eq Y %then %do;
19249 +    proc sort data=tempclass; by node category; run;
19250 +    %if &validflag eq N %then %do;
19251 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19252 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19253 +    %end;
19254 +    %else %do;
19255 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19256 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19257 +    %end;
19258 +      set tempclass;
19260 +      %if &validflag eq N %then %do;
19261 +        %if "&adjusted" eq "N" %then %do;
19262 +          if statname="N" then output tempn;
19263 +        %end;
19264 +        %else %do;
19265 +          if statname="NPRIORS" then output tempn;
19266 +        %end;
19267 +        else if statname="PREDICTION" then output temppredict;
19268 +        else if statname="PROBABILITY" then output tempprob;
19269 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19270 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19271 +      %end;
19272 +      %else %do;
19273 +        %if "&adjusted" eq "N" %then %do;
19274 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19275 +        %end;
19276 +        %else %do;
19277 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19278 +        %end;
19279 +        else if statname="PREDICTION" then output temppredict;
19280 +        else if statname="PROBABILITY" then output tempprob;
19281 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19282 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19283 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19284 +      %end;
19285 +    run;
19288 +    /* determine if profit/loss exists in tempprofit */
19289 +    %let em_profitflag=0;
19290 +    %let em_lossflag=0;
19291 +    proc sql;
19292 +      reset noprint;
19293 +      select count(*) into :em_profitflag from tempprofit;
19294 +    quit;
19295 +    proc sql;
19296 +      reset noprint;
19297 +      select count(*) into :em_lossflag from temploss;
19298 +    quit;
19300 +    %if &validFlag eq Y %then %do;
19301 +      proc transpose data=tempn
19302 +        %if "&adjusted" eq "N" %then %do;
19303 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19304 +        %end;
19305 +        %else %do;
19306 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19307 +        %end;
19308 +        by node;
19309 +        id statname;
19310 +      run;
19311 +      %if &em_profitflag ne 0 %then %do;
19312 +        proc transpose data=tempprofit out=tempprofit;
19313 +          by node category;
19314 +          id statname ;
19315 +        run;
19316 +      %end;
19317 +      %if &em_lossflag ne 0 %then %do;
19318 +        proc transpose data=temploss out=temploss;
19319 +          by node category;
19320 +          id statname ;
19321 +        run;
19322 +      %end;
19323 +      data tempprob;
19324 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19325 +        by node
19326 +        %if &multipleTar eq Y %then %do;
19327 +          target
19328 +        %end;
19329 +        category;
19330 +      run;
19331 +    %end;
19333 +    /* store percentcorrect value */
19334 +    data temppredict;
19335 +      merge tempprob temppredict(in=_a);
19336 +      by node category;
19337 +      if _a then do;
19338 +        percentCorrect = statvalue;
19339 +        %if &validFlag eq Y %then %do;
19340 +          vpercentCorrect= vstatvalue;
19341 +        %end;
19342 +      end;
19343 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19344 +      %if &validFlag eq Y %then %do;
19345 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19346 +      %end;
19347 +      ;
19348 +      if missing(percentCorrect) then delete;
19349 +      drop target;
19350 +    run;
19352 +    /* build profittext */
19353 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19354 +      data tempprofittext(keep= node profittext profitloss);
19355 +        length profittext $800 profitloss 8.;
19356 +        retain profittext profitloss;
19358 +        merge tempprob
19359 +        %if &em_profitflag ne 0 %then %do;
19360 +          tempprofit
19361 +        %end;
19362 +        %else %if &em_lossflag ne 0 %then %do;
19363 +          temploss
19364 +        %end;
19365 +        ;
19366 +        by node category;
19368 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19369 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19370 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19371 +          %let profittype = ALL;
19372 +        %end;
19374 +        /* create the profitloss variable for nodecolor if selected */
19375 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19377 +        %if "&profittype" eq "ALL" %then %do;
19378 +          if strip(CATEGORY)="&targetEvent" then do;
19379 +            profitloss=statvalue;
19380 +          end;
19381 +          if first.node then do;
19382 +            %if &validFlag eq N %then %do;
19383 +             %if &em_profitflag ne 0 %then %do;
19384 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19385 +             %end;
19386 +             %if &em_lossflag ne 0 %then %do;
19387 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19388 +             %end;
19389 +            %end;
19390 +            %else %do;
19391 +             %if &em_profitflag ne 0 %then %do;
19392 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19392!+;
19393 +             %end;
19394 +             %if &em_lossflag ne 0 %then %do;
19395 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19396 +             %end;
19397 +            %end;
19398 +          end;
19399 +          else if last.node then do;
19400 +            %if &validFlag eq N %then %do;
19401 +             %if &em_profitflag ne 0 %then %do;
19402 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19403 +             %end;
19404 +             %if &em_lossflag ne 0 %then %do;
19405 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19406 +             %end;
19407 +             /*if CATEGORY="&targetEvent" then do;
19408 +               profitloss=statvalue;
19409 +             end;*/
19410 +            %end;
19411 +            %else %do;
19412 +             %if &em_profitflag ne 0 %then %do;
19413 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19413!+14.&EM_PROPERTY_SPLITPRECISION);
19414 +                if CATEGORY="&targetEvent" then do;
19415 +                 profitloss=ALTERNATIVE_PROFIT;
19416 +                end;
19417 +             %end;
19418 +             %if &em_lossflag ne 0 %then %do;
19419 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19419!+14.&EM_PROPERTY_SPLITPRECISION);
19420 +                if CATEGORY="&targetEvent" then do;
19421 +                  profitloss=ALTERNATIVE_LOSS;
19422 +                end;
19423 +             %end;
19424 +            %end;
19425 +            output;
19426 +          end;
19427 +          else do;
19428 +            %if &validFlag eq N %then %do;
19429 +             %if &em_profitflag ne 0 %then %do;
19430 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19431 +             %end;
19432 +             %if &em_lossflag ne 0 %then %do;
19433 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19434 +             %end;
19435 +            %end;
19436 +            %else %do;
19437 +             %if &em_profitflag ne 0 %then %do;
19438 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19438!+14.&EM_PROPERTY_SPLITPRECISION);
19439 +             %end;
19440 +             %if &em_lossflag ne 0 %then %do;
19441 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19441!+14.&EM_PROPERTY_SPLITPRECISION);
19442 +             %end;
19443 +            %end;
19444 +          end;
19445 +        %end;
19446 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19447 +          if strip(CATEGORY) = "&targetevent" then do;
19448 +            %if &validFlag eq N %then %do;
19449 +             %if &em_profitflag ne 0 %then %do;
19450 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19451 +             %end;
19452 +             %if &em_lossflag ne 0 %then %do;
19453 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19454 +             %end;
19455 +             profitloss=statvalue;
19456 +            %end;
19457 +            %else %do;
19458 +             %if &em_profitflag ne 0 %then %do;
19459 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19459!+;
19460 +                profitloss=ALTERNATIVE_PROFIT;
19461 +             %end;
19462 +             %if &em_lossflag ne 0 %then %do;
19463 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19464 +                profitloss=ALTERNATIVE_LOSS;
19465 +             %end;
19466 +            %end;
19467 +            output;
19468 +          end;
19469 +        %end;
19470 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19471 +          if strip(CATEGORY) = "&targetevent" then do;
19472 +            %if &validFlag eq N %then %do;
19473 +             profitloss=statvalue;
19474 +            %end;
19475 +            %else %do;
19476 +             %if &em_profitflag ne 0 %then %do;
19477 +                profitloss=ALTERNATIVE_PROFIT;
19478 +             %end;
19479 +             %if &em_lossflag ne 0 %then %do;
19480 +                profitloss=ALTERNATIVE_LOSS;
19481 +             %end;
19482 +            %end;
19483 +            output;
19484 +          end;
19485 +        %end;
19486 +      run;
19487 +    %end;
19489 +    data tempprob(keep= node probtext);
19490 +      length probtext $800;
19491 +      retain probtext;
19492 +      set tempprob ;
19493 +      by node;
19495 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19496 +      %let probtype = &EM_PROPERTY_TARGET;
19497 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19498 +        %let probtype = ALL;
19499 +      %end;
19501 +      %if "&probtype" eq "ALL" %then %do;
19502 +        if first.node then do;
19503 +          %if &validFlag eq N %then %do;
19504 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19505 +          %end;
19506 +          %else %do;
19507 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19508 +          %end;
19509 +        end;
19510 +        else if last.node then do;
19511 +          %if &validFlag eq N %then %do;
19512 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19513 +          %end;
19514 +          %else %do;
19515 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19516 +          %end;
19517 +          output;
19518 +        end;
19519 +        else do;
19520 +          %if &validFlag eq N %then %do;
19521 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19522 +          %end;
19523 +          %else %do;
19524 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19525 +          %end;
19526 +        end;
19527 +      %end;
19528 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19529 +        if strip(CATEGORY) = "&targetevent" then do;
19530 +          %if &validFlag eq N %then %do;
19531 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19532 +          %end;
19533 +          %else %do;
19534 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19535 +          %end;
19536 +          output;
19537 +        end;
19538 +      %end;
19539 +      %else %if "&probtype" eq "NONE" %then %do;
19540 +        if last.node then do;
19541 +          output;
19542 +        end;
19543 +      %end;
19544 +    run;
19545 +  %end;
19547 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19549 +  %let oldexists=0;
19550 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19551 +     data old_tree_plot;
19552 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19553 +        rename nodecolor=oldnodecolor;
19554 +     run;
19556 +     proc sort data=old_tree_plot;
19557 +        by node;
19558 +     run;
19560 +     %let oldexists=1;
19561 +  %end;
19563 +  data &EM_USER_TREE_PLOT;
19564 +    length textall $800;
19565 +    merge tempoutnodes temptargetused
19567 +    %if &em_intTarget eq Y %then %do;
19568 +      tempinterval
19569 +    %end;
19571 +    %if &em_classTarget eq Y %then %do;
19573 +      %if &validFlag eq N %then %do;
19574 +        tempn(rename=(statvalue=N))
19575 +      %end;
19576 +      %else %do;
19577 +        tempn
19578 +      %end;
19580 +      temppredict tempprob
19582 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19583 +        tempprofittext
19584 +      %end;
19585 +    %end;
19586 +    ;
19587 +    by node;
19589 +    /* build nodetext based on user selection */
19590 +    textall="";
19592 +    %if &em_intTarget eq Y %then %do;
19593 +    if tarlevel="INTERVAL" then do;
19594 +      /* Nodeid */
19595 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19596 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19597 +      %end;
19599 +      /* Target identifier if multiple targets are used */
19600 +      %if "&multipleTar" eq "Y" %then %do;
19601 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19602 +      %end;
19604 +      %if &validFlag eq Y %then %do;
19605 +         /* Column labels displayed in validflag eq Y only */
19606 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19607 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19607!+noquote ))";
19608 +         %end;
19610 +         /* Average values */
19611 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19612 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19613 +         %end;
19615 +         /* RASE */
19616 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19617 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19618 +         %end;
19620 +         /* Count */
19621 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19622 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19623 +         %end;
19624 +      %end;
19625 +      %else %do;
19626 +         /* Average values */
19627 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19628 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19629 +         %end;
19631 +         /* RASE */
19632 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19633 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19634 +         %end;
19636 +         /* Count */
19637 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19638 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19639 +         %end;
19640 +      %end;
19642 +      /* nodecolor */
19643 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19644 +        nodecolor=PREDICTION;
19645 +      %end;
19646 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19647 +        nodecolor=RASE;
19648 +      %end;
19649 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19650 +        nodecolor=1;
19651 +      %end;
19653 +    end;
19654 +    %end;
19655 +    %if &em_classTarget eq Y %then %do;
19656 +    if tarlevel^="INTERVAL" then  do;
19658 +      /* Nodeid */
19659 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19660 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19661 +      %end;
19662 +      /* Target identifier if multiple targets are used */
19663 +      %if "&multipleTar" eq "Y" %then %do;
19664 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19665 +      %end;
19667 +      /* Predicted values */
19668 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19669 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19670 +      %end;
19672 +      /* Column labels displayed in validflag eq Y only */
19673 +      %if "&ValidFlag" eq "Y" %then %do;
19674 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19675 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19675!+noquote ))";
19676 +        %end;
19677 +      %end;
19679 +      /* Target Values */
19680 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19681 +        textall=strip(textall)||"0A"x||strip(probtext);
19682 +      %end;
19684 +      /* include profit or loss for all target levels */
19685 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19686 +        textall=strip(textall)||"0A"x||strip(profittext);
19687 +      %end;
19689 +      %if &validFlag eq N %then %do;
19690 +        /* Percent Correct */
19691 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19692 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19693 +        %end;
19695 +         /* Count */
19696 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19697 +          %if "&adjusted" eq "N" %then %do;
19698 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19699 +          %end;
19700 +          %else %do;
19701 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19702 +          %end;
19703 +         %end;
19704 +      %end;
19705 +      %else %do;
19706 +        /* Percent Correct */
19707 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19708 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19709 +        %end;
19711 +         /* Count */
19712 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19713 +          %if "&adjusted" eq "N" %then %do;
19714 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19715 +          %end;
19716 +          %else %do;
19717 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19718 +          %end;
19719 +         %end;
19720 +      %end;
19722 +      /* nodecolor */
19723 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19724 +       %if &multipleTar ne Y %then %do;
19725 +        nodecolor=&predTarget;
19726 +       %end;
19727 +       %else %do;
19728 +         nodecolor=percentcorrect;
19729 +       %end;
19730 +      %end;
19731 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19732 +        nodecolor=percentcorrect;
19733 +      %end;
19734 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19735 +        nodecolor=1;
19736 +      %end;
19737 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19738 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19739 +          nodecolor=percentcorrect;
19740 +        %end;
19741 +        %else %do;
19742 +          nodecolor=profitloss;
19743 +        %end;
19744 +      %end;
19746 +    end;
19747 +    %end;
19748 +    %if &em_intTarget eq Y %then %do;
19749 +     drop  PREDICTION  TARGET TARLEVEL
19750 +     %if &ValidFlag eq Y %then %do;
19751 +         VPREDICTION
19752 +     %end;
19753 +     ;
19754 +    %end;
19755 +    %if &em_classTarget eq Y %then %do;
19756 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19757 +     %if &ValidFlag eq Y %then %do;
19758 +         VSTATVALUE
19759 +     %end;
19760 +     ;
19761 +    %end;
19763 +  run;
19765 +  /* add leaf index information to plotds - based on primary target only*/
19766 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19767 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19768 +      set &EM_USER_OUTSTATS;
19769 +      if ((statname="PROBABILITY"
19770 +      %if &validexist %then %do;
19771 +       or statname="VALID: PROBABILITY"
19772 +      %end;
19773 +      ) AND (CATEGORY="&TARGETEVENT")
19774 +      %if "&multipleTar" eq "Y" %then %do;
19775 +        AND (Target="%EM_TARGET")
19776 +      %end;
19777 +      );
19778 +    run;
19780 +    %if &validexist %then %do;
19781 +      proc sort data=tempprob; by node; run;
19782 +      %let vpredTarget = V%substr(&predTarget, 2);
19783 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19784 +         by node;
19785 +         id statname;
19786 +      run;
19787 +    %end;
19788 +  %end;
19789 +  %else %do;
19790 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19791 +      set &EM_USER_OUTSTATS;
19792 +      if ((statname="PREDICTION"
19793 +      %if &validexist %then %do;
19794 +       or statname="VALID: PREDICTION"
19795 +      %end;
19796 +      )
19797 +      %if "&multipleTar" eq "Y" %then %do;
19798 +        AND (Target="%EM_TARGET")
19799 +      %end;
19800 +      );
19801 +    run;
19802 +    %if &validexist %then %do;
19803 +      proc sort data=tempprob; by node; run;
19804 +      %let vpredTarget = V%substr(&predTarget, 2);
19805 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19806 +         by node;
19807 +         id statname;
19808 +      run;
19809 +    %end;
19810 +  %end;
19812 +  proc sort data=tempprob; by node; run;
19813 +  data tempoutnodes;
19814 +    merge tempoutnodes tempprob;
19815 +    by node;
19816 +  run;
19818 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19819 +  data tempnodes;
19820 +    retain traintotal validtotal;
19821 +    set tempnodes(where=(leaf ne . ));
19822 +    tprob=round(&predTarget, .01);
19823 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19824 +      percevent_train=round(tprob*100, .01);
19825 +    %end;
19826 +    %else %do;
19827 +      percevent_train=tprob;
19828 +    %end;
19830 +    perc_train=round((n/traintotal)*100, 0.01);
19831 +    /* leafwidth already has a *10 multiplier */
19832 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19834 +    %if &validexist %then %do;
19835 +      %let vpredTarget = V%substr(&predTarget,2);
19836 +      vprob=round(&vpredTarget, .01);
19837 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19838 +        percevent_valid=round(vprob*100, .01);
19839 +      %end;
19840 +      %else %do;
19841 +        percevent_valid=vprob;
19842 +      %end;
19843 +      perc_valid=round((vn/validtotal)*100, .01);
19844 +    %end;
19846 +    index=_N_;
19847 +    keep node index tprob perc_train percevent_train
19848 +    %if &validexist %then %do;
19849 +        vprob percevent_valid perc_valid
19850 +    %end;
19851 +    ;
19852 +  run;
19853 +  proc sort data=tempnodes; by node; run;
19854 +  data &EM_USER_TREE_PLOT;
19855 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19856 +    by node;
19857 +    if missing(node) then delete;
19858 +    %if &oldexists %then %do;
19859 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19860 +      drop oldnodecolor;
19861 +    %end;
19862 +    abovetext = compbl(abovetext);
19864 +    /* add variable labels */
19865 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19866 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19867 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19868 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19869 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19870 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19872 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19873 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19874 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19875 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19876 +          %end;
19877 +          %else %do;
19878 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19879 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19880 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19881 +          %end;
19882 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19884 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19885 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19886 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19887 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19888 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19889 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19890 +          %end;
19891 +          %else %do;
19892 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19893 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19894 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19895 +          %end;
19896 +    ;
19897 +  run;
19899 +  /* delete temporary tables */
19900 +  proc datasets lib=work nolist;
19901 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19902 +  run;
19904 +%mend em_tree_makePlotDs;
19908 +%macro em_tree_report;
19910 +   /* report properties */
19911 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19912 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19913 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19914 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19915 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19916 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19917 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19918 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19919 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19920 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19921 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19922 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19923 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19925 +   %let validexist=0;
19926 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19927 +     %let validexist=1;
19928 +   %end;
19930 +   /* determine if multiple targets will be processed */
19931 +   %let em_tree_multipleTargets=N;
19932 +   %let em_tree_numTarget=1;
19933 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19934 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19935 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19936 +         %let em_tree_multipleTargets=N;
19937 +      %end;
19938 +      %else %do;
19939 +        data _null_;
19940 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19941 +          if eof then
19942 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19943 +        run;
19945 +        %if &em_tree_numTarget gt 1 %then %do;
19946 +           %let em_tree_multipleTargets=Y;
19947 +        %end;
19948 +     %end;
19949 +   %end;
19951 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19953 +   /* variable importance */
19954 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19955 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19957 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19958 +     /* and the columns may not be generated                                                                                 */
19959 +     %let em_tree_cvexists=;
19960 +     %let em_tree_surrexists=.;
19961 +     data _null_;
19962 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19963 +       if eof then do ;
19964 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19965 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19966 +       end;
19967 +     run;
19969 +     data &EM_USER_OUTIMPORT;
19970 +         set &EM_USER_OUTIMPORT;
19971 +         /* format columns based on Precison value specified */
19972 +         format importance 15.&EM_PROPERTY_PRECISION
19973 +              %if &validexist %then %do;
19974 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19975 +              %end;
19976 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19977 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19978 +              %end;
19979 +         ;
19980 +     run;
19982 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19983 +     proc print data=&EM_USER_OUTIMPORT
19984 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19985 +          (where=((nrules>0) OR (nsurrogates>0)))
19986 +        %end;
19987 +        %else %do;
19988 +           (where=(nrules>0))
19989 +        %end;
19990 +        label noobs
19991 +        ;
19992 +     run;
19993 +     title10;
19995 +   %end;
19997 +   /* Sequence */
19998 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19999 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
20000 +   data _null_ ;
20001 +      set &EM_USER_outseq (obs=2) end=eof ;
20002 +      if eof then do ;
20003 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
20004 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
20005 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
20006 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
20007 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
20008 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
20009 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
20010 +      end;
20011 +    run;
20013 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
20014 +      data &EM_USER_OUTSEQ;
20015 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
20016 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
20017 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20018 +           _XMISC_=_VMISC_
20019 +        %end;
20020 +        %if "&em_tree_aprof" ne "."  %then %do;
20021 +           _XAPROF_=_VAPROF_
20022 +           _XPROF_ = _VPROF_
20023 +        %end;
20024 +        %if "&em_tree_aloss" ne "."  %then %do;
20025 +           _XALOSS_=_VALOSS_
20026 +        %end;
20027 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
20028 +           _XPASE_ = _VPASE_
20029 +           _XPMISC_ = _VPMISC_
20030 +        %end;
20032 +        ));
20033 +     %end;
20034 +     %else %do;
20035 +        set &EM_USER_OUTSEQ;
20036 +     %end;
20038 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
20039 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20040 +            _MISC_   15.&EM_PROPERTY_PRECISION
20041 +         %end;
20042 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
20043 +            _PASE_  15.&EM_PROPERTY_PRECISION
20044 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
20045 +         %end;
20046 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
20047 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
20048 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20049 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20050 +            %end;
20051 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
20052 +              _VPASE_  15.&EM_PROPERTY_PRECISION
20053 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
20054 +            %end;
20055 +         %end;
20056 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
20057 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
20058 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20059 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20060 +            %end;
20061 +         %end;
20062 +         %if "&em_tree_seq" ne "." %then %do;
20063 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
20064 +         %end;
20065 +         %if "&em_tree_vseq" ne "." %then %do;
20066 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
20067 +         %end;
20068 +         %if "&em_tree_aprof" ne "." %then %do;
20069 +           _APROF_ 15.&EM_PROPERTY_PRECISION
20070 +           _PROF_ 15.&EM_PROPERTY_PRECISION
20071 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20072 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
20073 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
20074 +           %end;
20075 +         %end;
20076 +         %else %if "&em_tree_aloss" ne "." %then %do;
20077 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
20078 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20079 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
20080 +           %end;
20081 +         %end;
20082 +      ;
20083 +    run;
20084 +   %end;
20086 +   /* Observation Based Importance */
20087 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
20089 +      /* need to check for 0 obs */
20090 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
20091 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
20092 +      %let rc=%sysfunc(close(&dsid));
20094 +      %if &onobs %then %do;
20095 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
20096 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
20098 +         data &EM_USER_OUTOBSIMP;
20099 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
20100 +           if _a;
20101 +           by _INPUT1_;
20102 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
20103 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20104 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
20105 +                   %end;
20106 +                   ;
20107 +         run;
20108 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
20109 +      %end;
20110 +   %end;
20112 +  %end;
20114 +  /* create dataset to support tree diagram and icicle plot */
20115 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20116 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
20118 +  /* display tree diagram */
20119 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
20120 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
20122 +  /* display icicle diagram */
20123 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
20124 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
20126 +  /* Leaf Statistics Plot */
20127 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
20129 +  /* print leaf information to output window */
20130 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
20132 +     proc sort data=&EM_USER_TREE_PLOT out=t;
20133 +       by descending N;
20134 +     run;
20136 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20137 +     %local vn;
20138 +     data _null_;
20139 +       set t (obs=2) end=eof;
20140 +       if eof then do;
20141 +         call symput("vn", strip(put(vn, best.)));
20142 +       end;
20143 +     run;
20145 +     data t;
20146 +       set t;
20147 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20148 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20149 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20150 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20151 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20152 +       %end;
20153 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20154 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20155 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20156 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20157 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20158 +          %end;
20159 +       %end;
20160 +       ;
20161 +     run;
20163 +     /* determine if rase is found in t */
20164 +    %let dsid=%sysfunc(open(t,i));
20165 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20166 +    %let rc=%sysfunc(close(&dsid));
20168 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20169 +     proc print data=t noobs label;
20170 +       where tprob ne .;
20171 +       var node depth N tprob
20172 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20173 +         %if "&vn" ne "." %then %do;
20174 +           VN
20175 +         %end;
20176 +         vprob
20177 +       %end;
20178 +       %if &raseexists %then %do;
20179 +            RASE
20180 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20181 +              VRASE
20182 +            %end;
20183 +       %end;
20184 +       ;
20185 +     run;
20186 +     title10;
20187 +  %end;
20189 +  /* create plots that are done during training of node */
20190 +  /* display iterative plot, including reference line */
20191 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20192 +   /* %if &nleaves eq  %then %do; */
20193 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20194 +      data _null_;
20195 +        set &EM_USER_OUTTOPOLOGY end=eof;
20196 +        if eof then do;
20197 +          call symput('nleaves', LEAF);
20198 +        end;
20199 +      run;
20200 +   /* %end; */
20202 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20203 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20204 +  %end;
20206 +  /* display leaf statistics */
20207 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20209 +  /* stats by node if multiple targets = Y */
20210 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20211 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20212 +    data &EM_USER_OUTSTATS;
20213 +      set &EM_USER_OUTSTATS;
20215 +     * if STATNAME="TARGET" then delete;
20216 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20217 +      drop leaf;
20218 +    run;
20219 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20221 +  %end;
20222 +  %else %do;
20223 +    /* add outstats and outdescribe to spk but not results */
20224 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20225 +  %end;
20227 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE3_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS1.TREE3_OUTSEQ.
NOTE: The data set EMWS1.TREE3_OUTSEQ has 23 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_ORGYN_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_ORGYN_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 17 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 17 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 17 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 228 observations read from the data set EMWS1.TREE3_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 8 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 8 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 8 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 8 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE3_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 147 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 147 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 147 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 126 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 147 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 147 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 147 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 21 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 147 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 147 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 147 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 147 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 21 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 21 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: There were 42 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 42 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: There were 21 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 21 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 21 observations read from the data set WORK.TEMPN.
NOTE: There were 21 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE3_TREE_PLOT has 21 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 147 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 21 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 13 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 13 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE3_TREE_PLOT.
NOTE: There were 13 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE3_TREE_PLOT has 21 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE3_TREE_PLOT.
NOTE: The data set WORK.T has 21 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 21 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 21 observations read from the data set EMWS1.TREE3_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
20228
20229  *------------------------------------------------------------*;
20230  * End REPORT: Tree3;
20231  *------------------------------------------------------------*;
 
20232  /* Reset EM Options */
20233  options formchar="|----|+|---+=|-/\<>*";
20234  options nocenter ls=256 ps=10000;
20235  goptions reset=all device=GIF NODISPLAY;
 
20236  proc sort data=WORK.EM_USER_REPORT;
20237  by ID VIEW;
20238  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20239  proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20240  by NAME;
20241  run;
 
NOTE: There were 18 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 18 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20242  proc sort data=EMWS1.Tree3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20243  by NAME;
20244  run;
 
NOTE: There were 18 observations read from the data set EMWS1.TREE3_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 18 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20245  data WORK.ASSESS_META;
20246  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20247  by NAME;
20248  run;
 
NOTE: There were 18 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 18 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 18 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20249  data EM_temp_assessMeta;
20250  set EMWS1.Tree3_CMeta_TRAIN;
20251  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20252  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20253  data EM_temp_assessdata;
20254  set EMWS1.Tree3_TRAIN(keep=
20255  F_ORGYN
20256  I_ORGYN
20257  P_ORGYN0
20258  P_ORGYN1
20259  Q_ORGYN0
20260  Q_ORGYN1
20261  R_ORGYN0
20262  R_ORGYN1
20263  U_ORGYN
20264  V_ORGYN0
20265  V_ORGYN1
20266  _WARN_
20267  ORGYN
20268  );
20269  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4000 observations read from the data set EMWS1.TREE3_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 4000 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24547   data EM_temp_assessMeta;
24548   set EMWS1.Tree3_CMeta_TRAIN;
24549   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24550   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24551   data EM_temp_assessdata;
24552   set EMWS1.Tree3_VALIDATE(keep=
24553   F_ORGYN
24554   I_ORGYN
24555   P_ORGYN0
24556   P_ORGYN1
24557   Q_ORGYN0
24558   Q_ORGYN1
24559   R_ORGYN0
24560   R_ORGYN1
24561   U_ORGYN
24562   V_ORGYN0
24563   V_ORGYN1
24564   _WARN_
24565   ORGYN
24566   );
24567   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 3000 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 3000 observations read from the data set EMWS1.TREE3_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 3000 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28854   %let _cn = %sysfunc(getoption(CENTER));
28855   options nocenter;
28856   proc print data=EMWS1.Tree3_EMREPORTFIT noobs label;
28857   var STAT LABEL TRAIN
28858   VALIDATE
28859   TEST
28860   ;
28861   by TARGET TARGETLABEL;
28862   title9 ' ';
28863   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28864   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28865   title10;
28866   options &_cn;
 
28867   proc sort data=EMWS1.Tree3_EMCLASSIFICATION nothreads;
28868   by DATAROLE TARGET TARGETLABEL;
28869   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE3_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
28870   %let _cn = %sysfunc(getoption(CENTER));
28871   options nocenter;
28872   proc print data=EMWS1.Tree3_EMCLASSIFICATION noobs label;
28873   var from into pct_row pct_col count percent
28874   ;
28875   by DATAROLE TARGET TARGETLABEL;
28876   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28877   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28878   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28879   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28880   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28881   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28882   where _TYPE_='PREDICTION';
28883   title9 ' ';
28884   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28885   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
28886   title9;
28887   title10;
28888   options &_cn;
 
28889   %let _cn = %sysfunc(getoption(CENTER));
28890   options nocenter;
28891   data EMWS1.Tree3_EMEVENTREPORT;
28892   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
28893   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28893 ! FALSEEVENT
28894   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28895      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28896   FALSEEVENT=0;
28897   FALSENEVENT=0;
28898   TRUEEVENT=0;
28899   TRUENEVENT=0;
28900   set EMWS1.Tree3_EMEVENTREPORT;
28901   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE3_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.03 seconds
 
 
28902   proc print data=EMWS1.Tree3_EMEVENTREPORT noobs label;
28903   title9 ' ';
28904   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28905   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28906   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28907   title10;
28908   options &_cn;
 
28909   proc datasets library=EMWS1 nolist;
28910   modify Tree3_EMRANK;
28911   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28912   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28913   run;
 
NOTE: MODIFY was successful for EMWS1.TREE3_EMRANK.DATA.
28914   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           1.12 seconds
      cpu time            0.00 seconds
 
 
28915   %let _cn = %sysfunc(getoption(CENTER));
28916   options nocenter;
28917   proc print data=EMWS1.Tree3_EMRANK label noobs;
28918   var
28919   decile gain lift liftc resp respc N _meanP_;
28920   by
28921   notsorted DATAROLE
28922   notsorted TARGET
28923   notsorted TARGETLABEL
28924   ;
28925   title9 ' ';
28926   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28927   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE3_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28928   title10;
28929   options &_cn;
 
28930   proc datasets library=EMWS1 nolist;
28931   modify Tree3_EMSCOREDIST;
28932   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28933   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28934   run;
 
NOTE: MODIFY was successful for EMWS1.TREE3_EMSCOREDIST.DATA.
28935   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           1.02 seconds
      cpu time            0.01 seconds
 
 
