*------------------------------------------------------------*
User:                P2503016
Date:                03 December 2021
Time:                17:51:08
Site:                51200470
Platform:            X64_10PRO
Maintenance Release: 9.04.01M7P080520
EM Version:          15.2
*------------------------------------------------------------*
NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18948      data EMWS1.EM_TREEINT_STARTTIME;
18949      starttime=1954173068.466;
18950      run;

NOTE: The data set EMWS1.EM_TREEINT_STARTTIME has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

18951      %let _emdsep = \;
18952      %em_getactionstatus(emlib =EMWS1, nodeid=Tree4);

18953      %let em_filemodtime=;
18954      data _null_;
18955      format modate best.;
18956      set sashelp.Vextfl;
18957      where fileref eq "#LN00164";
18958      call symput('EM_FILEMODTIME', put(modate, best.));
18959      run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00164';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18960      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
18961      %let em_Train = N;
18962      %let em_Score = N;
18963      %let em_Report = N;
18964      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      


PERFORMANCE  DETAILS
19486      data EM_TARGETDECINFO;
19487      length TARGET $32 DECDATA DECMETA $43;
19488      TARGET="ORGYN";
19489      DECDATA="EMWS1.Tree4_ORGYN_DD";
19490      DECMETA="EMWS1.Tree4_ORGYN_DM";
19491      output;
19492      run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

19493      %let emexceptionString =;
19494      %let EMEXCEPTIONSTRING=;
19495      *------------------------------------------------------------*;
19496      * OPENINT: Tree4;
19497      *------------------------------------------------------------*;
19498      %let EM_ACTION = OPENINT;
19499      %let syscc = 0;
19500      %macro main;
19501      
19502        %if %upcase(&EM_ACTION) = CREATE %then %do;
19503          filename temp catalog 'sashelp.emmodl.tree_create.source';
19504          %include temp;
19505          filename temp;
19506      
19507          %em_tree_create;
19508        %end;
19509      
19510         %else
19511         %if %upcase(&EM_ACTION) = TRAIN %then %do;
19512      
19513             filename temp catalog 'sashelp.emmodl.tree_train.source';
19514             %include temp;
19515             filename temp;
19516             %em_tree_train;
19517         %end;
19518      
19519        %else
19520        %if %upcase(&EM_ACTION) = SCORE %then %do;
19521          filename temp catalog 'sashelp.emmodl.tree_score.source';
19522          %include temp;
19523          filename temp;
19524      
19525          %em_tree_score;
19526      
19527        %end;
19528      
19529        %else
19530        %if %upcase(&EM_ACTION) = REPORT %then %do;
19531      
19532             filename temp catalog 'sashelp.emmodl.tree_report.source';
19533             %include temp;
19534             filename temp;
19535      
19536             %em_tree_report;
19537         %end;
19538      
19539        %else
19540        %if %upcase(&EM_ACTION) = OPENINT %then %do;
19541      
19542             filename temp catalog 'sashelp.emmodl.tree_actions.source';
19543             %include temp;
19544             filename temp;
19545             %EM_TREE_OPENTREEVIEWER;
19546      
19547         %end;
19548      
19549        %else
19550        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
19551      
19552             filename temp catalog 'sashelp.emmodl.tree_actions.source';
19553             %include temp;
19554             filename temp;
19555             %EM_TREE_CLOSETREEVIEWER;
19556      
19557         %end;
19558      
19559      
19560         %doendm:
19561      %mend main;
19562      
19563      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_ACTIONS.SOURCE.
19565     +%macro EM_TREE_OPENTREEVIEWER;
19567     +  options validvarname = v7;
19569     +  /* retrieve table names */
19570     +  %EM_GETNAME(key=EMTREE, type=DATA);
19571     +  %EM_GETNAME(key=BROWSETREE, type=DATA);
19573     +  /* check if the path needs to be updated; if so, delete datasets and force user to update */
19574     +  %em_getActionStatus(emlib=&EM_LIB, nodeid=&EM_NODEID);
19576     +  /* load trainmacros */
19577     +  filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
19578     +  %include temp;
19579     +  filename temp;
19581     +  %em_checkmacro(name=EM_PROPERTY_IMPORTMODEL,value=N,global=Y);
19583     +    %if "&EM_IMPORT_DATA"="" %then %do;
19584     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
19585     +       %goto doendm;
19586     +   %end;
19587     +   %if ((%sysfunc(exist(&EM_IMPORT_DATA)) ne 1) AND (%sysfunc(exist(&EM_IMPORT_DATA, VIEW)) ne 1)) %then %do;
19588     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.PATHNEEDSTORUN;
19589     +       %goto doendm;
19590     +   %end;
19592     +   /* if node needs to run or tree data doesn't exist, create a root node for interactive training */
19593     +   %if ( (%sysfunc(exist(&EM_USER_EMTREE)) ne 1 ) OR (&EM_TRAIN eq Y) ) %then %do;
19595     +       /* determine if multiple targets will be processed */
19596     +       %let em_tree_multipleTargets=N;
19597     +       %let em_tree_numTarget=1;
19598     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19599     +         /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19600     +         %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19601     +            %let em_tree_multipleTargets=N;
19602     +         %end;
19603     +         %else %do;
19604     +            /* create macro array of targets  */
19605     +            data _null_;
19606     +              set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19607     +              call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
19608     +              if eof then
19609     +                call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19610     +           run;
19612     +           %if &em_tree_numTarget gt 1 %then %do;
19613     +            %let em_tree_multipleTargets=Y;
19614     +           %end;
19615     +         %end;
19616     +       %end;
19618     +       %em_tree_runTreeProcedure(indata=&EM_IMPORT_DATA, multipleTar=&em_tree_multipleTargets, intFlag=Y);
19620     +       /* Check return code and throw exception if error is detected */
19621     +       %if &SYSERR > 0 %then %do;
19622     +          %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
19623     +          %goto doendm;
19624     +       %end;
19626     +  %end;
19628     +  /* set default values for sampling macros if they don't exist; this would happen on diagrams imported from release prior to 12.3 */
19629     +  %if "&EM_PROPERTY_CREATESAMPLE" eq "" %then %let EM_PROPERTY_CREATESAMPLE=DEFAULT;
19630     +  %if "&EM_PROPERTY_SAMPLEMETHOD" eq "" %then %let EM_PROPERTY_SAMPLEMETHOD=RANDOM;
19631     +  %if "&EM_PROPERTY_SAMPLESIZE" eq "." %then %let EM_PROPERTY_SAMPLESIZE=10000;
19632     +  %if "&EM_PROPERTY_SAMPLESEED" eq "." %then %let EM_PROPERTY_SAMPLESEED=12345;
19634     +  /* determine if sample should be used within interactive training */
19635     +  %EM_GETNAME(key=TRAINSAMPLE, type=DATA);
19636     +  %if "&EM_PROPERTY_CREATESAMPLE" ne "NONE" %then %do;
19638     +     /* determine number of obs in training table */
19639     +     %let trainobs = ;
19640     +     proc sql noprint;
19641     +       select count(*) into: trainobs from &EM_IMPORT_DATA;
19642     +     quit;
19644     +     /* retrieve appropriate sample size */
19645     +     %let maxobs = ;
19646     +     %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
19647     +       %exploreObs(data=&EM_IMPORT_DATA);
19648     +       %let maxobs = &_EXPLOREOBS_MAX;
19649     +     %end;
19650     +     %else %do;
19651     +       %let maxobs = &EM_PROPERTY_SAMPLESIZE;
19652     +     %end;
19654     +     /* create sample based on maxobs */
19655     +     %if &trainobs gt &maxobs %then %do;
19656     +        %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
19657     +          %exploreSample(data=&EM_IMPORT_DATA, seed=12345, output=&EM_USER_TRAINSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
19658     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19659     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
19660     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=12345, output=&EM_USER_VALIDSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
19661     +          %end;
19662     +        %end;
19663     +        %else %if "&EM_PROPERTY_CREATESAMPLE" eq "USER" %then %do;
19664     +          %if "&EM_PROPERTY_SAMPLEMETHOD" eq "STRATIFY" %then %do;
19665     +            %if &EM_NUM_INTERVAL_TARGET %then %do;
19666     +              %let em_tree_tempmethod = RANDOM;
19667     +            %end;
19668     +            %else %do;
19669     +              %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
19670     +            %end;
19671     +          %end;
19672     +          %else %do;
19673     +            %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
19674     +          %end;
19676     +          %exploreSample(data=&EM_IMPORT_DATA, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_TRAINSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
19677     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19678     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
19679     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_VALIDSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
19680     +          %end;
19681     +        %end;
19683     +        proc arbor data=&EM_USER_TRAINSAMPLE inmodel=&EM_USER_EMTREE refreshtrain;
19684     +          interact;
19685     +          subtree largest;
19686     +           /********** do i need CV options here? *********/
19687     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19688     +            assess validata=&&EM_USER_VALIDSAMPLE;
19689     +          %end;
19690     +          save model=&EM_USER_EMTREE;
19691     +        run;
19692     +        quit;
19693     +     %end;
19694     +  %end;
19696     +  /* create browsetree table as a copy of EMTREE to process within interactive training */
19697     +  %EM_GETNAME(key=BROWSETREE,  type=DATA);
19698     +  data &EM_USER_BROWSETREE;
19699     +    set &EM_USER_EMTREE;
19700     +  run;
19702     +  /* reset validvarname options
19703     +  %let vvarname = %sysfunc(optgetc('VALIDVARNAME'));
19704     +  options validvarname=&vvarname;  */
19705     +  %doendm:
19707     +%mend EM_TREE_OPENTREEVIEWER;
19711     +%macro EM_TREE_CLOSETREEVIEWER;
19713     +    /* clear syscc prior to running close Method */
19714     +    %let SYSCC = 0;
19715     +    options validvarname=V7;
19717     +    /* retrieve table names */
19718     +    %EM_GETNAME(key=BROWSETREE,  type=DATA);
19719     +    %EM_GETNAME(key=EMTREE,  type=DATA);
19720     +    %EM_GETNAME(key=OUTSEQ,  type=DATA);
19721     +    %EM_GETNAME(key=OUTIMPORT,  type=DATA);
19722     +    %EM_GETNAME(key=OUTNODES,  type=DATA);
19723     +    %EM_GETNAME(key=OUTSUMMARY,  type=DATA);
19724     +    %EM_GETNAME(key=OUTSTATS,  type=DATA);
19725     +    %EM_GETNAME(key=OUTTOPOLOGY,  type=DATA);
19726     +    %EM_GETNAME(key=OUTPATH,  type=DATA);
19727     +    %EM_GETNAME(key=OUTRULES,  type=DATA);
19729     +    %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
19730     +    %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
19732     +    /* load trainmacros */
19733     +    filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
19734     +    %include temp;
19735     +    filename temp;
19737     +    /* send output to node output window ; this will replace */
19738     +    /* old print with the new  print                         */
19739     +    options validvarname = v7;
19741     +    /* determine if multiple targets will be processed */
19742     +    %let em_tree_multipleTargets=N;
19743     +    %let em_tree_numTarget=1;
19744     +    %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19745     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19746     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19747     +         %let em_tree_multipleTargets=N;
19748     +      %end;
19749     +      %else %do;
19750     +         /* create macro array of targets  */
19751     +         data _null_;
19752     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19753     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
19754     +           if eof then
19755     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19756     +        run;
19758     +        %if &em_tree_numTarget gt 1 %then %do;
19759     +           %let em_tree_multipleTargets=Y;
19760     +        %end;
19761     +      %end;
19762     +    %end;
19765     + /* turn on pmml if requested */
19766     + %let nnpmml=0;
19767     + %if %symexist(EM_PMML) %then %do;
19768     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
19769     +       %let nnpmml=1;
19771     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
19772     +   %end;
19773     + %end;
19775     + %if &nnpmml %then %do;
19777     +    /* create dmdb needed for pmml generation */
19778     +    %let tree_maxlevel = 512;
19779     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
19780     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
19781     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
19782     +      %end;
19783     +    %end;
19784     +    %if &tree_maxlevel gt 0 %then %do;
19785     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
19786     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
19787     +    %end;
19789     +    %let targetOrderString =;
19790     +    %let targetString = ;
19791     +    data _null_;
19792     +       length orderString nameString $10000;
19793     +       retain orderString nameString;
19794     +       set &em_data_variableset end=eof;
19795     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
19796     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
19797     +       %end;
19798     +       %else %do;
19799     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
19800     +       %end;          select(order);
19801     +         when('')        order ='DESC';
19802     +         when('FMTASC')  order='ASCFMT';
19803     +         when('FMTDESC') order='DESFMT';
19804     +         otherwise;
19805     +       end;
19806     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
19807     +       nameString = trim(nameString)!!' '!!trim(NAME);
19809     +       if eof then do;
19810     +          call symput('targetOrderString', trim(orderString));
19811     +          call symput('targetString', trim(nameString));
19812     +       end;
19813     +    run;
19815     +    %let arborkluge= "work._treeDMDB";
19817     +    proc dmdb batch data=&EM_IMPORT_DATA
19818     +    %if &nnpmml %then %do;
19819     +        PMML
19820     +    %end;
19821     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
19823     +     %if "%EM_ID" ne "" %then %do;
19824     +       id %EM_ID;
19825     +     %end;
19826     +     %if &EM_NUM_CLASS gt 0 %then %do;
19827     +       class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
19828     +            %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
19829     +            &targetOrderString;
19830     +     %end;
19831     +     %if &EM_NUM_INTERVAL gt 0 %then %do;
19832     +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
19833     +     %end;
19834     +     target &targetString %EM_INTERVAL_TARGET;
19835     +     %if "%EM_FREQ" ne "" %then %do;
19836     +       freq %EM_FREQ;
19837     +     %end;
19838     +    run;
19839     +    quit;
19841     +    proc datasets lib=work nolist;
19842     +       delete classout varout;
19843     +    run;
19844     +    quit;
19846     + %end;
19849     +    /* run arbor to generate new results and scoring code */
19850     +    proc arbor data=&EM_IMPORT_DATA inmodel=&EM_USER_BROWSETREE refreshtrain;
19851     +       Performance &EM_PROPERTY_PERFORMANCE
19852     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19853     +         nodesize=&EM_PROPERTY_NODESAMPLE
19854     +       %end;
19855     +       ;
19856     +      interact;
19857     +      *subtree largest;
19860     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
19861     +         Assess
19862     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19863     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
19864     +              %put &em_codebar;
19865     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
19866     +              %put &errormsg;
19867     +              %put &em_codebar;
19868     +            %end;
19869     +            %else %do;
19870     +               Validata=&EM_IMPORT_VALIDATE;
19871     +            %end;
19872     +         %end;
19873     +         %else %do;
19874     +           NoValidata
19875     +         %end;
19876     +       %end;
19877     +      ;
19878     +      makemacro nleaves=nleaves;
19879     +      save
19880     +      %if "&EM_USER_EMTREE" ne "" %then %do;
19881     +         MODEL=&EM_USER_EMTREE
19882     +      %end;
19883     +      %if "&EM_USER_OUTSEQ" ne "" %then %do;
19884     +        SEQUENCE=&EM_USER_OUTSEQ
19885     +      %end;
19886     +      %if "&EM_USER_OUTIMPORT" ne "" %then %do;
19887     +        IMPORTANCE=&EM_USER_OUTIMPORT
19888     +      %end;
19889     +      %if "&EM_USER_OUTNODES" ne "" %then %do;
19890     +         NODESTAT=&EM_USER_OUTNODES
19891     +      %end;
19892     +      %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
19893     +         SUMMARY=&EM_USER_OUTSUMMARY
19894     +      %end;
19895     +      %if "&EM_USER_OUTSTATS" ne "" %then %do;
19896     +         STATSBYNODE=&EM_USER_OUTSTATS
19897     +      %end;
19898     +      %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
19899     +         TOPOLOGY=&EM_USER_OUTTOPOLOGY
19900     +      %end;
19901     +      %if "&EM_USER_OUTPATH" ne "" %then %do;
19902     +         Pathlistnonmissing=&EM_USER_OUTPATH
19903     +      %end;
19904     +      %if "&EM_USER_OUTRULES" ne "" %then %do;
19905     +         RULES = &EM_USER_OUTRULES
19906     +      %end;
19907     +      ;
19909     +      %let codetext=;
19910     +      %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
19911     +        %let codetext=&codetext DUMMY;
19912     +      %end;
19913     +      %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
19914     +        %let codetext=&codetext NOLEAFID;
19915     +      %end;
19917     +      %let norescodetxt=;
19918     +      %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
19919     +        %let norescodetxt=&codetext NOPRED;
19920     +      %end;
19922     +      %let lookupString = ;
19923     +      %if ^%symexist(EM_OPTION) %then
19924     +         %let EM_OPTION=;
19926     +      %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
19927     +         %let lookupString = LOOKUP=SELECT;
19928     +      %end;
19930     +      code file="&EM_USER_TREEFLOW" res &codetext &lookupString;
19931     +      code file="&EM_USER_TREEPUBLISH" nores &norescodetxt &lookupString;
19933     +      %if &nnpmml %then %do;
19934     +        code pmml;
19935     +      %end;
19937     +      score data=&EM_IMPORT_DATA out=_NULL_ outfit=work.fit_train role=TRAIN;
19938     +      %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19939     +        score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
19940     +      %end;
19941     +      %if (("&EM_IMPORT_TEST" ne "") AND (%sysfunc(exist(&EM_IMPORT_TEST)) or %sysfunc(exist(&EM_IMPORT_TEST,VIEW)) )) %then %do;
19942     +        score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
19943     +      %end;
19944     +    run;
19946     +    quit;
19948     +    %if &nnpmml %then %do;
19949     +       ods pmml close;
19950     +    %end;
19952     +   /* Check return code and throw exception if error is detected */
19953     +   %if &SYSERR > 0 %then %do;
19954     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
19955     +     %goto doendm;
19956     +   %end;
19958     +   /* create outfit dataset if multiple score statements have been executed */
19959     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
19961     +   /* print variable importance listing */
19962     +   %let em_tree_surrexists=.;
19963     +   data _null_;
19964     +    set &EM_USER_OUTIMPORT (obs=2) end=eof;
19965     +    if eof then do ;
19966     +      call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19967     +      call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19968     +    end;
19969     +   run;
19971     +   /* create English Rules */
19972     +   %EM_GETNAME(key=ENGLISHRULES, type=FILE, extension=txt);
19973     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
19974     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
19975     +       %em_tree_makeEnglishRules;
19977     +      /* English Rules */
19978     +      %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
19980     +     %end;
19981     +   filename x;
19983     +   %doendm:
19985     +   %EM_REPORT(key=EMINTLOG, viewtype=LOG, block=Interactive, description=Log, autodisplay=N);
19986     +   %EM_REPORT(key=EMINTOUT, viewtype=OUTPUT, block=Interactive, description=Output, autodisplay=N);
19988     +%mend EM_TREE_CLOSETREEVIEWER;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

19990      %let em_filemodtime=;
19991      data _null_;
19992      format modate best.;
19993      set sashelp.Vextfl;
19994      where fileref eq "#LN00174";
19995      call symput('EM_FILEMODTIME', put(modate, best.));
19996      run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00174';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

19997      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
19998      %let em_Train = N;
19999      %let em_Score = N;
20000      %let em_Report = N;
20001      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
20003     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
20004     +  %global &nLevel;
20005     +  proc dmdb batch data=&indata
20006     +    classout=_tmp_dmdbout;
20007     +    class &target;
20008     +  run;
20009     +  data _tmp_dmdbout;
20010     +    set _tmp_dmdbout;
20011     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
20012     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
20013     +  run;
20014     +  data _null_;
20015     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
20016     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
20017     +    %let dsid = %sysfunc(close(&dsid));
20018     +     call symput("&nLevel", put(&_obs, Best12.));
20019     +  run;
20021     +  proc datasets lib=work nolist;
20022     +     delete _tmp_dmdbout;
20023     +  run;
20024     +  quit;
20025     +%Mend EM_CheckBinaryTargetLevel;
20028     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
20030     +  /* determine the number of obs in training data */
20031     +  proc sql;
20032     +    reset noprint;
20033     +    select count(*) into :em_nobs from &indata;
20034     +  quit;
20036     +  /* determine the number of input variables */
20037     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
20038     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
20040     +  /* retrieve targetEvent from decmeta */
20041     +  %let targetEvent=;
20042     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20043     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
20044     +      data _null_;
20045     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
20046     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
20047     +      run;
20048     +    %end;
20049     +  %end;
20051     +  /* create targetTable if multipleTar eq Y */
20052     +  data temptarget;
20053     +    set &EM_DATA_VARIABLESET;
20054     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
20055     +  run;
20057     + /* data sets */
20058     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
20059     + %EM_GETNAME(key=EMTREE,        type=DATA);
20060     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
20061     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
20062     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
20063     + %EM_GETNAME(key=OUTNODES,      type=DATA);
20064     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
20065     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
20066     + %EM_GETNAME(key=OUTPATH,       type=DATA);
20067     + %EM_GETNAME(key=OUTRULES,      type=DATA);
20069     + /* files */
20070     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
20071     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
20073     + /* turn on pmml if requested */
20074     + %let nnpmml=0;
20075     + %if %symexist(EM_PMML) %then %do;
20076     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
20077     +       %let nnpmml=1;
20079     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
20080     +   %end;
20081     +%end;
20083     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
20085     +%if &nnpmml or &numClassTarget %then %do;
20087     +    /* create dmdb needed for pmml generation */
20088     +    %let tree_maxlevel = 512;
20089     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
20090     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
20091     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
20092     +      %end;
20093     +    %end;
20094     +    %if &tree_maxlevel gt 0 %then %do;
20095     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
20096     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
20097     +    %end;
20099     +    %let targetOrderString =;
20100     +    %let targetString = ;
20101     +    data _null_;
20102     +       length orderString nameString $10000;
20103     +       retain orderString nameString;
20104     +       set &em_data_variableset end=eof;
20105     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
20106     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
20107     +       %end;
20108     +       %else %do;
20109     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
20110     +       %end;          select(order);
20111     +         when('')        order ='DESC';
20112     +         when('FMTASC')  order='ASCFMT';
20113     +         when('FMTDESC') order='DESFMT';
20114     +         otherwise;
20115     +       end;
20116     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
20117     +       nameString = trim(nameString)!!' '!!trim(NAME);
20119     +       if eof then do;
20120     +          call symput('targetOrderString', trim(orderString));
20121     +          call symput('targetString', trim(nameString));
20122     +       end;
20123     +    run;
20125     +    %let arborkluge= "work._treeDMDB";
20127     +    proc dmdb batch data=&indata
20128     +    %if &nnpmml %then %do;
20129     +        PMML
20130     +    %end;
20131     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
20133     +      %if &nnpmml %then %do;
20134     +           %if "%EM_ID" ne "" %then %do;
20135     +             id %EM_ID;
20136     +           %end;
20137     +           %if &EM_NUM_CLASS gt 0 %then %do;
20138     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20139     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20140     +                  &targetOrderString;
20141     +           %end;
20142     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
20143     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
20144     +           %end;
20145     +           target &targetString %EM_INTERVAL_TARGET;
20146     +           %if "%EM_FREQ" ne "" %then %do;
20147     +             freq %EM_FREQ;
20148     +           %end;
20149     +      %end;
20150     +      %else %do;
20151     +         class  &targetOrderString;
20152     +         target &targetString %EM_INTERVAL_TARGET;
20153     +      %end;
20154     +    run;
20155     +    quit;
20157     +    proc datasets lib=work nolist;
20158     +       delete classout varout;
20159     +    run;
20160     +    quit;
20162     + %end;
20165     + /* run Arbor procedure */
20166     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
20167     +  proc arbor data=&INDATA
20169     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
20170     +    Leafsize = &EM_PROPERTY_LEAFSIZE
20171     +  %end;
20173     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
20174     +    Splitsize = &EM_PROPERTY_SPLITSIZE
20175     +  %end;
20177     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
20178     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
20179     +  %end;
20181     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
20182     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
20183     +  %end;
20185     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
20186     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
20187     +  %end;
20189     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
20190     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
20191     +  %end;
20192     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
20193     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
20194     +  %end;
20195     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20196     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
20197     +  %end;
20199     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
20200     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
20201     +      alpha = &EM_PROPERTY_SIGLEVEL
20202     +    %end;
20203     +  %end;
20205     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
20206     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
20207     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
20208     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
20209     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
20211     +        padjust =
20212     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
20213     +          &chaid
20214     +        %end;
20215     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
20216     +          DEPTH
20217     +        %end;
20218     +      %end;
20219     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
20220     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
20221     +         pvars = &num_inputs
20222     +      %end;
20223     +    %end;
20224     +  %end;
20225     +  %else %do;
20226     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
20227     +         padjust = NONE
20228     +      %end;
20229     +  %end;
20231     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
20232     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
20233     +    Maxrules = &num_nrules
20234     +  %end;
20236     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
20237     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
20238     +    Maxsurrs = &num_nsurrs
20239     +  %end;
20241     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
20242     +     Missing=&EM_PROPERTY_MISSINGVALUE
20243     +  %end;
20245     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
20246     +     USEVARONCE
20247     +  %end;
20249     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
20250     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
20251     +  %end;
20254     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
20255     +    event = "&targetEvent"
20256     +  %end;
20258     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
20259     +     DECSEARCH
20260     +  %end;
20262     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
20263     +     PRIORSSEARCH
20264     +  %end;
20266     +  %if &arbor_1 ne %then %do;
20267     +    &arbor_1
20268     +  %end;
20270     +  %if &em_arbor ne %then %do;
20271     +     &em_arbor
20272     +  %end;
20273     +  ;
20274     + %end;
20275     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
20276     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
20277     +       Performance &EM_PROPERTY_PERFORMANCE
20278     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
20279     +         nodesize=&EM_PROPERTY_NODESAMPLE
20280     +       %end;
20281     +       ;
20282     +       interact;
20283     + %end;
20284     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
20285     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
20286     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
20287     +    %put &em_codebar;
20288     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
20289     +    %put &errormsg;
20290     +    %put &em_codebar;
20291     +    %goto doendm;
20292     +   %end;
20293     +   %else %do;
20294     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
20295     +       Performance &EM_PROPERTY_PERFORMANCE
20296     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
20297     +         nodesize=&EM_PROPERTY_NODESAMPLE
20298     +       %end;
20299     +       ;
20300     +       interact;
20301     +   %end;
20302     + %end;
20304     + %else %do;
20305     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
20306     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
20307     +    %put &em_codebar;
20308     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
20309     +    %put &errormsg;
20310     +    %put &em_codebar;
20311     +    %goto doendm;
20312     +   %end;
20313     +   %else %do;
20314     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
20315     +       Performance &EM_PROPERTY_PERFORMANCE
20316     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
20317     +         nodesize=&EM_PROPERTY_NODESAMPLE
20318     +       %end;
20319     +       ;
20320     +        interact;
20321     +   %end;
20322     + %end;
20324     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
20325     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
20326     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
20327     +    %end;
20329     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
20330     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
20331     +    %end;
20333     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
20334     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
20335     +    %end;
20337     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
20338     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
20339     +    %end;
20341     +    %if "%EM_FREQ" ne "" %then %do;
20342     +       freq %EM_FREQ;
20343     +    %end;
20345     +    %if "&multipleTar" eq "Y" %then %do;
20346     +       /* cycle through all target vars in variableset */
20347     +       %let tdsid = %sysfunc(open(temptarget));
20348     +       %if &tdsid %then %do;
20349     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
20350     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
20351     +          %do %while(^ %sysfunc(fetch(&tdsid)));
20352     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
20353     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
20354     +             target &var / level = &lvl
20355     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
20356     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
20357     +             %end;
20358     +             %else %if "&lvl" eq "INTERVAL" %then %do;
20359     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
20360     +             %end;
20361     +             %else %if "&lvl" eq "ORDINAL" %then %do;
20362     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
20363     +             %end;
20364     +          %end;
20365     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
20366     +       %end;
20367     +       useTarget variable = %EM_TARGET;
20368     +    %end;
20369     +    %else %do;
20370     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
20371     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
20372     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
20373     +      %end;
20374     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20375     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
20376     +      %end;
20377     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
20378     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
20379     +      %end;
20380     +    %end;
20382     +    %if "&multipleTar" eq "N" %then %do;
20383     +      &EM_DEC_STATEMENT;
20384     +    %end;
20386     +    Performance &EM_PROPERTY_PERFORMANCE
20387     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
20388     +      nodesize=&EM_PROPERTY_NODESAMPLE
20389     +    %end;
20390     +    ;
20392     +    %if "&intFlag" eq "Y" %then %do;
20393     +       INTERACT Largest;
20394     +       Train maxnewdepth=0;
20395     +    %end;
20397     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
20398     +         Assess
20399     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
20400     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
20401     +              %put &em_codebar;
20402     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
20403     +              %put &errormsg;
20404     +              %put &em_codebar;
20405     +            %end;
20406     +            %else %do;
20407     +               Validata=&EM_IMPORT_VALIDATE
20408     +            %end;
20409     +         %end;
20410     +         %else %do;
20411     +           NoValidata
20412     +         %end;
20413     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
20414     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
20415     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
20416     +               %if &dsid %then %do;
20417     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
20418     +                 %do %while(^ %sysfunc(fetch(&dsid)));
20419     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
20420     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
20421     +                   %else %do;
20422     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
20423     +                      %else %let measure= MISC;
20424     +                   %end;
20425     +                 %end;
20426     +               %end;
20427     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
20428     +            %end;
20429     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
20430     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
20431     +                 %let measure=ASE;
20432     +              %end;
20433     +              %else %do;
20434     +                 %let measure=MISC;
20435     +              %end;
20436     +            %end;
20437     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
20438     +              %let measure=ASE;
20439     +            %end;
20440     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
20441     +               %let measure = LIFT;
20442     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
20443     +               %if &dsid %then %do;
20444     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
20445     +                 %do %while(^ %sysfunc(fetch(&dsid)));
20446     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
20447     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
20448     +                 %end;
20449     +               %end;
20450     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
20451     +            %end;
20452     +            measure=&measure
20453     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
20454     +               event = "&targetEvent"
20455     +            %end;
20456     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
20457     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
20458     +            %end;
20459     +         %end;
20460     +         %if "&multipleTar" eq "N" %then %do;
20461     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
20462     +               CV
20463     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
20464     +                 CVNITer = &EM_PROPERTY_CVNITER
20465     +               %end;
20466     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
20467     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
20468     +               %end;
20469     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
20470     +                 CVSeed = &EM_PROPERTY_CVSEED
20471     +               %end;
20472     +            %end;
20473     +         %end;
20474     +       %end;
20475     +      ;
20477     +      %if "&intFlag" ne "Y" %then %do;
20478     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
20479     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
20480     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
20481     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
20483     +          SUBTREE &subtree
20484     +          %if "&subtree" eq "NLEAVES" %then %do;
20485     +            =&EM_PROPERTY_NSUBTREE
20486     +          %end;
20487     +          ;
20488     +        %end;
20490     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
20491     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
20492     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
20493     +          %end;
20494     +       %end;
20495     +      %end;
20496     + %end;
20499     + MakeMacro nleaves = nleaves;
20500     + save
20501     + %if "&EM_USER_EMTREE" ne "" %then %do;
20502     +   MODEL=&EM_USER_EMTREE
20503     + %end;
20504     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
20505     +   SEQUENCE=&EM_USER_OUTSEQ
20506     + %end;
20507     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
20508     +   IMPORTANCE=&EM_USER_OUTIMPORT
20509     + %end;
20510     + %if "&EM_USER_OUTNODES" ne "" %then %do;
20511     +   NODESTAT=&EM_USER_OUTNODES
20512     + %end;
20513     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
20514     +   SUMMARY=&EM_USER_OUTSUMMARY
20515     + %end;
20516     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
20517     +   STATSBYNODE=&EM_USER_OUTSTATS
20518     + %end;
20519     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
20520     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
20521     + %end;
20522     + %if "&EM_USER_OUTPATH" ne "" %then %do;
20523     +   Pathlistnonmissing=&EM_USER_OUTPATH
20524     + %end;
20525     + %if "&EM_USER_OUTRULES" ne "" %then %do;
20526     +   RULES = &EM_USER_OUTRULES
20527     + %end;
20528     + ;
20530     + %if "&intFlag" ne "Y" %then %do;
20532     +   %let lookupString = ;
20533     +   %if ^%symexist(EM_OPTION) %then
20534     +      %let EM_OPTION=;
20536     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
20537     +      %let lookupString = LOOKUP=SELECT;
20538     +   %end;
20540     +   %let codetext=;
20541     +   %let norescodetxt=;
20543     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
20544     +     %let codetext=&codetext DUMMY;
20545     +     %let norescodetxt=&norescodetxt DUMMY;
20546     +   %end;
20547     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
20548     +     %let codetext=&codetext NOLEAFID;
20549     +     %let norescodetxt=&norescodetxt NOLEAFID;
20550     +   %end;
20551     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
20552     +     %let norescodetxt=&norescodetxt NOPRED;
20553     +   %end;
20555     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
20556     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
20558     +   %if &nnpmml %then %do;
20559     +     code pmml;
20560     +   %end;
20562     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
20563     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20564     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
20565     +   %end;
20566     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
20567     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
20568     +   %end;
20569     + %end;
20571     + run;
20572     + quit;
20574     + /*%em_checkerror(); */
20575     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
20576     +   /* Delete DMDB catalog */
20577     +   proc datasets lib=work nolist;
20578     +       delete _treeDMDB / mt=cat;
20579     +  run;
20580     +  %end;
20582     + %if &nnpmml %then %do;
20583     +    ods pmml close;
20584     + %end;
20586     +  %doendm:
20588     +%mend em_tree_runTreeProcedure;
20590     +%macro em_tree_createFitStats( multipleTar= );
20593     +  /* create targetTable is multipleTar eq Y */
20594     +  data temptarget;
20595     +    set &EM_DATA_VARIABLESET;
20596     +    where ROLE="TARGET";
20597     +  run;
20599     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
20600     +   data &EM_USER_EMOUTFIT;
20601     +     length target $32;
20602     +     merge work.fit_train
20603     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20604     +       work.fit_valid
20605     +     %end;
20606     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
20607     +       work.fit_test
20608     +     %end;
20609     +     ;
20610     +     %if "&multipleTar" eq "N" %then %do;
20611     +       target="%EM_TARGET";
20612     +     %end;
20613     +     %else %do;
20614     +       target = _TARGET_;
20615     +     %end;
20616     +     drop _NW_ _SUMW_
20617     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20618     +        _VSUMW_
20619     +     %end;
20620     +     ;
20621     +   run;
20623     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20624     +     proc datasets library=work nolist;
20625     +       delete fit_valid;
20626     +     run;
20627     +   %end;
20628     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
20629     +     proc datasets library=work nolist;
20630     +       delete fit_test;
20631     +     run;
20632     +   %end;
20634     +%mend em_tree_createFitStats;
20637     +%macro em_tree_makeEnglishRules;
20639     +  %EM_GETNAME(key=OUTNODES, type=DATA);
20640     +  %EM_GETNAME(key=OUTPATH, type=DATA);
20642     +  /* verify that necessary tables exist and if not, skip processing */
20643     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
20644     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
20645     +    %goto doendm;
20646     +  %end;
20647     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
20648     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
20649     +    %goto doendm;
20650     +  %end;
20652     +  /* determine length of variable in outpath dataset */
20653     +  %let vlength= ;
20654     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
20655     +  %if &dsid ne %then %do;
20656     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
20657     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
20658     +  %end;
20659     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
20661     +  data tempoutpath;
20662     +    length varname $&vlength;
20663     +    retain varname;
20664     +    set &EM_USER_OUTPATH;
20666     +    if ^missing(variable) then varname=variable;
20667     +    else if ^missing(var_name) then varname=var_name;
20668     +    output;
20669     +  run;
20671     +  /* create an array of generated predicted variable names */
20672     +  %let tree_pred_vars = ;
20673     +  %let tree_pred_label = ;
20674     +  %let numpred= 0;
20675     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
20677     +    data _null_;
20678     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
20679     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
20680     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
20681     +     if eof then
20682     +       call symput('numpred', strip(put(_N_, BEST.)));
20683     +    run;
20684     +  %end;
20686     +  /* determine if NPRIORS exists in outnodes  */
20687     +  %local nprior_flag;
20688     +  data _null_;
20689     +    set &EM_USER_OUTNODES(obs=2) end=eof;
20690     +    if eof then do;
20691     +      call symput('nprior_flag', strip(put(npriors, best.)));
20692     +    end;
20693     +  run;
20695     +  proc sort data=tempoutpath; by node; run;
20696     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
20698     +  data tempoutpath;
20699     +    merge tempoutpath(in=_a) outnodes(keep= node
20700     +    %if "&nprior_flag" ne "." %then %do;
20701     +      NPRIORS
20702     +    %end;
20703     +    %else %do;
20704     +      N
20705     +    %end;
20706     +    %if &numpred gt 0 %then %do;
20707     +      %do i=1 %to &numpred;
20708     +        &&tree_pred_vars&i
20709     +      %end;
20710     +    %end;
20711     +    );
20712     +    by node;
20713     +    if _a;
20714     +  run;
20716     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
20718     +  data _null_;
20719     +    file x;
20720     +    set tempoutpath;
20721     +    by node descending varname;
20722     +    retain origvar oldnode string;
20723     +    length origvar $32 oldnode 8 string $5000;
20725     +    if _N_ = 1 then do;
20726     +      origvar = varname;
20727     +      oldnode = node;
20728     +    end;
20730     +    if first.node then do;
20731     +       put "&EM_CODEBAR";
20732     +       put " Node = " node;
20733     +       put "&EM_CODEBAR";
20734     +    end;
20736     +      if first.varname then do;
20737     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
20738     +            if MISSING(CHARACTER_VALUE) then do;
20739     +             if NUMERIC_VALUE ne .  then do;
20740     +              if ^first.node then do;
20741     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20742     +              end;
20743     +              else do;
20744     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20745     +              end;
20746     +             end;
20747     +            end;
20748     +            else do;
20749     +              if ^first.node then do;
20750     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20751     +              end;
20752     +              else do;
20753     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20754     +              end;
20755     +             end;
20756     +         end;
20757     +         else if RELATION in ("=") then do;
20758     +            if ^first.node then do;
20759     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
20760     +            end;
20761     +            else do;
20762     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
20763     +            end;
20764     +         end;
20765     +         else if RELATION in ("ISMISSING") then do;
20766     +            if ^first.node then do;
20767     +              string = " AND "|| strip(varname) || " equals Missing";
20768     +            end;
20769     +            else do;
20770     +              string = "if "|| strip(varname) ||" equals Missing";
20771     +            end;
20772     +         end;
20773     +         else if RELATION in ("ISNOTMISSING") then do;
20774     +            if ^first.node then do;
20775     +              string = " AND "|| strip(varname) || " equals All Values";
20776     +            end;
20777     +            else do;
20778     +              string = "if "|| strip(varname) ||" equals All Values";
20779     +            end;
20780     +         end;
20781     +         if ^missing(varname) then origvar = varname;
20782     +         oldnode=node;
20784     +      end;
20785     +      else do;
20786     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
20787     +          if MISSING(CHARACTER_VALUE) then do;
20788     +           if  NUMERIC_VALUE ne .  then do;
20789     +            if ^MISSING(string) then
20790     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20791     +            else
20792     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20793     +           end;
20794     +          end;
20795     +          else do;
20796     +            if ^MISSING(string) then
20797     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20798     +            else
20799     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20800     +          end;
20802     +         end;
20803     +         else if RELATION in ("=") then do;
20804     +           string = strip(string)||", "||strip(character_value);
20805     +         end;
20806     +         else if RELATION in ("ISMISSING") then do;
20808     +         end;
20809     +         if ^missing(varname) then origvar = varname;
20810     +         oldnode=node;
20811     +      end;
20812     +      if last.varname then do;
20813     +         if RELATION in ("ISMISSING") then do;
20814     +           if ^first.varname then do;
20815     +             string = strip(string) || " or MISSING";
20816     +           end;
20817     +         end;
20818     +         put string;
20819     +         if ^missing(varname) then origvar = varname;
20820     +         oldnode=node;
20821     +      end;
20823     +      if last.node then do;
20824     +         put "then ";
20825     +         put " Tree Node Identifier   = " node;
20827     +         %if "&nprior_flag" ne "." %then %do;
20828     +           put " Number of Observations = " NPRIORS;
20829     +         %end;
20830     +         %else %do;
20831     +           put " Number of Observations = " N;
20832     +         %end;
20834     +         %if &numpred gt 0 %then %do;
20835     +           %do i=1 %to &numpred;
20836     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
20837     +           %end;
20838     +         %end;
20840     +         put " ";
20841     +         if ^missing(varname) then origvar = varname;
20842     +         oldnode=node;
20843     +      end;
20845     +  run;
20847     +  proc datasets lib=work nolist;
20848     +    delete tempoutpath outnodes;
20849     +  run;
20851     +  %doendm:
20852     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: EXPLOREOBS EMWS1.Part_TRAIN : vars= 18 : recl= 136 : max=20000 : def= 2000

NOTE: There were 585 observations read from the data set EMWS1.TREE4_EMTREE.
NOTE: The data set EMWS1.TREE4_BROWSETREE has 585 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

20854      
20855      *------------------------------------------------------------*;
20856      * End OPENINT: Tree4;
20857      *------------------------------------------------------------*;

20858      proc printto;
20859      run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

33157      filename newout "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\EMINTOUT.out" encoding="UTF-8" NOBOM;
33158      data _null_;
33159      call symput('NLDATE', strip(put(date(), NLDATE.)));
33160      call symput('NLTIME', strip(put(datetime(), NLTIME.)));
33161      run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

33162      data _null_;
33163      nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "&nldate" );
33164      nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "&nltime" );
33165      file newout;
33166      put "*------------------------------------------------------------*";
33167      put "%sysfunc(sasmsg(sashelp.dmine, log_user_note,      NOQUOTE, %nrbquote(&sysuserid)))";
33168      put nldate;
33169      put nltime;
33170      put "*------------------------------------------------------------*";
33171      put ' ';
33172      run;

NOTE: The file NEWOUT is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\EMINTOUT.out,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=03 December 2021 17:54:55,
      Create Time=30 November 2021 16:14:51

NOTE: 6 records were written to the file NEWOUT.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

33173      proc printto print=newout;
33174      run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

PERFORMANCE  DETAILS
33696      data EM_TARGETDECINFO;
33697      length TARGET $32 DECDATA DECMETA $43;
33698      TARGET="ORGYN";
33699      DECDATA="EMWS1.Tree4_ORGYN_DD";
33700      DECMETA="EMWS1.Tree4_ORGYN_DM";
33701      output;
33702      run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

33703      %let emexceptionString =;
33704      %let EMEXCEPTIONSTRING=;
33705      *------------------------------------------------------------*;
33706      * CLOSEINT: Tree4;
33707      *------------------------------------------------------------*;
33708      %let EM_ACTION = CLOSEINT;
33709      %let syscc = 0;
33710      %macro main;
33711      
33712        %if %upcase(&EM_ACTION) = CREATE %then %do;
33713          filename temp catalog 'sashelp.emmodl.tree_create.source';
33714          %include temp;
33715          filename temp;
33716      
33717          %em_tree_create;
33718        %end;
33719      
33720         %else
33721         %if %upcase(&EM_ACTION) = TRAIN %then %do;
33722      
33723             filename temp catalog 'sashelp.emmodl.tree_train.source';
33724             %include temp;
33725             filename temp;
33726             %em_tree_train;
33727         %end;
33728      
33729        %else
33730        %if %upcase(&EM_ACTION) = SCORE %then %do;
33731          filename temp catalog 'sashelp.emmodl.tree_score.source';
33732          %include temp;
33733          filename temp;
33734      
33735          %em_tree_score;
33736      
33737        %end;
33738      
33739        %else
33740        %if %upcase(&EM_ACTION) = REPORT %then %do;
33741      
33742             filename temp catalog 'sashelp.emmodl.tree_report.source';
33743             %include temp;
33744             filename temp;
33745      
33746             %em_tree_report;
33747         %end;
33748      
33749        %else
33750        %if %upcase(&EM_ACTION) = OPENINT %then %do;
33751      
33752             filename temp catalog 'sashelp.emmodl.tree_actions.source';
33753             %include temp;
33754             filename temp;
33755             %EM_TREE_OPENTREEVIEWER;
33756      
33757         %end;
33758      
33759        %else
33760        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
33761      
33762             filename temp catalog 'sashelp.emmodl.tree_actions.source';
33763             %include temp;
33764             filename temp;
33765             %EM_TREE_CLOSETREEVIEWER;
33766      
33767         %end;
33768      
33769      
33770         %doendm:
33771      %mend main;
33772      
33773      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_ACTIONS.SOURCE.
33775     +%macro EM_TREE_OPENTREEVIEWER;
33777     +  options validvarname = v7;
33779     +  /* retrieve table names */
33780     +  %EM_GETNAME(key=EMTREE, type=DATA);
33781     +  %EM_GETNAME(key=BROWSETREE, type=DATA);
33783     +  /* check if the path needs to be updated; if so, delete datasets and force user to update */
33784     +  %em_getActionStatus(emlib=&EM_LIB, nodeid=&EM_NODEID);
33786     +  /* load trainmacros */
33787     +  filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
33788     +  %include temp;
33789     +  filename temp;
33791     +  %em_checkmacro(name=EM_PROPERTY_IMPORTMODEL,value=N,global=Y);
33793     +    %if "&EM_IMPORT_DATA"="" %then %do;
33794     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
33795     +       %goto doendm;
33796     +   %end;
33797     +   %if ((%sysfunc(exist(&EM_IMPORT_DATA)) ne 1) AND (%sysfunc(exist(&EM_IMPORT_DATA, VIEW)) ne 1)) %then %do;
33798     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.PATHNEEDSTORUN;
33799     +       %goto doendm;
33800     +   %end;
33802     +   /* if node needs to run or tree data doesn't exist, create a root node for interactive training */
33803     +   %if ( (%sysfunc(exist(&EM_USER_EMTREE)) ne 1 ) OR (&EM_TRAIN eq Y) ) %then %do;
33805     +       /* determine if multiple targets will be processed */
33806     +       %let em_tree_multipleTargets=N;
33807     +       %let em_tree_numTarget=1;
33808     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
33809     +         /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
33810     +         %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
33811     +            %let em_tree_multipleTargets=N;
33812     +         %end;
33813     +         %else %do;
33814     +            /* create macro array of targets  */
33815     +            data _null_;
33816     +              set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
33817     +              call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
33818     +              if eof then
33819     +                call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
33820     +           run;
33822     +           %if &em_tree_numTarget gt 1 %then %do;
33823     +            %let em_tree_multipleTargets=Y;
33824     +           %end;
33825     +         %end;
33826     +       %end;
33828     +       %em_tree_runTreeProcedure(indata=&EM_IMPORT_DATA, multipleTar=&em_tree_multipleTargets, intFlag=Y);
33830     +       /* Check return code and throw exception if error is detected */
33831     +       %if &SYSERR > 0 %then %do;
33832     +          %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
33833     +          %goto doendm;
33834     +       %end;
33836     +  %end;
33838     +  /* set default values for sampling macros if they don't exist; this would happen on diagrams imported from release prior to 12.3 */
33839     +  %if "&EM_PROPERTY_CREATESAMPLE" eq "" %then %let EM_PROPERTY_CREATESAMPLE=DEFAULT;
33840     +  %if "&EM_PROPERTY_SAMPLEMETHOD" eq "" %then %let EM_PROPERTY_SAMPLEMETHOD=RANDOM;
33841     +  %if "&EM_PROPERTY_SAMPLESIZE" eq "." %then %let EM_PROPERTY_SAMPLESIZE=10000;
33842     +  %if "&EM_PROPERTY_SAMPLESEED" eq "." %then %let EM_PROPERTY_SAMPLESEED=12345;
33844     +  /* determine if sample should be used within interactive training */
33845     +  %EM_GETNAME(key=TRAINSAMPLE, type=DATA);
33846     +  %if "&EM_PROPERTY_CREATESAMPLE" ne "NONE" %then %do;
33848     +     /* determine number of obs in training table */
33849     +     %let trainobs = ;
33850     +     proc sql noprint;
33851     +       select count(*) into: trainobs from &EM_IMPORT_DATA;
33852     +     quit;
33854     +     /* retrieve appropriate sample size */
33855     +     %let maxobs = ;
33856     +     %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
33857     +       %exploreObs(data=&EM_IMPORT_DATA);
33858     +       %let maxobs = &_EXPLOREOBS_MAX;
33859     +     %end;
33860     +     %else %do;
33861     +       %let maxobs = &EM_PROPERTY_SAMPLESIZE;
33862     +     %end;
33864     +     /* create sample based on maxobs */
33865     +     %if &trainobs gt &maxobs %then %do;
33866     +        %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
33867     +          %exploreSample(data=&EM_IMPORT_DATA, seed=12345, output=&EM_USER_TRAINSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
33868     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
33869     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
33870     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=12345, output=&EM_USER_VALIDSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
33871     +          %end;
33872     +        %end;
33873     +        %else %if "&EM_PROPERTY_CREATESAMPLE" eq "USER" %then %do;
33874     +          %if "&EM_PROPERTY_SAMPLEMETHOD" eq "STRATIFY" %then %do;
33875     +            %if &EM_NUM_INTERVAL_TARGET %then %do;
33876     +              %let em_tree_tempmethod = RANDOM;
33877     +            %end;
33878     +            %else %do;
33879     +              %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
33880     +            %end;
33881     +          %end;
33882     +          %else %do;
33883     +            %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
33884     +          %end;
33886     +          %exploreSample(data=&EM_IMPORT_DATA, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_TRAINSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
33887     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
33888     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
33889     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_VALIDSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
33890     +          %end;
33891     +        %end;
33893     +        proc arbor data=&EM_USER_TRAINSAMPLE inmodel=&EM_USER_EMTREE refreshtrain;
33894     +          interact;
33895     +          subtree largest;
33896     +           /********** do i need CV options here? *********/
33897     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
33898     +            assess validata=&&EM_USER_VALIDSAMPLE;
33899     +          %end;
33900     +          save model=&EM_USER_EMTREE;
33901     +        run;
33902     +        quit;
33903     +     %end;
33904     +  %end;
33906     +  /* create browsetree table as a copy of EMTREE to process within interactive training */
33907     +  %EM_GETNAME(key=BROWSETREE,  type=DATA);
33908     +  data &EM_USER_BROWSETREE;
33909     +    set &EM_USER_EMTREE;
33910     +  run;
33912     +  /* reset validvarname options
33913     +  %let vvarname = %sysfunc(optgetc('VALIDVARNAME'));
33914     +  options validvarname=&vvarname;  */
33915     +  %doendm:
33917     +%mend EM_TREE_OPENTREEVIEWER;
33921     +%macro EM_TREE_CLOSETREEVIEWER;
33923     +    /* clear syscc prior to running close Method */
33924     +    %let SYSCC = 0;
33925     +    options validvarname=V7;
33927     +    /* retrieve table names */
33928     +    %EM_GETNAME(key=BROWSETREE,  type=DATA);
33929     +    %EM_GETNAME(key=EMTREE,  type=DATA);
33930     +    %EM_GETNAME(key=OUTSEQ,  type=DATA);
33931     +    %EM_GETNAME(key=OUTIMPORT,  type=DATA);
33932     +    %EM_GETNAME(key=OUTNODES,  type=DATA);
33933     +    %EM_GETNAME(key=OUTSUMMARY,  type=DATA);
33934     +    %EM_GETNAME(key=OUTSTATS,  type=DATA);
33935     +    %EM_GETNAME(key=OUTTOPOLOGY,  type=DATA);
33936     +    %EM_GETNAME(key=OUTPATH,  type=DATA);
33937     +    %EM_GETNAME(key=OUTRULES,  type=DATA);
33939     +    %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
33940     +    %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
33942     +    /* load trainmacros */
33943     +    filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
33944     +    %include temp;
33945     +    filename temp;
33947     +    /* send output to node output window ; this will replace */
33948     +    /* old print with the new  print                         */
33949     +    options validvarname = v7;
33951     +    /* determine if multiple targets will be processed */
33952     +    %let em_tree_multipleTargets=N;
33953     +    %let em_tree_numTarget=1;
33954     +    %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
33955     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
33956     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
33957     +         %let em_tree_multipleTargets=N;
33958     +      %end;
33959     +      %else %do;
33960     +         /* create macro array of targets  */
33961     +         data _null_;
33962     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
33963     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
33964     +           if eof then
33965     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
33966     +        run;
33968     +        %if &em_tree_numTarget gt 1 %then %do;
33969     +           %let em_tree_multipleTargets=Y;
33970     +        %end;
33971     +      %end;
33972     +    %end;
33975     + /* turn on pmml if requested */
33976     + %let nnpmml=0;
33977     + %if %symexist(EM_PMML) %then %do;
33978     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
33979     +       %let nnpmml=1;
33981     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
33982     +   %end;
33983     + %end;
33985     + %if &nnpmml %then %do;
33987     +    /* create dmdb needed for pmml generation */
33988     +    %let tree_maxlevel = 512;
33989     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
33990     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
33991     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
33992     +      %end;
33993     +    %end;
33994     +    %if &tree_maxlevel gt 0 %then %do;
33995     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
33996     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
33997     +    %end;
33999     +    %let targetOrderString =;
34000     +    %let targetString = ;
34001     +    data _null_;
34002     +       length orderString nameString $10000;
34003     +       retain orderString nameString;
34004     +       set &em_data_variableset end=eof;
34005     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
34006     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
34007     +       %end;
34008     +       %else %do;
34009     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
34010     +       %end;          select(order);
34011     +         when('')        order ='DESC';
34012     +         when('FMTASC')  order='ASCFMT';
34013     +         when('FMTDESC') order='DESFMT';
34014     +         otherwise;
34015     +       end;
34016     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
34017     +       nameString = trim(nameString)!!' '!!trim(NAME);
34019     +       if eof then do;
34020     +          call symput('targetOrderString', trim(orderString));
34021     +          call symput('targetString', trim(nameString));
34022     +       end;
34023     +    run;
34025     +    %let arborkluge= "work._treeDMDB";
34027     +    proc dmdb batch data=&EM_IMPORT_DATA
34028     +    %if &nnpmml %then %do;
34029     +        PMML
34030     +    %end;
34031     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
34033     +     %if "%EM_ID" ne "" %then %do;
34034     +       id %EM_ID;
34035     +     %end;
34036     +     %if &EM_NUM_CLASS gt 0 %then %do;
34037     +       class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
34038     +            %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
34039     +            &targetOrderString;
34040     +     %end;
34041     +     %if &EM_NUM_INTERVAL gt 0 %then %do;
34042     +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
34043     +     %end;
34044     +     target &targetString %EM_INTERVAL_TARGET;
34045     +     %if "%EM_FREQ" ne "" %then %do;
34046     +       freq %EM_FREQ;
34047     +     %end;
34048     +    run;
34049     +    quit;
34051     +    proc datasets lib=work nolist;
34052     +       delete classout varout;
34053     +    run;
34054     +    quit;
34056     + %end;
34059     +    /* run arbor to generate new results and scoring code */
34060     +    proc arbor data=&EM_IMPORT_DATA inmodel=&EM_USER_BROWSETREE refreshtrain;
34061     +       Performance &EM_PROPERTY_PERFORMANCE
34062     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
34063     +         nodesize=&EM_PROPERTY_NODESAMPLE
34064     +       %end;
34065     +       ;
34066     +      interact;
34067     +      *subtree largest;
34070     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
34071     +         Assess
34072     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
34073     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
34074     +              %put &em_codebar;
34075     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
34076     +              %put &errormsg;
34077     +              %put &em_codebar;
34078     +            %end;
34079     +            %else %do;
34080     +               Validata=&EM_IMPORT_VALIDATE;
34081     +            %end;
34082     +         %end;
34083     +         %else %do;
34084     +           NoValidata
34085     +         %end;
34086     +       %end;
34087     +      ;
34088     +      makemacro nleaves=nleaves;
34089     +      save
34090     +      %if "&EM_USER_EMTREE" ne "" %then %do;
34091     +         MODEL=&EM_USER_EMTREE
34092     +      %end;
34093     +      %if "&EM_USER_OUTSEQ" ne "" %then %do;
34094     +        SEQUENCE=&EM_USER_OUTSEQ
34095     +      %end;
34096     +      %if "&EM_USER_OUTIMPORT" ne "" %then %do;
34097     +        IMPORTANCE=&EM_USER_OUTIMPORT
34098     +      %end;
34099     +      %if "&EM_USER_OUTNODES" ne "" %then %do;
34100     +         NODESTAT=&EM_USER_OUTNODES
34101     +      %end;
34102     +      %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
34103     +         SUMMARY=&EM_USER_OUTSUMMARY
34104     +      %end;
34105     +      %if "&EM_USER_OUTSTATS" ne "" %then %do;
34106     +         STATSBYNODE=&EM_USER_OUTSTATS
34107     +      %end;
34108     +      %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
34109     +         TOPOLOGY=&EM_USER_OUTTOPOLOGY
34110     +      %end;
34111     +      %if "&EM_USER_OUTPATH" ne "" %then %do;
34112     +         Pathlistnonmissing=&EM_USER_OUTPATH
34113     +      %end;
34114     +      %if "&EM_USER_OUTRULES" ne "" %then %do;
34115     +         RULES = &EM_USER_OUTRULES
34116     +      %end;
34117     +      ;
34119     +      %let codetext=;
34120     +      %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
34121     +        %let codetext=&codetext DUMMY;
34122     +      %end;
34123     +      %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
34124     +        %let codetext=&codetext NOLEAFID;
34125     +      %end;
34127     +      %let norescodetxt=;
34128     +      %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
34129     +        %let norescodetxt=&codetext NOPRED;
34130     +      %end;
34132     +      %let lookupString = ;
34133     +      %if ^%symexist(EM_OPTION) %then
34134     +         %let EM_OPTION=;
34136     +      %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
34137     +         %let lookupString = LOOKUP=SELECT;
34138     +      %end;
34140     +      code file="&EM_USER_TREEFLOW" res &codetext &lookupString;
34141     +      code file="&EM_USER_TREEPUBLISH" nores &norescodetxt &lookupString;
34143     +      %if &nnpmml %then %do;
34144     +        code pmml;
34145     +      %end;
34147     +      score data=&EM_IMPORT_DATA out=_NULL_ outfit=work.fit_train role=TRAIN;
34148     +      %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
34149     +        score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
34150     +      %end;
34151     +      %if (("&EM_IMPORT_TEST" ne "") AND (%sysfunc(exist(&EM_IMPORT_TEST)) or %sysfunc(exist(&EM_IMPORT_TEST,VIEW)) )) %then %do;
34152     +        score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
34153     +      %end;
34154     +    run;
34156     +    quit;
34158     +    %if &nnpmml %then %do;
34159     +       ods pmml close;
34160     +    %end;
34162     +   /* Check return code and throw exception if error is detected */
34163     +   %if &SYSERR > 0 %then %do;
34164     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
34165     +     %goto doendm;
34166     +   %end;
34168     +   /* create outfit dataset if multiple score statements have been executed */
34169     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
34171     +   /* print variable importance listing */
34172     +   %let em_tree_surrexists=.;
34173     +   data _null_;
34174     +    set &EM_USER_OUTIMPORT (obs=2) end=eof;
34175     +    if eof then do ;
34176     +      call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
34177     +      call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
34178     +    end;
34179     +   run;
34181     +   /* create English Rules */
34182     +   %EM_GETNAME(key=ENGLISHRULES, type=FILE, extension=txt);
34183     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
34184     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
34185     +       %em_tree_makeEnglishRules;
34187     +      /* English Rules */
34188     +      %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
34190     +     %end;
34191     +   filename x;
34193     +   %doendm:
34195     +   %EM_REPORT(key=EMINTLOG, viewtype=LOG, block=Interactive, description=Log, autodisplay=N);
34196     +   %EM_REPORT(key=EMINTOUT, viewtype=OUTPUT, block=Interactive, description=Output, autodisplay=N);
34198     +%mend EM_TREE_CLOSETREEVIEWER;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
34201     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
34202     +  %global &nLevel;
34203     +  proc dmdb batch data=&indata
34204     +    classout=_tmp_dmdbout;
34205     +    class &target;
34206     +  run;
34207     +  data _tmp_dmdbout;
34208     +    set _tmp_dmdbout;
34209     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
34210     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
34211     +  run;
34212     +  data _null_;
34213     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
34214     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
34215     +    %let dsid = %sysfunc(close(&dsid));
34216     +     call symput("&nLevel", put(&_obs, Best12.));
34217     +  run;
34219     +  proc datasets lib=work nolist;
34220     +     delete _tmp_dmdbout;
34221     +  run;
34222     +  quit;
34223     +%Mend EM_CheckBinaryTargetLevel;
34226     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
34228     +  /* determine the number of obs in training data */
34229     +  proc sql;
34230     +    reset noprint;
34231     +    select count(*) into :em_nobs from &indata;
34232     +  quit;
34234     +  /* determine the number of input variables */
34235     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
34236     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
34238     +  /* retrieve targetEvent from decmeta */
34239     +  %let targetEvent=;
34240     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
34241     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
34242     +      data _null_;
34243     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
34244     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
34245     +      run;
34246     +    %end;
34247     +  %end;
34249     +  /* create targetTable if multipleTar eq Y */
34250     +  data temptarget;
34251     +    set &EM_DATA_VARIABLESET;
34252     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
34253     +  run;
34255     + /* data sets */
34256     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
34257     + %EM_GETNAME(key=EMTREE,        type=DATA);
34258     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
34259     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
34260     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
34261     + %EM_GETNAME(key=OUTNODES,      type=DATA);
34262     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
34263     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
34264     + %EM_GETNAME(key=OUTPATH,       type=DATA);
34265     + %EM_GETNAME(key=OUTRULES,      type=DATA);
34267     + /* files */
34268     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
34269     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
34271     + /* turn on pmml if requested */
34272     + %let nnpmml=0;
34273     + %if %symexist(EM_PMML) %then %do;
34274     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
34275     +       %let nnpmml=1;
34277     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
34278     +   %end;
34279     +%end;
34281     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
34283     +%if &nnpmml or &numClassTarget %then %do;
34285     +    /* create dmdb needed for pmml generation */
34286     +    %let tree_maxlevel = 512;
34287     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
34288     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
34289     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
34290     +      %end;
34291     +    %end;
34292     +    %if &tree_maxlevel gt 0 %then %do;
34293     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
34294     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
34295     +    %end;
34297     +    %let targetOrderString =;
34298     +    %let targetString = ;
34299     +    data _null_;
34300     +       length orderString nameString $10000;
34301     +       retain orderString nameString;
34302     +       set &em_data_variableset end=eof;
34303     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
34304     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
34305     +       %end;
34306     +       %else %do;
34307     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
34308     +       %end;          select(order);
34309     +         when('')        order ='DESC';
34310     +         when('FMTASC')  order='ASCFMT';
34311     +         when('FMTDESC') order='DESFMT';
34312     +         otherwise;
34313     +       end;
34314     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
34315     +       nameString = trim(nameString)!!' '!!trim(NAME);
34317     +       if eof then do;
34318     +          call symput('targetOrderString', trim(orderString));
34319     +          call symput('targetString', trim(nameString));
34320     +       end;
34321     +    run;
34323     +    %let arborkluge= "work._treeDMDB";
34325     +    proc dmdb batch data=&indata
34326     +    %if &nnpmml %then %do;
34327     +        PMML
34328     +    %end;
34329     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
34331     +      %if &nnpmml %then %do;
34332     +           %if "%EM_ID" ne "" %then %do;
34333     +             id %EM_ID;
34334     +           %end;
34335     +           %if &EM_NUM_CLASS gt 0 %then %do;
34336     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
34337     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
34338     +                  &targetOrderString;
34339     +           %end;
34340     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
34341     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
34342     +           %end;
34343     +           target &targetString %EM_INTERVAL_TARGET;
34344     +           %if "%EM_FREQ" ne "" %then %do;
34345     +             freq %EM_FREQ;
34346     +           %end;
34347     +      %end;
34348     +      %else %do;
34349     +         class  &targetOrderString;
34350     +         target &targetString %EM_INTERVAL_TARGET;
34351     +      %end;
34352     +    run;
34353     +    quit;
34355     +    proc datasets lib=work nolist;
34356     +       delete classout varout;
34357     +    run;
34358     +    quit;
34360     + %end;
34363     + /* run Arbor procedure */
34364     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
34365     +  proc arbor data=&INDATA
34367     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
34368     +    Leafsize = &EM_PROPERTY_LEAFSIZE
34369     +  %end;
34371     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
34372     +    Splitsize = &EM_PROPERTY_SPLITSIZE
34373     +  %end;
34375     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
34376     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
34377     +  %end;
34379     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
34380     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
34381     +  %end;
34383     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
34384     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
34385     +  %end;
34387     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
34388     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
34389     +  %end;
34390     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
34391     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
34392     +  %end;
34393     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
34394     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
34395     +  %end;
34397     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
34398     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
34399     +      alpha = &EM_PROPERTY_SIGLEVEL
34400     +    %end;
34401     +  %end;
34403     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
34404     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
34405     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
34406     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
34407     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
34409     +        padjust =
34410     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
34411     +          &chaid
34412     +        %end;
34413     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
34414     +          DEPTH
34415     +        %end;
34416     +      %end;
34417     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
34418     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
34419     +         pvars = &num_inputs
34420     +      %end;
34421     +    %end;
34422     +  %end;
34423     +  %else %do;
34424     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
34425     +         padjust = NONE
34426     +      %end;
34427     +  %end;
34429     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
34430     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
34431     +    Maxrules = &num_nrules
34432     +  %end;
34434     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
34435     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
34436     +    Maxsurrs = &num_nsurrs
34437     +  %end;
34439     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
34440     +     Missing=&EM_PROPERTY_MISSINGVALUE
34441     +  %end;
34443     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
34444     +     USEVARONCE
34445     +  %end;
34447     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
34448     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
34449     +  %end;
34452     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
34453     +    event = "&targetEvent"
34454     +  %end;
34456     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
34457     +     DECSEARCH
34458     +  %end;
34460     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
34461     +     PRIORSSEARCH
34462     +  %end;
34464     +  %if &arbor_1 ne %then %do;
34465     +    &arbor_1
34466     +  %end;
34468     +  %if &em_arbor ne %then %do;
34469     +     &em_arbor
34470     +  %end;
34471     +  ;
34472     + %end;
34473     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
34474     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
34475     +       Performance &EM_PROPERTY_PERFORMANCE
34476     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
34477     +         nodesize=&EM_PROPERTY_NODESAMPLE
34478     +       %end;
34479     +       ;
34480     +       interact;
34481     + %end;
34482     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
34483     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
34484     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
34485     +    %put &em_codebar;
34486     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
34487     +    %put &errormsg;
34488     +    %put &em_codebar;
34489     +    %goto doendm;
34490     +   %end;
34491     +   %else %do;
34492     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
34493     +       Performance &EM_PROPERTY_PERFORMANCE
34494     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
34495     +         nodesize=&EM_PROPERTY_NODESAMPLE
34496     +       %end;
34497     +       ;
34498     +       interact;
34499     +   %end;
34500     + %end;
34502     + %else %do;
34503     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
34504     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
34505     +    %put &em_codebar;
34506     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
34507     +    %put &errormsg;
34508     +    %put &em_codebar;
34509     +    %goto doendm;
34510     +   %end;
34511     +   %else %do;
34512     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
34513     +       Performance &EM_PROPERTY_PERFORMANCE
34514     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
34515     +         nodesize=&EM_PROPERTY_NODESAMPLE
34516     +       %end;
34517     +       ;
34518     +        interact;
34519     +   %end;
34520     + %end;
34522     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
34523     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
34524     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
34525     +    %end;
34527     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
34528     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
34529     +    %end;
34531     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
34532     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
34533     +    %end;
34535     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
34536     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
34537     +    %end;
34539     +    %if "%EM_FREQ" ne "" %then %do;
34540     +       freq %EM_FREQ;
34541     +    %end;
34543     +    %if "&multipleTar" eq "Y" %then %do;
34544     +       /* cycle through all target vars in variableset */
34545     +       %let tdsid = %sysfunc(open(temptarget));
34546     +       %if &tdsid %then %do;
34547     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
34548     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
34549     +          %do %while(^ %sysfunc(fetch(&tdsid)));
34550     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
34551     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
34552     +             target &var / level = &lvl
34553     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
34554     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
34555     +             %end;
34556     +             %else %if "&lvl" eq "INTERVAL" %then %do;
34557     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
34558     +             %end;
34559     +             %else %if "&lvl" eq "ORDINAL" %then %do;
34560     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
34561     +             %end;
34562     +          %end;
34563     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
34564     +       %end;
34565     +       useTarget variable = %EM_TARGET;
34566     +    %end;
34567     +    %else %do;
34568     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
34569     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
34570     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
34571     +      %end;
34572     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
34573     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
34574     +      %end;
34575     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
34576     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
34577     +      %end;
34578     +    %end;
34580     +    %if "&multipleTar" eq "N" %then %do;
34581     +      &EM_DEC_STATEMENT;
34582     +    %end;
34584     +    Performance &EM_PROPERTY_PERFORMANCE
34585     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
34586     +      nodesize=&EM_PROPERTY_NODESAMPLE
34587     +    %end;
34588     +    ;
34590     +    %if "&intFlag" eq "Y" %then %do;
34591     +       INTERACT Largest;
34592     +       Train maxnewdepth=0;
34593     +    %end;
34595     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
34596     +         Assess
34597     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
34598     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
34599     +              %put &em_codebar;
34600     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
34601     +              %put &errormsg;
34602     +              %put &em_codebar;
34603     +            %end;
34604     +            %else %do;
34605     +               Validata=&EM_IMPORT_VALIDATE
34606     +            %end;
34607     +         %end;
34608     +         %else %do;
34609     +           NoValidata
34610     +         %end;
34611     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
34612     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
34613     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
34614     +               %if &dsid %then %do;
34615     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
34616     +                 %do %while(^ %sysfunc(fetch(&dsid)));
34617     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
34618     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
34619     +                   %else %do;
34620     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
34621     +                      %else %let measure= MISC;
34622     +                   %end;
34623     +                 %end;
34624     +               %end;
34625     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
34626     +            %end;
34627     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
34628     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
34629     +                 %let measure=ASE;
34630     +              %end;
34631     +              %else %do;
34632     +                 %let measure=MISC;
34633     +              %end;
34634     +            %end;
34635     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
34636     +              %let measure=ASE;
34637     +            %end;
34638     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
34639     +               %let measure = LIFT;
34640     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
34641     +               %if &dsid %then %do;
34642     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
34643     +                 %do %while(^ %sysfunc(fetch(&dsid)));
34644     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
34645     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
34646     +                 %end;
34647     +               %end;
34648     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
34649     +            %end;
34650     +            measure=&measure
34651     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
34652     +               event = "&targetEvent"
34653     +            %end;
34654     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
34655     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
34656     +            %end;
34657     +         %end;
34658     +         %if "&multipleTar" eq "N" %then %do;
34659     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
34660     +               CV
34661     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
34662     +                 CVNITer = &EM_PROPERTY_CVNITER
34663     +               %end;
34664     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
34665     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
34666     +               %end;
34667     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
34668     +                 CVSeed = &EM_PROPERTY_CVSEED
34669     +               %end;
34670     +            %end;
34671     +         %end;
34672     +       %end;
34673     +      ;
34675     +      %if "&intFlag" ne "Y" %then %do;
34676     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
34677     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
34678     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
34679     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
34681     +          SUBTREE &subtree
34682     +          %if "&subtree" eq "NLEAVES" %then %do;
34683     +            =&EM_PROPERTY_NSUBTREE
34684     +          %end;
34685     +          ;
34686     +        %end;
34688     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
34689     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
34690     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
34691     +          %end;
34692     +       %end;
34693     +      %end;
34694     + %end;
34697     + MakeMacro nleaves = nleaves;
34698     + save
34699     + %if "&EM_USER_EMTREE" ne "" %then %do;
34700     +   MODEL=&EM_USER_EMTREE
34701     + %end;
34702     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
34703     +   SEQUENCE=&EM_USER_OUTSEQ
34704     + %end;
34705     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
34706     +   IMPORTANCE=&EM_USER_OUTIMPORT
34707     + %end;
34708     + %if "&EM_USER_OUTNODES" ne "" %then %do;
34709     +   NODESTAT=&EM_USER_OUTNODES
34710     + %end;
34711     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
34712     +   SUMMARY=&EM_USER_OUTSUMMARY
34713     + %end;
34714     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
34715     +   STATSBYNODE=&EM_USER_OUTSTATS
34716     + %end;
34717     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
34718     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
34719     + %end;
34720     + %if "&EM_USER_OUTPATH" ne "" %then %do;
34721     +   Pathlistnonmissing=&EM_USER_OUTPATH
34722     + %end;
34723     + %if "&EM_USER_OUTRULES" ne "" %then %do;
34724     +   RULES = &EM_USER_OUTRULES
34725     + %end;
34726     + ;
34728     + %if "&intFlag" ne "Y" %then %do;
34730     +   %let lookupString = ;
34731     +   %if ^%symexist(EM_OPTION) %then
34732     +      %let EM_OPTION=;
34734     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
34735     +      %let lookupString = LOOKUP=SELECT;
34736     +   %end;
34738     +   %let codetext=;
34739     +   %let norescodetxt=;
34741     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
34742     +     %let codetext=&codetext DUMMY;
34743     +     %let norescodetxt=&norescodetxt DUMMY;
34744     +   %end;
34745     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
34746     +     %let codetext=&codetext NOLEAFID;
34747     +     %let norescodetxt=&norescodetxt NOLEAFID;
34748     +   %end;
34749     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
34750     +     %let norescodetxt=&norescodetxt NOPRED;
34751     +   %end;
34753     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
34754     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
34756     +   %if &nnpmml %then %do;
34757     +     code pmml;
34758     +   %end;
34760     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
34761     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
34762     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
34763     +   %end;
34764     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
34765     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
34766     +   %end;
34767     + %end;
34769     + run;
34770     + quit;
34772     + /*%em_checkerror(); */
34773     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
34774     +   /* Delete DMDB catalog */
34775     +   proc datasets lib=work nolist;
34776     +       delete _treeDMDB / mt=cat;
34777     +  run;
34778     +  %end;
34780     + %if &nnpmml %then %do;
34781     +    ods pmml close;
34782     + %end;
34784     +  %doendm:
34786     +%mend em_tree_runTreeProcedure;
34788     +%macro em_tree_createFitStats( multipleTar= );
34791     +  /* create targetTable is multipleTar eq Y */
34792     +  data temptarget;
34793     +    set &EM_DATA_VARIABLESET;
34794     +    where ROLE="TARGET";
34795     +  run;
34797     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
34798     +   data &EM_USER_EMOUTFIT;
34799     +     length target $32;
34800     +     merge work.fit_train
34801     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
34802     +       work.fit_valid
34803     +     %end;
34804     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
34805     +       work.fit_test
34806     +     %end;
34807     +     ;
34808     +     %if "&multipleTar" eq "N" %then %do;
34809     +       target="%EM_TARGET";
34810     +     %end;
34811     +     %else %do;
34812     +       target = _TARGET_;
34813     +     %end;
34814     +     drop _NW_ _SUMW_
34815     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
34816     +        _VSUMW_
34817     +     %end;
34818     +     ;
34819     +   run;
34821     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
34822     +     proc datasets library=work nolist;
34823     +       delete fit_valid;
34824     +     run;
34825     +   %end;
34826     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
34827     +     proc datasets library=work nolist;
34828     +       delete fit_test;
34829     +     run;
34830     +   %end;
34832     +%mend em_tree_createFitStats;
34835     +%macro em_tree_makeEnglishRules;
34837     +  %EM_GETNAME(key=OUTNODES, type=DATA);
34838     +  %EM_GETNAME(key=OUTPATH, type=DATA);
34840     +  /* verify that necessary tables exist and if not, skip processing */
34841     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
34842     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
34843     +    %goto doendm;
34844     +  %end;
34845     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
34846     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
34847     +    %goto doendm;
34848     +  %end;
34850     +  /* determine length of variable in outpath dataset */
34851     +  %let vlength= ;
34852     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
34853     +  %if &dsid ne %then %do;
34854     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
34855     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
34856     +  %end;
34857     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
34859     +  data tempoutpath;
34860     +    length varname $&vlength;
34861     +    retain varname;
34862     +    set &EM_USER_OUTPATH;
34864     +    if ^missing(variable) then varname=variable;
34865     +    else if ^missing(var_name) then varname=var_name;
34866     +    output;
34867     +  run;
34869     +  /* create an array of generated predicted variable names */
34870     +  %let tree_pred_vars = ;
34871     +  %let tree_pred_label = ;
34872     +  %let numpred= 0;
34873     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
34875     +    data _null_;
34876     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
34877     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
34878     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
34879     +     if eof then
34880     +       call symput('numpred', strip(put(_N_, BEST.)));
34881     +    run;
34882     +  %end;
34884     +  /* determine if NPRIORS exists in outnodes  */
34885     +  %local nprior_flag;
34886     +  data _null_;
34887     +    set &EM_USER_OUTNODES(obs=2) end=eof;
34888     +    if eof then do;
34889     +      call symput('nprior_flag', strip(put(npriors, best.)));
34890     +    end;
34891     +  run;
34893     +  proc sort data=tempoutpath; by node; run;
34894     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
34896     +  data tempoutpath;
34897     +    merge tempoutpath(in=_a) outnodes(keep= node
34898     +    %if "&nprior_flag" ne "." %then %do;
34899     +      NPRIORS
34900     +    %end;
34901     +    %else %do;
34902     +      N
34903     +    %end;
34904     +    %if &numpred gt 0 %then %do;
34905     +      %do i=1 %to &numpred;
34906     +        &&tree_pred_vars&i
34907     +      %end;
34908     +    %end;
34909     +    );
34910     +    by node;
34911     +    if _a;
34912     +  run;
34914     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
34916     +  data _null_;
34917     +    file x;
34918     +    set tempoutpath;
34919     +    by node descending varname;
34920     +    retain origvar oldnode string;
34921     +    length origvar $32 oldnode 8 string $5000;
34923     +    if _N_ = 1 then do;
34924     +      origvar = varname;
34925     +      oldnode = node;
34926     +    end;
34928     +    if first.node then do;
34929     +       put "&EM_CODEBAR";
34930     +       put " Node = " node;
34931     +       put "&EM_CODEBAR";
34932     +    end;
34934     +      if first.varname then do;
34935     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
34936     +            if MISSING(CHARACTER_VALUE) then do;
34937     +             if NUMERIC_VALUE ne .  then do;
34938     +              if ^first.node then do;
34939     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
34940     +              end;
34941     +              else do;
34942     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
34943     +              end;
34944     +             end;
34945     +            end;
34946     +            else do;
34947     +              if ^first.node then do;
34948     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
34949     +              end;
34950     +              else do;
34951     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
34952     +              end;
34953     +             end;
34954     +         end;
34955     +         else if RELATION in ("=") then do;
34956     +            if ^first.node then do;
34957     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
34958     +            end;
34959     +            else do;
34960     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
34961     +            end;
34962     +         end;
34963     +         else if RELATION in ("ISMISSING") then do;
34964     +            if ^first.node then do;
34965     +              string = " AND "|| strip(varname) || " equals Missing";
34966     +            end;
34967     +            else do;
34968     +              string = "if "|| strip(varname) ||" equals Missing";
34969     +            end;
34970     +         end;
34971     +         else if RELATION in ("ISNOTMISSING") then do;
34972     +            if ^first.node then do;
34973     +              string = " AND "|| strip(varname) || " equals All Values";
34974     +            end;
34975     +            else do;
34976     +              string = "if "|| strip(varname) ||" equals All Values";
34977     +            end;
34978     +         end;
34979     +         if ^missing(varname) then origvar = varname;
34980     +         oldnode=node;
34982     +      end;
34983     +      else do;
34984     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
34985     +          if MISSING(CHARACTER_VALUE) then do;
34986     +           if  NUMERIC_VALUE ne .  then do;
34987     +            if ^MISSING(string) then
34988     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
34989     +            else
34990     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
34991     +           end;
34992     +          end;
34993     +          else do;
34994     +            if ^MISSING(string) then
34995     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
34996     +            else
34997     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
34998     +          end;
35000     +         end;
35001     +         else if RELATION in ("=") then do;
35002     +           string = strip(string)||", "||strip(character_value);
35003     +         end;
35004     +         else if RELATION in ("ISMISSING") then do;
35006     +         end;
35007     +         if ^missing(varname) then origvar = varname;
35008     +         oldnode=node;
35009     +      end;
35010     +      if last.varname then do;
35011     +         if RELATION in ("ISMISSING") then do;
35012     +           if ^first.varname then do;
35013     +             string = strip(string) || " or MISSING";
35014     +           end;
35015     +         end;
35016     +         put string;
35017     +         if ^missing(varname) then origvar = varname;
35018     +         oldnode=node;
35019     +      end;
35021     +      if last.node then do;
35022     +         put "then ";
35023     +         put " Tree Node Identifier   = " node;
35025     +         %if "&nprior_flag" ne "." %then %do;
35026     +           put " Number of Observations = " NPRIORS;
35027     +         %end;
35028     +         %else %do;
35029     +           put " Number of Observations = " N;
35030     +         %end;
35032     +         %if &numpred gt 0 %then %do;
35033     +           %do i=1 %to &numpred;
35034     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
35035     +           %end;
35036     +         %end;
35038     +         put " ";
35039     +         if ^missing(varname) then origvar = varname;
35040     +         oldnode=node;
35041     +      end;
35043     +  run;
35045     +  proc datasets lib=work nolist;
35046     +    delete tempoutpath outnodes;
35047     +  run;
35049     +  %doendm:
35050     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: 1530834 kilobytes of physical memory.
NOTE: The subtree sequence contains 7 subtrees. The largest has 13 nodes and 7 leaves.
NOTE: Will use 4000 out of 4000 training cases.
NOTE: Using memory pool with 152157184 bytes.
NOTE: The subtree sequence contains 7 subtrees. The largest has 13 nodes and 7 leaves.
NOTE: Using subtree with 13 nodes and 7 leaves.
NOTE: Created macro variable NLEAVES equal to 7.
NOTE: The data set EMWS1.TREE4_OUTIMPORT has 14 observations and 6 variables.
NOTE: The data set EMWS1.TREE4_EMTREE has 606 observations and 4 variables.
NOTE: The data set EMWS1.TREE4_OUTNODES has 13 observations and 24 variables.
NOTE: The data set EMWS1.TREE4_OUTPATH has 38 observations and 7 variables.
NOTE: The data set EMWS1.TREE4_OUTRULES has 170 observations and 6 variables.
NOTE: The data set EMWS1.TREE4_OUTSEQ has 7 observations and 20 variables.
NOTE: The data set EMWS1.TREE4_OUTSTATS has 91 observations and 5 variables.
NOTE: The data set EMWS1.TREE4_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE4_OUTTOPOLOGY has 13 observations and 5 variables.
NOTE: External file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\TREEFLOW.sas opened.
NOTE: External file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.


NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.36 seconds
      cpu time            0.07 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE4_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.FIT_TEST (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 38 observations read from the data set EMWS1.TREE4_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 38 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set EMWS1.TREE4_ORGYN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 38 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 38 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set EMWS1.TREE4_OUTNODES.
NOTE: The data set WORK.OUTNODES has 13 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 38 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 13 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 38 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 38 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 38 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195   
NOTE: The file X is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=03 December 2021 17:54:57,
      Create Time=30 November 2021 16:14:53

NOTE: 81 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 38 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: Fileref X has been deassigned.

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

35052      
35053      *------------------------------------------------------------*;
35054      * End CLOSEINT: Tree4;
35055      *------------------------------------------------------------*;

35056      proc sort data=WORK.EM_USER_REPORT;
35057      by ID VIEW;
35058      run;

NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

35059      %let EMEXCEPTIONSTRING=;
35060      *------------------------------------------------------------*;
35061      * SCORE: Tree4;
35062      *------------------------------------------------------------*;
35063      %let EM_ACTION = SCORE;
35064      %let syscc = 0;
35065      %macro main;
35066      
35067        %if %upcase(&EM_ACTION) = CREATE %then %do;
35068          filename temp catalog 'sashelp.emmodl.tree_create.source';
35069          %include temp;
35070          filename temp;
35071      
35072          %em_tree_create;
35073        %end;
35074      
35075         %else
35076         %if %upcase(&EM_ACTION) = TRAIN %then %do;
35077      
35078             filename temp catalog 'sashelp.emmodl.tree_train.source';
35079             %include temp;
35080             filename temp;
35081             %em_tree_train;
35082         %end;
35083      
35084        %else
35085        %if %upcase(&EM_ACTION) = SCORE %then %do;
35086          filename temp catalog 'sashelp.emmodl.tree_score.source';
35087          %include temp;
35088          filename temp;
35089      
35090          %em_tree_score;
35091      
35092        %end;
35093      
35094        %else
35095        %if %upcase(&EM_ACTION) = REPORT %then %do;
35096      
35097             filename temp catalog 'sashelp.emmodl.tree_report.source';
35098             %include temp;
35099             filename temp;
35100      
35101             %em_tree_report;
35102         %end;
35103      
35104        %else
35105        %if %upcase(&EM_ACTION) = OPENINT %then %do;
35106      
35107             filename temp catalog 'sashelp.emmodl.tree_actions.source';
35108             %include temp;
35109             filename temp;
35110             %EM_TREE_OPENTREEVIEWER;
35111      
35112         %end;
35113      
35114        %else
35115        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
35116      
35117             filename temp catalog 'sashelp.emmodl.tree_actions.source';
35118             %include temp;
35119             filename temp;
35120             %EM_TREE_CLOSETREEVIEWER;
35121      
35122         %end;
35123      
35124      
35125         %doendm:
35126      %mend main;
35127      
35128      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
35130     +%macro em_tree_score;
35132     +   /* determine if multiple targets will be processed */
35133     +   %let em_tree_multipleTargets=N;
35134     +   %let em_tree_numTarget=1;
35135     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
35136     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
35137     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
35138     +         %let em_tree_multipleTargets=N;
35139     +      %end;
35140     +      %else %do;
35141     +         /* create macro array of targets  */
35142     +         data _null_;
35143     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
35144     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
35145     +           if eof then
35146     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
35147     +        run;
35149     +        %if &em_tree_numTarget gt 1 %then %do;
35150     +           %let em_tree_multipleTargets=Y;
35151     +        %end;
35152     +      %end;
35153     +   %end;
35155     +   /* build flow and publish scoring code */
35156     +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
35157     +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
35159     +   filename treeflow "&EM_USER_TREEFLOW";
35160     +   filename treepub "&EM_USER_TREEPUBLISH";
35162     +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
35163     +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
35165     +   %em_copyfile(infref=treeflow, outfref=flowref);
35166     +   %em_copyfile(infref=treepub, outfref=pubref);
35168     +   filename treeflow;
35169     +   filename treepub;
35171     +   /* if priors are used, add code to generate unadjusted residuals in export */
35172     +   %let useAdjPriors = N;
35173     +   data _null_;
35174     +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
35175     +     if USE="Y" then call symput('useAdjPriors', 'Y');
35176     +   run;
35177     +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
35178     +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
35179     +      %include temp;
35180     +      filename temp;
35182     +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
35183     +      filename adjref "&EM_USER_adjResidualCode";
35184     +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
35186     +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
35188     +      filename adjref;
35189     +   %end;
35191     +   /* LEAF */
35192     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
35193     +      data _null_;
35194     +        file flowref mod;
35195     +        put 'drop _LEAF_;';
35196     +      run;
35198     +      data _null_;
35199     +        file pubref mod;
35200     +        put 'drop _LEAF_;';
35201     +      run;
35203     +   %end;
35205     +   filename flowref;
35206     +   filename pubref;
35208     +   /* em_metachange code */
35209     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
35210     +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
35211     +   %end;
35213     +   /* variable selection based on importance stat    */
35214     +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
35215     +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
35216     +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
35217     +     %let varnum = %sysfunc(varnum(&dsid, NAME));
35218     +     %let obs = %sysfunc(fetch(&dsid));
35219     +     %do %while(&obs=0);
35220     +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
35221     +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
35222     +       %EM_METACHANGE(name=&varname, role=REJECTED);
35223     +       %let obs = %sysfunc(fetch(&dsid));
35224     +     %end;
35225     +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
35226     +   %end;
35228     +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
35229     +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
35230     +    %let tree_pred_vars = ;
35231     +    %let tree_pred_lvl =;
35232     +    %let numpred= 0;
35234     +    data _null_;
35235     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
35236     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
35237     +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
35238     +     if eof then
35239     +       call symput('numpred', strip(put(_N_, BEST.)));
35240     +    run;
35241     +   %end;
35243     +   %if &numpred ne 0 %then %do;
35244     +    %do i=1 %to &numpred;
35245     +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
35246     +      %EM_METACHANGE(name=&qpred, role=ASSESS);
35247     +    %end;
35248     +   %end;
35250     +   /* determine if multiple targets will be processed */
35251     +   %let em_tree_multipleTargets=N;
35252     +   %let em_tree_numTarget=1;
35253     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
35254     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
35255     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
35256     +         %let em_tree_multipleTargets=N;
35257     +      %end;
35258     +      %else %do;
35259     +        data _null_;
35260     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
35261     +          if eof then
35262     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
35263     +        run;
35265     +        %if &em_tree_numTarget gt 1 %then %do;
35266     +           %let em_tree_multipleTargets=Y;
35267     +        %end;
35268     +     %end;
35269     +   %end;
35271     +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
35272     +   %if "&em_tree_multipleTargets" eq "N" %then %do;
35274     +      /* variable importance */
35275     +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
35276     +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
35278     +         %let validexist=0;
35279     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
35280     +           %let validexist=1;
35281     +         %end;
35283     +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
35284     +         /* and the columns may not be generated                                                                                 */
35285     +         %let em_tree_cvexists=;
35286     +         %let em_tree_surrexists=.;
35287     +         data _null_;
35288     +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
35289     +            if eof then do ;
35290     +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
35291     +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
35292     +            end;
35293     +         run;
35295     +         data &EM_USER_OUTIMPORT;
35296     +            set &EM_USER_OUTIMPORT;
35298     +            /* format columns based on Precison value specified */
35299     +            format importance 15.&EM_PROPERTY_PRECISION
35300     +                 %if &validexist %then %do;
35301     +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
35302     +                 %end;
35303     +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
35304     +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
35305     +                 %end;
35306     +            ;
35307     +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
35308     +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
35309     +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
35310     +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
35311     +                 %if "&em_tree_surrexists" ne "" %then %do;
35312     +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
35313     +                 %end;
35314     +                 %if &validexist %then %do;
35315     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
35316     +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
35317     +                 %end;
35318     +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
35319     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
35320     +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
35321     +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
35322     +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
35323     +                 %end;
35324     +            ;
35325     +         run;
35327     +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
35328     +      %end;
35329     +   %end;
35331     +   %doendm:
35332     +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The file FLOWREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=03 December 2021 17:54:57,
      Create Time=30 November 2021 16:00:07

NOTE: 158 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: The file PUBREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=03 December 2021 17:54:57,
      Create Time=30 November 2021 16:00:07

NOTE: 136 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.

NOTE: There were 1 observations read from the data set EMWS1.TREE4_ORGYN_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The file FLOWREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5515,
      Last Modified=03 December 2021 17:54:57,
      Create Time=30 November 2021 16:00:07

NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: The file PUBREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=4930,
      Last Modified=03 December 2021 17:54:57,
      Create Time=30 November 2021 16:00:07

NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.

NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS1.TREE4_ORGYN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 14 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: The data set EMWS1.TREE4_OUTIMPORT has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

35333      
35334      *------------------------------------------------------------*;
35335      * End SCORE: Tree4;
35336      *------------------------------------------------------------*;

35337      proc sort data=WORK.EM_METACHANGE;
35338      by key uname;
35339      run;

NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

35340      filename x "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\CDELTA_TRAIN.sas";
35341      data _null_;
35342      file x;
35343      put 'if upcase(NAME) = "BILL" then do;';
35344      put 'ROLE = "REJECTED";';
35345      put 'end;';
35346      put 'else ';
35347      put 'if upcase(NAME) = "CLASS" then do;';
35348      put 'ROLE = "REJECTED";';
35349      put 'end;';
35350      put 'else ';
35351      put 'if upcase(NAME) = "LTIME" then do;';
35352      put 'ROLE = "REJECTED";';
35353      put 'end;';
35354      put 'else ';
35355      put 'if upcase(NAME) = "NGROUP" then do;';
35356      put 'ROLE = "REJECTED";';
35357      put 'end;';
35358      put 'else ';
35359      put 'if upcase(NAME) = "OAC" then do;';
35360      put 'ROLE = "REJECTED";';
35361      put 'end;';
35362      put 'else ';
35363      put 'if upcase(NAME) = "Q_ORGYN0" then do;';
35364      put 'ROLE = "ASSESS";';
35365      put 'end;';
35366      put 'else ';
35367      put 'if upcase(NAME) = "Q_ORGYN1" then do;';
35368      put 'ROLE = "ASSESS";';
35369      put 'end;';
35370      put 'else ';
35371      put 'if upcase(NAME) = "REGION" then do;';
35372      put 'ROLE = "REJECTED";';
35373      put 'end;';
35374      put 'else ';
35375      put 'if upcase(NAME) = "S_CONV" then do;';
35376      put 'ROLE = "REJECTED";';
35377      put 'end;';
35378      put 'else ';
35379      put 'if upcase(NAME) = "S_FVEG" then do;';
35380      put 'ROLE = "REJECTED";';
35381      put 'end;';
35382      put 'else ';
35383      put 'if upcase(NAME) = "S_MT" then do;';
35384      put 'ROLE = "REJECTED";';
35385      put 'end;';
35386      put 'else ';
35387      put 'if upcase(NAME) = "S_TOIL" then do;';
35388      put 'ROLE = "REJECTED";';
35389      put 'end;';
35390      put 'else ';
35391      put 'if upcase(NAME) = "TV_REG" then do;';
35392      put 'ROLE = "REJECTED";';
35393      put 'end;';
35394      put 'else ';
35395      put 'if upcase(NAME) = "_NODE_" then do;';
35396      put 'ROLE = "SEGMENT";';
35397      put 'LEVEL = "NOMINAL";';
35398      put 'end;';
35399      run;

NOTE: The file X is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=03 December 2021 17:54:58,
      Create Time=30 November 2021 16:00:07

NOTE: 56 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 37.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

35400      filename x;
NOTE: Fileref X has been deassigned.
35401      filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
35402      *------------------------------------------------------------*;
35403      * Tree4: Scoring DATA data;
35404      *------------------------------------------------------------*;
35405      data EMWS1.Tree4_TRAIN
35406      / view=EMWS1.Tree4_TRAIN
35407      ;
35408      set EMWS1.Part_TRAIN
35409      ;
35410      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas.
35411     +****************************************************************;
35412     +******             DECISION TREE SCORING CODE             ******;
35413     +****************************************************************;
35414     +
35415     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
35416     +LENGTH F_ORGYN  $   12;
35417     +LENGTH I_ORGYN  $   12;
35418     +LENGTH _WARN_  $    4;
35419     +
35420     +******              LABELS FOR NEW VARIABLES              ******;
35421     +label _NODE_ = 'Node' ;
35422     +label _LEAF_ = 'Leaf' ;
35423     +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
35424     +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
35425     +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
35426     +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
35427     +label V_ORGYN1 = 'Validated: ORGYN=1' ;
35428     +label V_ORGYN0 = 'Validated: ORGYN=0' ;
35429     +label R_ORGYN1 = 'Residual: ORGYN=1' ;
35430     +label R_ORGYN0 = 'Residual: ORGYN=0' ;
35431     +label F_ORGYN = 'From: ORGYN' ;
35432     +label I_ORGYN = 'Into: ORGYN' ;
35433     +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
35434     +label _WARN_ = 'Warnings' ;
35435     +
35436     +
35437     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
35438     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
35439     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
35440     +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
35441     +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
35442     +
35443     +
35444     +_ARBFMT_12 = PUT( ORGYN , BEST12.);
35445     + %DMNORMCP( _ARBFMT_12, F_ORGYN );
35446     +
35447     +******             ASSIGN OBSERVATION TO NODE             ******;
35448     +IF  NOT MISSING(AGE ) AND
35449     +  AGE  <                 44.5 THEN DO;
35450     +  IF  NOT MISSING(AFFL ) AND
35451     +    AFFL  <                 10.5 THEN DO;
35452     +    _ARBFMT_1 = PUT( GENDER , $1.);
35453     +     %DMNORMIP( _ARBFMT_1);
35454     +    IF _ARBFMT_1 IN ('F' ) THEN DO;
35455     +      IF  NOT MISSING(AFFL ) AND
35456     +        AFFL  <                  5.5 THEN DO;
35457     +        _NODE_  =                  110;
35458     +        _LEAF_  =                    1;
35459     +        P_ORGYN1  =             0.265625;
35460     +        P_ORGYN0  =             0.734375;
35461     +        Q_ORGYN1  =             0.265625;
35462     +        Q_ORGYN0  =             0.734375;
35463     +        V_ORGYN1  =     0.31914893617021;
35464     +        V_ORGYN0  =     0.68085106382978;
35465     +        I_ORGYN  = '0' ;
35466     +        U_ORGYN  =                    0;
35467     +        END;
35468     +      ELSE DO;
35469     +        IF  NOT MISSING(AFFL ) AND
35470     +                           9.5 <= AFFL  THEN DO;
35471     +          _NODE_  =                  113;
35472     +          _LEAF_  =                    4;
35473     +          P_ORGYN1  =     0.69565217391304;
35474     +          P_ORGYN0  =     0.30434782608695;
35475     +          Q_ORGYN1  =     0.69565217391304;
35476     +          Q_ORGYN0  =     0.30434782608695;
35477     +          V_ORGYN1  =     0.72727272727272;
35478     +          V_ORGYN0  =     0.27272727272727;
35479     +          I_ORGYN  = '1' ;
35480     +          U_ORGYN  =                    1;
35481     +          END;
35482     +        ELSE DO;
35483     +          IF  NOT MISSING(AGE ) AND
35484     +                            39.5 <= AGE  THEN DO;
35485     +            _NODE_  =                  115;
35486     +            _LEAF_  =                    3;
35487     +            P_ORGYN1  =      0.3763440860215;
35488     +            P_ORGYN0  =     0.62365591397849;
35489     +            Q_ORGYN1  =      0.3763440860215;
35490     +            Q_ORGYN0  =     0.62365591397849;
35491     +            V_ORGYN1  =     0.44827586206896;
35492     +            V_ORGYN0  =     0.55172413793103;
35493     +            I_ORGYN  = '0' ;
35494     +            U_ORGYN  =                    0;
35495     +            END;
35496     +          ELSE DO;
35497     +            _NODE_  =                  114;
35498     +            _LEAF_  =                    2;
35499     +            P_ORGYN1  =     0.57926829268292;
35500     +            P_ORGYN0  =     0.42073170731707;
35501     +            Q_ORGYN1  =     0.57926829268292;
35502     +            Q_ORGYN0  =     0.42073170731707;
35503     +            V_ORGYN1  =     0.64347826086956;
35504     +            V_ORGYN0  =     0.35652173913043;
35505     +            I_ORGYN  = '1' ;
35506     +            U_ORGYN  =                    1;
35507     +            END;
35508     +          END;
35509     +        END;
35510     +      END;
35511     +    ELSE DO;
35512     +      _NODE_  =                  109;
35513     +      _LEAF_  =                    5;
35514     +      P_ORGYN1  =     0.21186440677966;
35515     +      P_ORGYN0  =     0.78813559322033;
35516     +      Q_ORGYN1  =     0.21186440677966;
35517     +      Q_ORGYN0  =     0.78813559322033;
35518     +      V_ORGYN1  =     0.22110552763819;
35519     +      V_ORGYN0  =      0.7788944723618;
35520     +      I_ORGYN  = '0' ;
35521     +      U_ORGYN  =                    0;
35522     +      END;
35523     +    END;
35524     +  ELSE DO;
35525     +    _NODE_  =                  107;
35526     +    _LEAF_  =                    6;
35527     +    P_ORGYN1  =     0.72849462365591;
35528     +    P_ORGYN0  =     0.27150537634408;
35529     +    Q_ORGYN1  =     0.72849462365591;
35530     +    Q_ORGYN0  =     0.27150537634408;
35531     +    V_ORGYN1  =     0.75686274509803;
35532     +    V_ORGYN0  =     0.24313725490196;
35533     +    I_ORGYN  = '1' ;
35534     +    U_ORGYN  =                    1;
35535     +    END;
35536     +  END;
35537     +ELSE DO;
35538     +  _NODE_  =                  105;
35539     +  _LEAF_  =                    7;
35540     +  P_ORGYN1  =     0.15256495669553;
35541     +  P_ORGYN0  =     0.84743504330446;
35542     +  Q_ORGYN1  =     0.15256495669553;
35543     +  Q_ORGYN0  =     0.84743504330446;
35544     +  V_ORGYN1  =     0.15162138475021;
35545     +  V_ORGYN0  =     0.84837861524978;
35546     +  I_ORGYN  = '0' ;
35547     +  U_ORGYN  =                    0;
35548     +  END;
35549     +
35550     +*****  RESIDUALS R_ *************;
35551     +IF  F_ORGYN  NE '1'
35552     +AND F_ORGYN  NE '0'  THEN DO;
35553     +        R_ORGYN1  = .;
35554     +        R_ORGYN0  = .;
35555     + END;
35556     + ELSE DO;
35557     +       R_ORGYN1  =  -P_ORGYN1 ;
35558     +       R_ORGYN0  =  -P_ORGYN0 ;
35559     +       SELECT( F_ORGYN  );
35560     +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
35561     +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
35562     +       END;
35563     + END;
35564     +
35565     +****************************************************************;
35566     +******          END OF DECISION TREE SCORING CODE         ******;
35567     +****************************************************************;
35568     +
35569     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
35570      run;

NOTE: DATA STEP view saved on file EMWS1.TREE4_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

35571      quit;
35572      filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
35573      filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
35574      *------------------------------------------------------------*;
35575      * Tree4: Scoring VALIDATE data;
35576      *------------------------------------------------------------*;
35577      data EMWS1.Tree4_VALIDATE
35578      / view=EMWS1.Tree4_VALIDATE
35579      ;
35580      set EMWS1.Part_VALIDATE
35581      ;
35582      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas.
35583     +****************************************************************;
35584     +******             DECISION TREE SCORING CODE             ******;
35585     +****************************************************************;
35586     +
35587     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
35588     +LENGTH F_ORGYN  $   12;
35589     +LENGTH I_ORGYN  $   12;
35590     +LENGTH _WARN_  $    4;
35591     +
35592     +******              LABELS FOR NEW VARIABLES              ******;
35593     +label _NODE_ = 'Node' ;
35594     +label _LEAF_ = 'Leaf' ;
35595     +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
35596     +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
35597     +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
35598     +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
35599     +label V_ORGYN1 = 'Validated: ORGYN=1' ;
35600     +label V_ORGYN0 = 'Validated: ORGYN=0' ;
35601     +label R_ORGYN1 = 'Residual: ORGYN=1' ;
35602     +label R_ORGYN0 = 'Residual: ORGYN=0' ;
35603     +label F_ORGYN = 'From: ORGYN' ;
35604     +label I_ORGYN = 'Into: ORGYN' ;
35605     +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
35606     +label _WARN_ = 'Warnings' ;
35607     +
35608     +
35609     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
35610     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
35611     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
35612     +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
35613     +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
35614     +
35615     +
35616     +_ARBFMT_12 = PUT( ORGYN , BEST12.);
35617     + %DMNORMCP( _ARBFMT_12, F_ORGYN );
35618     +
35619     +******             ASSIGN OBSERVATION TO NODE             ******;
35620     +IF  NOT MISSING(AGE ) AND
35621     +  AGE  <                 44.5 THEN DO;
35622     +  IF  NOT MISSING(AFFL ) AND
35623     +    AFFL  <                 10.5 THEN DO;
35624     +    _ARBFMT_1 = PUT( GENDER , $1.);
35625     +     %DMNORMIP( _ARBFMT_1);
35626     +    IF _ARBFMT_1 IN ('F' ) THEN DO;
35627     +      IF  NOT MISSING(AFFL ) AND
35628     +        AFFL  <                  5.5 THEN DO;
35629     +        _NODE_  =                  110;
35630     +        _LEAF_  =                    1;
35631     +        P_ORGYN1  =             0.265625;
35632     +        P_ORGYN0  =             0.734375;
35633     +        Q_ORGYN1  =             0.265625;
35634     +        Q_ORGYN0  =             0.734375;
35635     +        V_ORGYN1  =     0.31914893617021;
35636     +        V_ORGYN0  =     0.68085106382978;
35637     +        I_ORGYN  = '0' ;
35638     +        U_ORGYN  =                    0;
35639     +        END;
35640     +      ELSE DO;
35641     +        IF  NOT MISSING(AFFL ) AND
35642     +                           9.5 <= AFFL  THEN DO;
35643     +          _NODE_  =                  113;
35644     +          _LEAF_  =                    4;
35645     +          P_ORGYN1  =     0.69565217391304;
35646     +          P_ORGYN0  =     0.30434782608695;
35647     +          Q_ORGYN1  =     0.69565217391304;
35648     +          Q_ORGYN0  =     0.30434782608695;
35649     +          V_ORGYN1  =     0.72727272727272;
35650     +          V_ORGYN0  =     0.27272727272727;
35651     +          I_ORGYN  = '1' ;
35652     +          U_ORGYN  =                    1;
35653     +          END;
35654     +        ELSE DO;
35655     +          IF  NOT MISSING(AGE ) AND
35656     +                            39.5 <= AGE  THEN DO;
35657     +            _NODE_  =                  115;
35658     +            _LEAF_  =                    3;
35659     +            P_ORGYN1  =      0.3763440860215;
35660     +            P_ORGYN0  =     0.62365591397849;
35661     +            Q_ORGYN1  =      0.3763440860215;
35662     +            Q_ORGYN0  =     0.62365591397849;
35663     +            V_ORGYN1  =     0.44827586206896;
35664     +            V_ORGYN0  =     0.55172413793103;
35665     +            I_ORGYN  = '0' ;
35666     +            U_ORGYN  =                    0;
35667     +            END;
35668     +          ELSE DO;
35669     +            _NODE_  =                  114;
35670     +            _LEAF_  =                    2;
35671     +            P_ORGYN1  =     0.57926829268292;
35672     +            P_ORGYN0  =     0.42073170731707;
35673     +            Q_ORGYN1  =     0.57926829268292;
35674     +            Q_ORGYN0  =     0.42073170731707;
35675     +            V_ORGYN1  =     0.64347826086956;
35676     +            V_ORGYN0  =     0.35652173913043;
35677     +            I_ORGYN  = '1' ;
35678     +            U_ORGYN  =                    1;
35679     +            END;
35680     +          END;
35681     +        END;
35682     +      END;
35683     +    ELSE DO;
35684     +      _NODE_  =                  109;
35685     +      _LEAF_  =                    5;
35686     +      P_ORGYN1  =     0.21186440677966;
35687     +      P_ORGYN0  =     0.78813559322033;
35688     +      Q_ORGYN1  =     0.21186440677966;
35689     +      Q_ORGYN0  =     0.78813559322033;
35690     +      V_ORGYN1  =     0.22110552763819;
35691     +      V_ORGYN0  =      0.7788944723618;
35692     +      I_ORGYN  = '0' ;
35693     +      U_ORGYN  =                    0;
35694     +      END;
35695     +    END;
35696     +  ELSE DO;
35697     +    _NODE_  =                  107;
35698     +    _LEAF_  =                    6;
35699     +    P_ORGYN1  =     0.72849462365591;
35700     +    P_ORGYN0  =     0.27150537634408;
35701     +    Q_ORGYN1  =     0.72849462365591;
35702     +    Q_ORGYN0  =     0.27150537634408;
35703     +    V_ORGYN1  =     0.75686274509803;
35704     +    V_ORGYN0  =     0.24313725490196;
35705     +    I_ORGYN  = '1' ;
35706     +    U_ORGYN  =                    1;
35707     +    END;
35708     +  END;
35709     +ELSE DO;
35710     +  _NODE_  =                  105;
35711     +  _LEAF_  =                    7;
35712     +  P_ORGYN1  =     0.15256495669553;
35713     +  P_ORGYN0  =     0.84743504330446;
35714     +  Q_ORGYN1  =     0.15256495669553;
35715     +  Q_ORGYN0  =     0.84743504330446;
35716     +  V_ORGYN1  =     0.15162138475021;
35717     +  V_ORGYN0  =     0.84837861524978;
35718     +  I_ORGYN  = '0' ;
35719     +  U_ORGYN  =                    0;
35720     +  END;
35721     +
35722     +*****  RESIDUALS R_ *************;
35723     +IF  F_ORGYN  NE '1'
35724     +AND F_ORGYN  NE '0'  THEN DO;
35725     +        R_ORGYN1  = .;
35726     +        R_ORGYN0  = .;
35727     + END;
35728     + ELSE DO;
35729     +       R_ORGYN1  =  -P_ORGYN1 ;
35730     +       R_ORGYN0  =  -P_ORGYN0 ;
35731     +       SELECT( F_ORGYN  );
35732     +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
35733     +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
35734     +       END;
35735     + END;
35736     +
35737     +****************************************************************;
35738     +******          END OF DECISION TREE SCORING CODE         ******;
35739     +****************************************************************;
35740     +
35741     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
35742      run;

NOTE: DATA STEP view saved on file EMWS1.TREE4_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

35743      quit;
35744      filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
35745      filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
35746      *------------------------------------------------------------*;
35747      * Tree4: Scoring TEST data;
35748      *------------------------------------------------------------*;
35749      data EMWS1.Tree4_TEST
35750      / view=EMWS1.Tree4_TEST
35751      ;
35752      set EMWS1.Part_TEST
35753      ;
35754      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas.
35755     +****************************************************************;
35756     +******             DECISION TREE SCORING CODE             ******;
35757     +****************************************************************;
35758     +
35759     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
35760     +LENGTH F_ORGYN  $   12;
35761     +LENGTH I_ORGYN  $   12;
35762     +LENGTH _WARN_  $    4;
35763     +
35764     +******              LABELS FOR NEW VARIABLES              ******;
35765     +label _NODE_ = 'Node' ;
35766     +label _LEAF_ = 'Leaf' ;
35767     +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
35768     +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
35769     +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
35770     +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
35771     +label V_ORGYN1 = 'Validated: ORGYN=1' ;
35772     +label V_ORGYN0 = 'Validated: ORGYN=0' ;
35773     +label R_ORGYN1 = 'Residual: ORGYN=1' ;
35774     +label R_ORGYN0 = 'Residual: ORGYN=0' ;
35775     +label F_ORGYN = 'From: ORGYN' ;
35776     +label I_ORGYN = 'Into: ORGYN' ;
35777     +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
35778     +label _WARN_ = 'Warnings' ;
35779     +
35780     +
35781     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
35782     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
35783     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
35784     +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
35785     +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
35786     +
35787     +
35788     +_ARBFMT_12 = PUT( ORGYN , BEST12.);
35789     + %DMNORMCP( _ARBFMT_12, F_ORGYN );
35790     +
35791     +******             ASSIGN OBSERVATION TO NODE             ******;
35792     +IF  NOT MISSING(AGE ) AND
35793     +  AGE  <                 44.5 THEN DO;
35794     +  IF  NOT MISSING(AFFL ) AND
35795     +    AFFL  <                 10.5 THEN DO;
35796     +    _ARBFMT_1 = PUT( GENDER , $1.);
35797     +     %DMNORMIP( _ARBFMT_1);
35798     +    IF _ARBFMT_1 IN ('F' ) THEN DO;
35799     +      IF  NOT MISSING(AFFL ) AND
35800     +        AFFL  <                  5.5 THEN DO;
35801     +        _NODE_  =                  110;
35802     +        _LEAF_  =                    1;
35803     +        P_ORGYN1  =             0.265625;
35804     +        P_ORGYN0  =             0.734375;
35805     +        Q_ORGYN1  =             0.265625;
35806     +        Q_ORGYN0  =             0.734375;
35807     +        V_ORGYN1  =     0.31914893617021;
35808     +        V_ORGYN0  =     0.68085106382978;
35809     +        I_ORGYN  = '0' ;
35810     +        U_ORGYN  =                    0;
35811     +        END;
35812     +      ELSE DO;
35813     +        IF  NOT MISSING(AFFL ) AND
35814     +                           9.5 <= AFFL  THEN DO;
35815     +          _NODE_  =                  113;
35816     +          _LEAF_  =                    4;
35817     +          P_ORGYN1  =     0.69565217391304;
35818     +          P_ORGYN0  =     0.30434782608695;
35819     +          Q_ORGYN1  =     0.69565217391304;
35820     +          Q_ORGYN0  =     0.30434782608695;
35821     +          V_ORGYN1  =     0.72727272727272;
35822     +          V_ORGYN0  =     0.27272727272727;
35823     +          I_ORGYN  = '1' ;
35824     +          U_ORGYN  =                    1;
35825     +          END;
35826     +        ELSE DO;
35827     +          IF  NOT MISSING(AGE ) AND
35828     +                            39.5 <= AGE  THEN DO;
35829     +            _NODE_  =                  115;
35830     +            _LEAF_  =                    3;
35831     +            P_ORGYN1  =      0.3763440860215;
35832     +            P_ORGYN0  =     0.62365591397849;
35833     +            Q_ORGYN1  =      0.3763440860215;
35834     +            Q_ORGYN0  =     0.62365591397849;
35835     +            V_ORGYN1  =     0.44827586206896;
35836     +            V_ORGYN0  =     0.55172413793103;
35837     +            I_ORGYN  = '0' ;
35838     +            U_ORGYN  =                    0;
35839     +            END;
35840     +          ELSE DO;
35841     +            _NODE_  =                  114;
35842     +            _LEAF_  =                    2;
35843     +            P_ORGYN1  =     0.57926829268292;
35844     +            P_ORGYN0  =     0.42073170731707;
35845     +            Q_ORGYN1  =     0.57926829268292;
35846     +            Q_ORGYN0  =     0.42073170731707;
35847     +            V_ORGYN1  =     0.64347826086956;
35848     +            V_ORGYN0  =     0.35652173913043;
35849     +            I_ORGYN  = '1' ;
35850     +            U_ORGYN  =                    1;
35851     +            END;
35852     +          END;
35853     +        END;
35854     +      END;
35855     +    ELSE DO;
35856     +      _NODE_  =                  109;
35857     +      _LEAF_  =                    5;
35858     +      P_ORGYN1  =     0.21186440677966;
35859     +      P_ORGYN0  =     0.78813559322033;
35860     +      Q_ORGYN1  =     0.21186440677966;
35861     +      Q_ORGYN0  =     0.78813559322033;
35862     +      V_ORGYN1  =     0.22110552763819;
35863     +      V_ORGYN0  =      0.7788944723618;
35864     +      I_ORGYN  = '0' ;
35865     +      U_ORGYN  =                    0;
35866     +      END;
35867     +    END;
35868     +  ELSE DO;
35869     +    _NODE_  =                  107;
35870     +    _LEAF_  =                    6;
35871     +    P_ORGYN1  =     0.72849462365591;
35872     +    P_ORGYN0  =     0.27150537634408;
35873     +    Q_ORGYN1  =     0.72849462365591;
35874     +    Q_ORGYN0  =     0.27150537634408;
35875     +    V_ORGYN1  =     0.75686274509803;
35876     +    V_ORGYN0  =     0.24313725490196;
35877     +    I_ORGYN  = '1' ;
35878     +    U_ORGYN  =                    1;
35879     +    END;
35880     +  END;
35881     +ELSE DO;
35882     +  _NODE_  =                  105;
35883     +  _LEAF_  =                    7;
35884     +  P_ORGYN1  =     0.15256495669553;
35885     +  P_ORGYN0  =     0.84743504330446;
35886     +  Q_ORGYN1  =     0.15256495669553;
35887     +  Q_ORGYN0  =     0.84743504330446;
35888     +  V_ORGYN1  =     0.15162138475021;
35889     +  V_ORGYN0  =     0.84837861524978;
35890     +  I_ORGYN  = '0' ;
35891     +  U_ORGYN  =                    0;
35892     +  END;
35893     +
35894     +*****  RESIDUALS R_ *************;
35895     +IF  F_ORGYN  NE '1'
35896     +AND F_ORGYN  NE '0'  THEN DO;
35897     +        R_ORGYN1  = .;
35898     +        R_ORGYN0  = .;
35899     + END;
35900     + ELSE DO;
35901     +       R_ORGYN1  =  -P_ORGYN1 ;
35902     +       R_ORGYN0  =  -P_ORGYN0 ;
35903     +       SELECT( F_ORGYN  );
35904     +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
35905     +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
35906     +       END;
35907     + END;
35908     +
35909     +****************************************************************;
35910     +******          END OF DECISION TREE SCORING CODE         ******;
35911     +****************************************************************;
35912     +
35913     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
35914      run;

NOTE: DATA STEP view saved on file EMWS1.TREE4_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

35915      quit;
35916      filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
35918      proc sort data=WORK.EM_USER_REPORT;
35919      by ID VIEW;
35920      run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

35921      *------------------------------------------------------------*;
35922      * Tree4: Computing metadata for TRAIN data;
35923      *------------------------------------------------------------*;

36332      data WORK.MODELTEMP_INFO;
36333      set EMWS1.Tree4_EMINFO;
36334      where DATA='Tree4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
36335      run;

NOTE: There were 0 observations read from the data set EMWS1.TREE4_EMINFO.
      WHERE (DATA='Tree4') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

36336      data EMWS1.Tree4_EMINFO;
36337      length TARGET KEY $32 DATA $43;
36338      input TARGET KEY DATA $;
36339      cards;

NOTE: The data set EMWS1.TREE4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

36343      run;
36344      data EMWS1.Tree4_EMINFO;
36345      set EMWS1.Tree4_EMINFO WORK.MODELTEMP_INFO;
36346      run;

NOTE: There were 3 observations read from the data set EMWS1.TREE4_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

36347      proc sort data = EMWS1.Tree4_EMINFO NOTHREADS;
36348      by TARGET KEY;
36349      run;

NOTE: There were 3 observations read from the data set EMWS1.TREE4_EMINFO.
NOTE: The data set EMWS1.TREE4_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

36350      proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
36351      by TARGET KEY;
36352      run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

36353      proc sort data = EMWS1.Tree4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
36354      by TARGET KEY;
36355      run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE4_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

36356      data EMWS1.Tree4_EMINFO;
36357      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
36358      by TARGET KEY;
36359      run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE4_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

36360      proc datasets lib=work nolist;
36361      delete TEMP_INFO SORTEDEMINFO;
36362      run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
36363      quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

36364      data EMWS1.Tree4_EMOUTFIT;
36365      set EMWS1.Tree4_EMOUTFIT;
36366      length TargetLabel $200;
36367      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
36368      run;

NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE4_EMOUTFIT.
NOTE: The data set EMWS1.TREE4_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

36369      proc sort data=EMWS1.Tree4_EMREPORTFIT nothreads;
36370      by TARGET;
36371      run;

NOTE: There were 8 observations read from the data set EMWS1.TREE4_EMREPORTFIT.
NOTE: The data set EMWS1.TREE4_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

36372      %let _EMwarndup = 0;
36373      %let _EMtargetdup =;
36374      %let _EMASEtargetdup =;
36375      data _null_;
36376      set EMWS1.Tree4_EMOUTFIT;
36377      if .<_ASE_<0.000001 then do;
36378      call symput('_EMwarndup', '1');
36379      call symput('_EMtargetdup', target);
36380      call symput('_EMASEtargetdup', put(_ASE_, best.));
36381      end;
36382      run;

NOTE: There were 1 observations read from the data set EMWS1.TREE4_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

36383      %let EMEXCEPTIONSTRING=;
36384      *------------------------------------------------------------*;
36385      * REPORT: Tree4;
36386      *------------------------------------------------------------*;
36387      %let EM_ACTION = REPORT;
36388      %let syscc = 0;
36389      %macro main;
36390      
36391        %if %upcase(&EM_ACTION) = CREATE %then %do;
36392          filename temp catalog 'sashelp.emmodl.tree_create.source';
36393          %include temp;
36394          filename temp;
36395      
36396          %em_tree_create;
36397        %end;
36398      
36399         %else
36400         %if %upcase(&EM_ACTION) = TRAIN %then %do;
36401      
36402             filename temp catalog 'sashelp.emmodl.tree_train.source';
36403             %include temp;
36404             filename temp;
36405             %em_tree_train;
36406         %end;
36407      
36408        %else
36409        %if %upcase(&EM_ACTION) = SCORE %then %do;
36410          filename temp catalog 'sashelp.emmodl.tree_score.source';
36411          %include temp;
36412          filename temp;
36413      
36414          %em_tree_score;
36415      
36416        %end;
36417      
36418        %else
36419        %if %upcase(&EM_ACTION) = REPORT %then %do;
36420      
36421             filename temp catalog 'sashelp.emmodl.tree_report.source';
36422             %include temp;
36423             filename temp;
36424      
36425             %em_tree_report;
36426         %end;
36427      
36428        %else
36429        %if %upcase(&EM_ACTION) = OPENINT %then %do;
36430      
36431             filename temp catalog 'sashelp.emmodl.tree_actions.source';
36432             %include temp;
36433             filename temp;
36434             %EM_TREE_OPENTREEVIEWER;
36435      
36436         %end;
36437      
36438        %else
36439        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
36440      
36441             filename temp catalog 'sashelp.emmodl.tree_actions.source';
36442             %include temp;
36443             filename temp;
36444             %EM_TREE_CLOSETREEVIEWER;
36445      
36446         %end;
36447      
36448      
36449         %doendm:
36450      %mend main;
36451      
36452      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
36454     +%macro em_tree_makePlotDs( multipleTar= );
36456     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
36457     +  %EM_GETNAME(key=OUTNODES, type=DATA);
36458     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
36459     +  %EM_GETNAME(key=OUTRULES, type=DATA);
36461     +  /* determine if validation statistics will be displayed */
36462     +  %let validflag=N;
36463     +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
36464     +    /* determine if validation data exists */
36465     +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
36466     +      %let validflag=Y;
36467     +    %end;
36468     +  %end;
36470     +   /* retrieve name of decmeta even in presence of multiple targets */
36471     +   %let decmeta = ;
36472     +   %if &EM_DEC_DECMETA eq %then %do;
36473     +     data _Target;
36474     +       set &em_data_variableset;
36475     +       where ROLE='TARGET' and USE in('D', 'Y');
36476     +       keep NAME;
36477     +     run;
36478     +     proc sort data=_Target;
36479     +       by NAME;
36480     +     run;
36481     +     proc sort data=EM_TARGETDECINFO;
36482     +       by TARGET;
36483     +     run;
36484     +     data _Target;
36485     +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
36486     +       by NAME;
36487     +       if _a then do;
36488     +         call symput('decmeta', trim(DECMETA));
36489     +       end;
36490     +     run;
36491     +     proc delete data=_Target;run;
36492     +   %end;
36493     +   %else %let decmeta = &EM_DEC_DECMETA;
36496     +  /* retrieve targetEvent from decmeta */
36497     +  %let targetEvent=;
36498     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
36499     +    %if %sysfunc(exist(&DECMETA)) %then %do;
36500     +      data _null_;
36501     +       set &DECMETA(where=(_TYPE_="TARGET"));
36502     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
36503     +      run;
36504     +    %end;
36505     +  %end;
36507     +  /* retrieve predicted var for targetEvent from decmeta */
36508     +  %let predTarget=;
36509     +  %let predLvl=;
36510     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
36511     +    %if %sysfunc(exist(&DECMETA)) %then %do;
36512     +      data _null_;
36513     +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
36514     +       call symput('predTarget', strip(VARIABLE));
36515     +       call symput('predLvl', strip(LEVEL));
36516     +      run;
36517     +    %end;
36518     +  %end;
36519     +  %else %do;
36520     +    %if %sysfunc(exist(&DECMETA)) %then %do;
36521     +      data _null_;
36522     +       set &DECMETA(where=(_TYPE_="PREDICTED"));
36523     +       call symput('predTarget', strip(VARIABLE));
36524     +      run;
36525     +    %end;
36526     +  %end;
36528     +  /* create BelowText value */
36529     +  data belowtext;
36530     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
36531     +    keep node belowtext;
36532     +  run;
36534     +  /* replace belowtext with variable label if it exists */
36535     +  data belowtext2;
36536     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
36537     +    keep node belowtextlbl;
36538     +  run;
36540     +  proc sort data=belowtext; by node; run;
36541     +  proc sort data=belowtext2; by node; run;
36543     +  data belowtext;
36544     +    merge belowtext belowtext2(in=_a);
36545     +    by node;
36546     +    if _a then belowtext=belowtextlbl;
36547     +    keep node belowtext;
36548     +  run;
36550     +  /* create AboveText value */
36551     +  data abovetext;
36552     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
36553     +  run;
36554     +  proc sort data=abovetext; by node numeric_value; run;
36556     +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
36557     +  data abovetext;
36558     +    set abovetext(rename=(node=parent));
36559     +    by parent numeric_value;
36560     +    retain abovetext tempstring flag branch origval origchar ;
36561     +    length abovetext $256;
36562     +    length tempstring origchar $64;
36564     +    if STAT in ("INTERVAL", "ORDINAL") then do;
36565     +      if first.parent then do;
36566     +        if missing(character_value) then do;
36567     +          numeric_value = round(numeric_value, &sp_precision);
36568     +          abovetext = "< "||strip(NUMERIC_VALUE);
36569     +          branch = 1;
36570     +          origval = numeric_value;
36571     +          output;
36572     +        end;
36573     +        else do;
36574     +          abovetext = "< "||strip(CHARACTER_VALUE);
36575     +          branch = 1;
36576     +          origchar = character_value;
36577     +          output;
36578     +        end;
36580     +        if first.parent AND last.parent then do;
36581     +          if missing(character_value) then do;
36582     +            numeric_value = round(numeric_value, &sp_precision);
36583     +            branch = branch + 1;
36584     +            abovetext = ">= "||strip(NUMERIC_VALUE);
36585     +            output;
36586     +          end;
36587     +          else do;
36588     +            branch = branch + 1;
36589     +            abovetext = ">= "||strip(CHARACTER_VALUE);
36590     +            output;
36591     +          end;
36592     +        end;
36593     +      end;
36594     +      else if last.parent then do;
36595     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
36596     +          if missing(character_value) then do;
36597     +            numeric_value = round(numeric_value, &sp_precision);
36598     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
36599     +          end;
36600     +          else do;
36601     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
36602     +          end;
36603     +          branch = branch + 1;
36604     +          output;
36606     +          if missing(character_value) then do;
36607     +            numeric_value = round(numeric_value, &sp_precision);
36608     +            abovetext = ">= "||strip(NUMERIC_VALUE);
36609     +          end;
36610     +          else do;
36611     +            abovetext = ">= "||strip(CHARACTER_VALUE);
36612     +          end;
36613     +          branch = branch + 1;
36614     +          output;
36615     +        end;
36616     +        else do;
36617     +          if missing(character_value) then do;
36618     +            numeric_value = round(numeric_value, &sp_precision);
36619     +            abovetext = ">= "||strip(NUMERIC_VALUE);
36620     +          end;
36621     +          else do;
36622     +            abovetext = ">= "||strip(CHARACTER_VALUE);
36623     +          end;
36624     +          branch = branch + 1;
36625     +          output;
36626     +        end;
36627     +      end;
36628     +      else do;
36629     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
36630     +          if missing(character_value) then do;
36631     +            numeric_value = round(numeric_value,&sp_precision);
36632     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
36633     +            origval = numeric_value;
36634     +          end;
36635     +          else do;
36636     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
36637     +            origchar = character_value;
36638     +          end;
36639     +          branch = branch + 1;
36640     +          output;
36642     +        end;
36643     +        else do;
36644     +          if missing(character_value) then do;
36645     +            numeric_value = round(numeric_value, &sp_precision);
36646     +            abovetext = ">= "||strip(NUMERIC_VALUE);
36647     +            origval = numeric_value;
36648     +          end;
36649     +          else do;
36650     +            abovetext = ">= "||strip(CHARACTER_VALUE);
36651     +            origval = character_value;
36652     +          end;
36653     +          branch = branch + 1;
36654     +          output;
36655     +        end;
36656     +      end;
36657     +    end;
36658     +    else do;
36659     +       if first.numeric_value then do;
36660     +         flag = 0;
36661     +         abovetext = strip(CHARACTER_VALUE);
36662     +         branch = numeric_value;
36663     +         if first.numeric_value AND last.numeric_value then do;
36664     +           output;
36665     +         end;
36666     +       end;
36667     +       else if last.numeric_value then do;
36668     +         if flag=0 then do;
36669     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
36670     +           length = length(strip(tempstring));
36671     +           if length < 32 then do;
36672     +             abovetext = strip(tempstring);
36673     +           end;
36674     +           else do;
36675     +             abovetext = strip(abovetext)||", ...";
36676     +             flag = 1;
36677     +           end;
36678     +         end;
36679     +         branch = numeric_value;
36680     +         output;
36681     +       end;
36682     +       else do;
36683     +         if flag=0 then do;
36684     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
36685     +           length = length(strip(tempstring));
36686     +           if length < 32 then do;
36687     +             abovetext = strip(tempstring);
36688     +           end;
36689     +           else do;
36690     +             abovetext = strip(abovetext)||", ...";
36691     +             flag=1;
36692     +           end;
36693     +         end;
36694     +         branch = numeric_value;
36695     +       end;
36696     +    end;
36697     +    keep parent branch abovetext;
36698     +  run;
36700     +  /* Missing value to abovetext */
36701     +  data tempmissing;
36702     +    set &EM_USER_OUTRULES;
36703     +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
36704     +    rename node=parent numeric_value=branch character_value=misschar;
36705     +  run;
36708     +  proc sort data=abovetext; by parent branch; run;
36709     +  proc sort data=tempmissing; by parent branch; run;
36710     +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
36712     +  data tempoutnodes;
36713     +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
36714     +    by parent branch;
36715     +    length traintotal validtotal 8;
36716     +    retain traintotal validtotal;
36718     +    if _a then do;
36719     +      if ^MISSING(abovetext) then do;
36720     +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
36721     +      end;
36722     +      else do;
36723     +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
36724     +      end;
36725     +    end;
36726     +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
36728     +    if node=1 then do;
36729     +      traintotal = N;
36730     +      validtotal=VN;
36731     +    end;
36733     +    drop role rank stat misschar belowtext;
36734     +  run;
36735     +  proc sort data=tempoutnodes; by node; run;
36736     +  proc sort data=belowtext; by node; run;
36738     +  data tempoutnodes;
36739     +    merge tempoutnodes belowtext;
36740     +    by node;
36742     +  run;
36744     +  /* determine if adjusted counts exists; if so, use these vs true counts */
36745     +  %let adjusted = N;
36746     +  %let npriors = 0;
36747     +  data _null_ ;
36748     +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
36749     +    if eof then do ;
36750     +      call symput("npriors" , strip(put(_N_,best.))) ;
36751     +    end;
36752     +  run;
36753     +  %if &npriors gt 0 %then %let adjusted=Y;
36756     +  /* create a table with targetUsed and targetLevel columns for each node */
36757     +  data temptarmeta;
36758     +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
36759     +    %if &multipleTar eq N %then %do;
36760     +      AND USE in ('D', 'Y')
36761     +    %end;
36762     +    ));
36763     +    length TARGET $32;
36764     +    Target=name;
36765     +    keep target level;
36766     +  run;
36768     +  %if &multipleTar eq Y %then %do;
36769     +    data temptargetused;
36770     +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
36771     +      keep node target;
36772     +    run;
36773     +    proc sort data=temptargetused; by target; run;
36774     +    proc sort data=temptarmeta; by target; run;
36775     +    data temptargetused;
36776     +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
36777     +      by target;
36778     +      if _a and _b;
36779     +    run;
36780     +  %end;
36781     +  %else %do;
36782     +    data temptargetused;
36783     +      set &EM_USER_OUTSTATS;
36784     +      length target $32 tarlevel $10;
36785     +      target="%EM_TARGET";
36786     +      tarlevel="%EM_TARGET_LEVEL";
36787     +      keep node target tarlevel;
36788     +    run;
36789     +    proc sort data=temptargetused nodupkey; by node; run;
36790     +  %end;
36792     +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
36793     +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
36794     +  proc sort data=temptargetused; by node; run;
36797     +  /* create tables for all interval targets as well as all class targets */
36798     +  data tempinterval tempclass;
36799     +    merge tempoutstats temptargetused( rename=(target=targetused));
36800     +    by node;
36801     +    %if "&multipleTar" eq "Y" %then %do;
36802     +      if ((missing(Target)) OR (target=targetused ));
36803     +    %end;
36805     +    if tarlevel="INTERVAL" then output tempinterval;
36806     +    else output tempclass;
36807     +  run;
36809     +  /* initialize intTarget and classTarget flags */
36810     +  %let em_intNobs =0;
36811     +  %let em_classNobs = 0;
36812     +  %let em_intTarget= N;
36813     +  %let em_classTarget= N;
36815     +  proc sql;
36816     +    reset noprint;
36817     +    select count(*) into :em_intNobs from tempinterval;
36818     +  quit;
36819     +  proc sql;
36820     +    reset noprint;
36821     +    select count(*) into :em_classNobs from tempclass;
36822     +  quit;
36824     +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
36825     +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
36827     +  /* retrieve all information for interval targets */
36828     +  %if &em_intTarget eq Y %then %do;
36830     +    /* determine if leaf variable exists */
36831     +    %let dsid=%sysfunc(open(tempinterval,i));
36832     +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
36833     +    %let rc=%sysfunc(close(&dsid));
36835     +    proc transpose data=tempinterval
36836     +      %if &leafexists %then %do;
36837     +        (drop=leaf)
36838     +      %end;
36839     +      %if &validexist %then %do;
36840     +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
36841     +      %end;
36842     +      %else %do;
36843     +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
36844     +      %end;
36845     +      by node;
36846     +      id statname;
36847     +    run;
36848     +    data tempinterval;
36849     +      set tempinterval;
36850     +      if missing(N) then delete;
36851     +    run;
36852     +  %end;
36854     +  /* retrieve all information for class targets */
36855     +  %if &em_classTarget eq Y %then %do;
36856     +    proc sort data=tempclass; by node category; run;
36857     +    %if &validflag eq N %then %do;
36858     +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
36859     +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
36860     +    %end;
36861     +    %else %do;
36862     +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
36863     +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
36864     +    %end;
36865     +      set tempclass;
36867     +      %if &validflag eq N %then %do;
36868     +        %if "&adjusted" eq "N" %then %do;
36869     +          if statname="N" then output tempn;
36870     +        %end;
36871     +        %else %do;
36872     +          if statname="NPRIORS" then output tempn;
36873     +        %end;
36874     +        else if statname="PREDICTION" then output temppredict;
36875     +        else if statname="PROBABILITY" then output tempprob;
36876     +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
36877     +        else if statname="ALTERNATIVE LOSS" then output temploss;
36878     +      %end;
36879     +      %else %do;
36880     +        %if "&adjusted" eq "N" %then %do;
36881     +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
36882     +        %end;
36883     +        %else %do;
36884     +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
36885     +        %end;
36886     +        else if statname="PREDICTION" then output temppredict;
36887     +        else if statname="PROBABILITY" then output tempprob;
36888     +        else if statname="VALID: PROBABILITY" then output tempvprob;
36889     +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
36890     +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
36891     +      %end;
36892     +    run;
36895     +    /* determine if profit/loss exists in tempprofit */
36896     +    %let em_profitflag=0;
36897     +    %let em_lossflag=0;
36898     +    proc sql;
36899     +      reset noprint;
36900     +      select count(*) into :em_profitflag from tempprofit;
36901     +    quit;
36902     +    proc sql;
36903     +      reset noprint;
36904     +      select count(*) into :em_lossflag from temploss;
36905     +    quit;
36907     +    %if &validFlag eq Y %then %do;
36908     +      proc transpose data=tempn
36909     +        %if "&adjusted" eq "N" %then %do;
36910     +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
36911     +        %end;
36912     +        %else %do;
36913     +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
36914     +        %end;
36915     +        by node;
36916     +        id statname;
36917     +      run;
36918     +      %if &em_profitflag ne 0 %then %do;
36919     +        proc transpose data=tempprofit out=tempprofit;
36920     +          by node category;
36921     +          id statname ;
36922     +        run;
36923     +      %end;
36924     +      %if &em_lossflag ne 0 %then %do;
36925     +        proc transpose data=temploss out=temploss;
36926     +          by node category;
36927     +          id statname ;
36928     +        run;
36929     +      %end;
36930     +      data tempprob;
36931     +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
36932     +        by node
36933     +        %if &multipleTar eq Y %then %do;
36934     +          target
36935     +        %end;
36936     +        category;
36937     +      run;
36938     +    %end;
36940     +    /* store percentcorrect value */
36941     +    data temppredict;
36942     +      merge tempprob temppredict(in=_a);
36943     +      by node category;
36944     +      if _a then do;
36945     +        percentCorrect = statvalue;
36946     +        %if &validFlag eq Y %then %do;
36947     +          vpercentCorrect= vstatvalue;
36948     +        %end;
36949     +      end;
36950     +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
36951     +      %if &validFlag eq Y %then %do;
36952     +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
36953     +      %end;
36954     +      ;
36955     +      if missing(percentCorrect) then delete;
36956     +      drop target;
36957     +    run;
36959     +    /* build profittext */
36960     +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
36961     +      data tempprofittext(keep= node profittext profitloss);
36962     +        length profittext $800 profitloss 8.;
36963     +        retain profittext profitloss;
36965     +        merge tempprob
36966     +        %if &em_profitflag ne 0 %then %do;
36967     +          tempprofit
36968     +        %end;
36969     +        %else %if &em_lossflag ne 0 %then %do;
36970     +          temploss
36971     +        %end;
36972     +        ;
36973     +        by node category;
36975     +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
36976     +        %let profittype = &EM_PROPERTY_PROFITLOSS;
36977     +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
36978     +          %let profittype = ALL;
36979     +        %end;
36981     +        /* create the profitloss variable for nodecolor if selected */
36982     +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
36984     +        %if "&profittype" eq "ALL" %then %do;
36985     +          if strip(CATEGORY)="&targetEvent" then do;
36986     +            profitloss=statvalue;
36987     +          end;
36988     +          if first.node then do;
36989     +            %if &validFlag eq N %then %do;
36990     +             %if &em_profitflag ne 0 %then %do;
36991     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
36992     +             %end;
36993     +             %if &em_lossflag ne 0 %then %do;
36994     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
36995     +             %end;
36996     +            %end;
36997     +            %else %do;
36998     +             %if &em_profitflag ne 0 %then %do;
36999     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
36999    !+14.&EM_PROPERTY_SPLITPRECISION);
37000     +             %end;
37001     +             %if &em_lossflag ne 0 %then %do;
37002     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
37003     +             %end;
37004     +            %end;
37005     +          end;
37006     +          else if last.node then do;
37007     +            %if &validFlag eq N %then %do;
37008     +             %if &em_profitflag ne 0 %then %do;
37009     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
37010     +             %end;
37011     +             %if &em_lossflag ne 0 %then %do;
37012     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
37013     +             %end;
37014     +             /*if CATEGORY="&targetEvent" then do;
37015     +               profitloss=statvalue;
37016     +             end;*/
37017     +            %end;
37018     +            %else %do;
37019     +             %if &em_profitflag ne 0 %then %do;
37020     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
37020    !+14.&EM_PROPERTY_SPLITPRECISION);
37021     +                if CATEGORY="&targetEvent" then do;
37022     +                 profitloss=ALTERNATIVE_PROFIT;
37023     +                end;
37024     +             %end;
37025     +             %if &em_lossflag ne 0 %then %do;
37026     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
37026    !+14.&EM_PROPERTY_SPLITPRECISION);
37027     +                if CATEGORY="&targetEvent" then do;
37028     +                  profitloss=ALTERNATIVE_LOSS;
37029     +                end;
37030     +             %end;
37031     +            %end;
37032     +            output;
37033     +          end;
37034     +          else do;
37035     +            %if &validFlag eq N %then %do;
37036     +             %if &em_profitflag ne 0 %then %do;
37037     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
37038     +             %end;
37039     +             %if &em_lossflag ne 0 %then %do;
37040     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
37041     +             %end;
37042     +            %end;
37043     +            %else %do;
37044     +             %if &em_profitflag ne 0 %then %do;
37045     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
37045    !+14.&EM_PROPERTY_SPLITPRECISION);
37046     +             %end;
37047     +             %if &em_lossflag ne 0 %then %do;
37048     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
37048    !+14.&EM_PROPERTY_SPLITPRECISION);
37049     +             %end;
37050     +            %end;
37051     +          end;
37052     +        %end;
37053     +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
37054     +          if strip(CATEGORY) = "&targetevent" then do;
37055     +            %if &validFlag eq N %then %do;
37056     +             %if &em_profitflag ne 0 %then %do;
37057     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
37058     +             %end;
37059     +             %if &em_lossflag ne 0 %then %do;
37060     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
37061     +             %end;
37062     +             profitloss=statvalue;
37063     +            %end;
37064     +            %else %do;
37065     +             %if &em_profitflag ne 0 %then %do;
37066     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
37066    !+14.&EM_PROPERTY_SPLITPRECISION);
37067     +                profitloss=ALTERNATIVE_PROFIT;
37068     +             %end;
37069     +             %if &em_lossflag ne 0 %then %do;
37070     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
37071     +                profitloss=ALTERNATIVE_LOSS;
37072     +             %end;
37073     +            %end;
37074     +            output;
37075     +          end;
37076     +        %end;
37077     +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
37078     +          if strip(CATEGORY) = "&targetevent" then do;
37079     +            %if &validFlag eq N %then %do;
37080     +             profitloss=statvalue;
37081     +            %end;
37082     +            %else %do;
37083     +             %if &em_profitflag ne 0 %then %do;
37084     +                profitloss=ALTERNATIVE_PROFIT;
37085     +             %end;
37086     +             %if &em_lossflag ne 0 %then %do;
37087     +                profitloss=ALTERNATIVE_LOSS;
37088     +             %end;
37089     +            %end;
37090     +            output;
37091     +          end;
37092     +        %end;
37093     +      run;
37094     +    %end;
37096     +    data tempprob(keep= node probtext);
37097     +      length probtext $800;
37098     +      retain probtext;
37099     +      set tempprob ;
37100     +      by node;
37102     +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
37103     +      %let probtype = &EM_PROPERTY_TARGET;
37104     +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
37105     +        %let probtype = ALL;
37106     +      %end;
37108     +      %if "&probtype" eq "ALL" %then %do;
37109     +        if first.node then do;
37110     +          %if &validFlag eq N %then %do;
37111     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
37112     +          %end;
37113     +          %else %do;
37114     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
37115     +          %end;
37116     +        end;
37117     +        else if last.node then do;
37118     +          %if &validFlag eq N %then %do;
37119     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
37120     +          %end;
37121     +          %else %do;
37122     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
37123     +          %end;
37124     +          output;
37125     +        end;
37126     +        else do;
37127     +          %if &validFlag eq N %then %do;
37128     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
37129     +          %end;
37130     +          %else %do;
37131     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
37132     +          %end;
37133     +        end;
37134     +      %end;
37135     +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
37136     +        if strip(CATEGORY) = "&targetevent" then do;
37137     +          %if &validFlag eq N %then %do;
37138     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
37139     +          %end;
37140     +          %else %do;
37141     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
37142     +          %end;
37143     +          output;
37144     +        end;
37145     +      %end;
37146     +      %else %if "&probtype" eq "NONE" %then %do;
37147     +        if last.node then do;
37148     +          output;
37149     +        end;
37150     +      %end;
37151     +    run;
37152     +  %end;
37154     +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
37156     +  %let oldexists=0;
37157     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
37158     +     data old_tree_plot;
37159     +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
37160     +        rename nodecolor=oldnodecolor;
37161     +     run;
37163     +     proc sort data=old_tree_plot;
37164     +        by node;
37165     +     run;
37167     +     %let oldexists=1;
37168     +  %end;
37170     +  data &EM_USER_TREE_PLOT;
37171     +    length textall $800;
37172     +    merge tempoutnodes temptargetused
37174     +    %if &em_intTarget eq Y %then %do;
37175     +      tempinterval
37176     +    %end;
37178     +    %if &em_classTarget eq Y %then %do;
37180     +      %if &validFlag eq N %then %do;
37181     +        tempn(rename=(statvalue=N))
37182     +      %end;
37183     +      %else %do;
37184     +        tempn
37185     +      %end;
37187     +      temppredict tempprob
37189     +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
37190     +        tempprofittext
37191     +      %end;
37192     +    %end;
37193     +    ;
37194     +    by node;
37196     +    /* build nodetext based on user selection */
37197     +    textall="";
37199     +    %if &em_intTarget eq Y %then %do;
37200     +    if tarlevel="INTERVAL" then do;
37201     +      /* Nodeid */
37202     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
37203     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
37204     +      %end;
37206     +      /* Target identifier if multiple targets are used */
37207     +      %if "&multipleTar" eq "Y" %then %do;
37208     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
37209     +      %end;
37211     +      %if &validFlag eq Y %then %do;
37212     +         /* Column labels displayed in validflag eq Y only */
37213     +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
37214     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
37214    !+ noquote ))";
37215     +         %end;
37217     +         /* Average values */
37218     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
37219     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
37220     +         %end;
37222     +         /* RASE */
37223     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
37224     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
37225     +         %end;
37227     +         /* Count */
37228     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
37229     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
37230     +         %end;
37231     +      %end;
37232     +      %else %do;
37233     +         /* Average values */
37234     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
37235     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
37236     +         %end;
37238     +         /* RASE */
37239     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
37240     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
37241     +         %end;
37243     +         /* Count */
37244     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
37245     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
37246     +         %end;
37247     +      %end;
37249     +      /* nodecolor */
37250     +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
37251     +        nodecolor=PREDICTION;
37252     +      %end;
37253     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
37254     +        nodecolor=RASE;
37255     +      %end;
37256     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
37257     +        nodecolor=1;
37258     +      %end;
37260     +    end;
37261     +    %end;
37262     +    %if &em_classTarget eq Y %then %do;
37263     +    if tarlevel^="INTERVAL" then  do;
37265     +      /* Nodeid */
37266     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
37267     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
37268     +      %end;
37269     +      /* Target identifier if multiple targets are used */
37270     +      %if "&multipleTar" eq "Y" %then %do;
37271     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
37272     +      %end;
37274     +      /* Predicted values */
37275     +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
37276     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
37277     +      %end;
37279     +      /* Column labels displayed in validflag eq Y only */
37280     +      %if "&ValidFlag" eq "Y" %then %do;
37281     +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
37282     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
37282    !+ noquote ))";
37283     +        %end;
37284     +      %end;
37286     +      /* Target Values */
37287     +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
37288     +        textall=strip(textall)||"0A"x||strip(probtext);
37289     +      %end;
37291     +      /* include profit or loss for all target levels */
37292     +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
37293     +        textall=strip(textall)||"0A"x||strip(profittext);
37294     +      %end;
37296     +      %if &validFlag eq N %then %do;
37297     +        /* Percent Correct */
37298     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
37299     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
37300     +        %end;
37302     +         /* Count */
37303     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
37304     +          %if "&adjusted" eq "N" %then %do;
37305     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
37306     +          %end;
37307     +          %else %do;
37308     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
37309     +          %end;
37310     +         %end;
37311     +      %end;
37312     +      %else %do;
37313     +        /* Percent Correct */
37314     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
37315     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
37316     +        %end;
37318     +         /* Count */
37319     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
37320     +          %if "&adjusted" eq "N" %then %do;
37321     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
37322     +          %end;
37323     +          %else %do;
37324     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
37325     +          %end;
37326     +         %end;
37327     +      %end;
37329     +      /* nodecolor */
37330     +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
37331     +       %if &multipleTar ne Y %then %do;
37332     +        nodecolor=&predTarget;
37333     +       %end;
37334     +       %else %do;
37335     +         nodecolor=percentcorrect;
37336     +       %end;
37337     +      %end;
37338     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
37339     +        nodecolor=percentcorrect;
37340     +      %end;
37341     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
37342     +        nodecolor=1;
37343     +      %end;
37344     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
37345     +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
37346     +          nodecolor=percentcorrect;
37347     +        %end;
37348     +        %else %do;
37349     +          nodecolor=profitloss;
37350     +        %end;
37351     +      %end;
37353     +    end;
37354     +    %end;
37355     +    %if &em_intTarget eq Y %then %do;
37356     +     drop  PREDICTION  TARGET TARLEVEL
37357     +     %if &ValidFlag eq Y %then %do;
37358     +         VPREDICTION
37359     +     %end;
37360     +     ;
37361     +    %end;
37362     +    %if &em_classTarget eq Y %then %do;
37363     +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
37364     +     %if &ValidFlag eq Y %then %do;
37365     +         VSTATVALUE
37366     +     %end;
37367     +     ;
37368     +    %end;
37370     +  run;
37372     +  /* add leaf index information to plotds - based on primary target only*/
37373     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
37374     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
37375     +      set &EM_USER_OUTSTATS;
37376     +      if ((statname="PROBABILITY"
37377     +      %if &validexist %then %do;
37378     +       or statname="VALID: PROBABILITY"
37379     +      %end;
37380     +      ) AND (CATEGORY="&TARGETEVENT")
37381     +      %if "&multipleTar" eq "Y" %then %do;
37382     +        AND (Target="%EM_TARGET")
37383     +      %end;
37384     +      );
37385     +    run;
37387     +    %if &validexist %then %do;
37388     +      proc sort data=tempprob; by node; run;
37389     +      %let vpredTarget = V%substr(&predTarget, 2);
37390     +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
37391     +         by node;
37392     +         id statname;
37393     +      run;
37394     +    %end;
37395     +  %end;
37396     +  %else %do;
37397     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
37398     +      set &EM_USER_OUTSTATS;
37399     +      if ((statname="PREDICTION"
37400     +      %if &validexist %then %do;
37401     +       or statname="VALID: PREDICTION"
37402     +      %end;
37403     +      )
37404     +      %if "&multipleTar" eq "Y" %then %do;
37405     +        AND (Target="%EM_TARGET")
37406     +      %end;
37407     +      );
37408     +    run;
37409     +    %if &validexist %then %do;
37410     +      proc sort data=tempprob; by node; run;
37411     +      %let vpredTarget = V%substr(&predTarget, 2);
37412     +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
37413     +         by node;
37414     +         id statname;
37415     +      run;
37416     +    %end;
37417     +  %end;
37419     +  proc sort data=tempprob; by node; run;
37420     +  data tempoutnodes;
37421     +    merge tempoutnodes tempprob;
37422     +    by node;
37423     +  run;
37425     +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
37426     +  data tempnodes;
37427     +    retain traintotal validtotal;
37428     +    set tempnodes(where=(leaf ne . ));
37429     +    tprob=round(&predTarget, .01);
37430     +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
37431     +      percevent_train=round(tprob*100, .01);
37432     +    %end;
37433     +    %else %do;
37434     +      percevent_train=tprob;
37435     +    %end;
37437     +    perc_train=round((n/traintotal)*100, 0.01);
37438     +    /* leafwidth already has a *10 multiplier */
37439     +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
37441     +    %if &validexist %then %do;
37442     +      %let vpredTarget = V%substr(&predTarget,2);
37443     +      vprob=round(&vpredTarget, .01);
37444     +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
37445     +        percevent_valid=round(vprob*100, .01);
37446     +      %end;
37447     +      %else %do;
37448     +        percevent_valid=vprob;
37449     +      %end;
37450     +      perc_valid=round((vn/validtotal)*100, .01);
37451     +    %end;
37453     +    index=_N_;
37454     +    keep node index tprob perc_train percevent_train
37455     +    %if &validexist %then %do;
37456     +        vprob percevent_valid perc_valid
37457     +    %end;
37458     +    ;
37459     +  run;
37460     +  proc sort data=tempnodes; by node; run;
37461     +  data &EM_USER_TREE_PLOT;
37462     +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
37463     +    by node;
37464     +    if missing(node) then delete;
37465     +    %if &oldexists %then %do;
37466     +      if missing(nodecolor) then nodecolor=oldnodecolor;
37467     +      drop oldnodecolor;
37468     +    %end;
37469     +    abovetext = compbl(abovetext);
37471     +    /* add variable labels */
37472     +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
37473     +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
37474     +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
37475     +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
37476     +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
37477     +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
37479     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
37480     +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
37481     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
37482     +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
37483     +          %end;
37484     +          %else %do;
37485     +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
37486     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
37487     +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
37488     +          %end;
37489     +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
37491     +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
37492     +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
37493     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
37494     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
37495     +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
37496     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
37497     +          %end;
37498     +          %else %do;
37499     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
37500     +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
37501     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
37502     +          %end;
37503     +    ;
37504     +  run;
37506     +  /* delete temporary tables */
37507     +  proc datasets lib=work nolist;
37508     +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
37509     +  run;
37511     +%mend em_tree_makePlotDs;
37515     +%macro em_tree_report;
37517     +   /* report properties */
37518     +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
37519     +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
37520     +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
37521     +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
37522     +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
37523     +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
37524     +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
37525     +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
37526     +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
37527     +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
37528     +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
37529     +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
37530     +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
37532     +   %let validexist=0;
37533     +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
37534     +     %let validexist=1;
37535     +   %end;
37537     +   /* determine if multiple targets will be processed */
37538     +   %let em_tree_multipleTargets=N;
37539     +   %let em_tree_numTarget=1;
37540     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
37541     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
37542     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
37543     +         %let em_tree_multipleTargets=N;
37544     +      %end;
37545     +      %else %do;
37546     +        data _null_;
37547     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
37548     +          if eof then
37549     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
37550     +        run;
37552     +        %if &em_tree_numTarget gt 1 %then %do;
37553     +           %let em_tree_multipleTargets=Y;
37554     +        %end;
37555     +     %end;
37556     +   %end;
37558     +  %if "&em_tree_multipleTargets" eq "N" %then %do;
37560     +   /* variable importance */
37561     +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
37562     +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
37564     +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
37565     +     /* and the columns may not be generated                                                                                 */
37566     +     %let em_tree_cvexists=;
37567     +     %let em_tree_surrexists=.;
37568     +     data _null_;
37569     +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
37570     +       if eof then do ;
37571     +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
37572     +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
37573     +       end;
37574     +     run;
37576     +     data &EM_USER_OUTIMPORT;
37577     +         set &EM_USER_OUTIMPORT;
37578     +         /* format columns based on Precison value specified */
37579     +         format importance 15.&EM_PROPERTY_PRECISION
37580     +              %if &validexist %then %do;
37581     +                vimportance ratio 15.&EM_PROPERTY_PRECISION
37582     +              %end;
37583     +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
37584     +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
37585     +              %end;
37586     +         ;
37587     +     run;
37589     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
37590     +     proc print data=&EM_USER_OUTIMPORT
37591     +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
37592     +          (where=((nrules>0) OR (nsurrogates>0)))
37593     +        %end;
37594     +        %else %do;
37595     +           (where=(nrules>0))
37596     +        %end;
37597     +        label noobs
37598     +        ;
37599     +     run;
37600     +     title10;
37602     +   %end;
37604     +   /* Sequence */
37605     +   %EM_GETNAME(key=OUTSEQ, type=DATA);
37606     +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
37607     +   data _null_ ;
37608     +      set &EM_USER_outseq (obs=2) end=eof ;
37609     +      if eof then do ;
37610     +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
37611     +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
37612     +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
37613     +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
37614     +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
37615     +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
37616     +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
37617     +      end;
37618     +    run;
37620     +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
37621     +      data &EM_USER_OUTSEQ;
37622     +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
37623     +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
37624     +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
37625     +           _XMISC_=_VMISC_
37626     +        %end;
37627     +        %if "&em_tree_aprof" ne "."  %then %do;
37628     +           _XAPROF_=_VAPROF_
37629     +           _XPROF_ = _VPROF_
37630     +        %end;
37631     +        %if "&em_tree_aloss" ne "."  %then %do;
37632     +           _XALOSS_=_VALOSS_
37633     +        %end;
37634     +        %if "&EM_TREE_PRIOR" ne "." %then %do;
37635     +           _XPASE_ = _VPASE_
37636     +           _XPMISC_ = _VPMISC_
37637     +        %end;
37639     +        ));
37640     +     %end;
37641     +     %else %do;
37642     +        set &EM_USER_OUTSEQ;
37643     +     %end;
37645     +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
37646     +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
37647     +            _MISC_   15.&EM_PROPERTY_PRECISION
37648     +         %end;
37649     +         %if "&EM_TREE_PRIOR" ne "." %then %do;
37650     +            _PASE_  15.&EM_PROPERTY_PRECISION
37651     +            _PMISC_ 15.&EM_PROPERTY_PRECISION
37652     +         %end;
37653     +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
37654     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
37655     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
37656     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
37657     +            %end;
37658     +            %if "&EM_TREE_PRIOR" ne "." %then %do;
37659     +              _VPASE_  15.&EM_PROPERTY_PRECISION
37660     +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
37661     +            %end;
37662     +         %end;
37663     +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
37664     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
37665     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
37666     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
37667     +            %end;
37668     +         %end;
37669     +         %if "&em_tree_seq" ne "." %then %do;
37670     +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
37671     +         %end;
37672     +         %if "&em_tree_vseq" ne "." %then %do;
37673     +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
37674     +         %end;
37675     +         %if "&em_tree_aprof" ne "." %then %do;
37676     +           _APROF_ 15.&EM_PROPERTY_PRECISION
37677     +           _PROF_ 15.&EM_PROPERTY_PRECISION
37678     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
37679     +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
37680     +             _VPROF_ 15.&EM_PROPERTY_PRECISION
37681     +           %end;
37682     +         %end;
37683     +         %else %if "&em_tree_aloss" ne "." %then %do;
37684     +           _ALOSS_  15.&EM_PROPERTY_PRECISION
37685     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
37686     +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
37687     +           %end;
37688     +         %end;
37689     +      ;
37690     +    run;
37691     +   %end;
37693     +   /* Observation Based Importance */
37694     +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
37696     +      /* need to check for 0 obs */
37697     +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
37698     +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
37699     +      %let rc=%sysfunc(close(&dsid));
37701     +      %if &onobs %then %do;
37702     +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
37703     +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
37705     +         data &EM_USER_OUTOBSIMP;
37706     +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
37707     +           if _a;
37708     +           by _INPUT1_;
37709     +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
37710     +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
37711     +                     _MISC_ 15.&EM_PROPERTY_PRECISION
37712     +                   %end;
37713     +                   ;
37714     +         run;
37715     +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
37716     +      %end;
37717     +   %end;
37719     +  %end;
37721     +  /* create dataset to support tree diagram and icicle plot */
37722     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
37723     +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
37725     +  /* display tree diagram */
37726     +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
37727     +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
37729     +  /* display icicle diagram */
37730     +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
37731     +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
37733     +  /* Leaf Statistics Plot */
37734     +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
37736     +  /* print leaf information to output window */
37737     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
37739     +     proc sort data=&EM_USER_TREE_PLOT out=t;
37740     +       by descending N;
37741     +     run;
37743     +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
37744     +     %local vn;
37745     +     data _null_;
37746     +       set t (obs=2) end=eof;
37747     +       if eof then do;
37748     +         call symput("vn", strip(put(vn, best.)));
37749     +       end;
37750     +     run;
37752     +     data t;
37753     +       set t;
37754     +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
37755     +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
37756     +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
37757     +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
37758     +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
37759     +       %end;
37760     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
37761     +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
37762     +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
37763     +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
37764     +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
37765     +          %end;
37766     +       %end;
37767     +       ;
37768     +     run;
37770     +     /* determine if rase is found in t */
37771     +    %let dsid=%sysfunc(open(t,i));
37772     +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
37773     +    %let rc=%sysfunc(close(&dsid));
37775     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
37776     +     proc print data=t noobs label;
37777     +       where tprob ne .;
37778     +       var node depth N tprob
37779     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
37780     +         %if "&vn" ne "." %then %do;
37781     +           VN
37782     +         %end;
37783     +         vprob
37784     +       %end;
37785     +       %if &raseexists %then %do;
37786     +            RASE
37787     +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
37788     +              VRASE
37789     +            %end;
37790     +       %end;
37791     +       ;
37792     +     run;
37793     +     title10;
37794     +  %end;
37796     +  /* create plots that are done during training of node */
37797     +  /* display iterative plot, including reference line */
37798     +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
37799     +   /* %if &nleaves eq  %then %do; */
37800     +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
37801     +      data _null_;
37802     +        set &EM_USER_OUTTOPOLOGY end=eof;
37803     +        if eof then do;
37804     +          call symput('nleaves', LEAF);
37805     +        end;
37806     +      run;
37807     +   /* %end; */
37809     +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
37810     +    /*%EM_REPORT(view=1, Y=_ASE_); */
37811     +  %end;
37813     +  /* display leaf statistics */
37814     +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
37816     +  /* stats by node if multiple targets = Y */
37817     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
37818     +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
37819     +    data &EM_USER_OUTSTATS;
37820     +      set &EM_USER_OUTSTATS;
37822     +     * if STATNAME="TARGET" then delete;
37823     +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
37824     +      drop leaf;
37825     +    run;
37826     +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
37828     +  %end;
37829     +  %else %do;
37830     +    /* add outstats and outdescribe to spk but not results */
37831     +    %EM_REPORT(viewtype=, key=OUTSTATS);
37832     +  %end;
37834     +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 14 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: The data set EMWS1.TREE4_OUTIMPORT has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 3 observations read from the data set EMWS1.TREE4_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set EMWS1.TREE4_OUTSEQ.
NOTE: The data set EMWS1.TREE4_OUTSEQ has 7 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE4_ORGYN_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE4_ORGYN_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set EMWS1.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 0 observations read from the data set EMWS1.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8 observations read from the data set EMWS1.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 8 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 8 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 8 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 8 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 170 observations read from the data set EMWS1.TREE4_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 12 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 12 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13 observations read from the data set EMWS1.TREE4_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 12 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 0 observations read from the data set EMWS1.TREE4_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 91 observations read from the data set EMWS1.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 91 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 91 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 78 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 13 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 91 observations read from the data set EMWS1.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 91 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 91 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 13 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 91 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 91 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 91 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 91 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 26 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 13 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 26 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 26 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 26 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 13 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: There were 26 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 26 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: There were 13 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 28 observations read from the data set EMWS1.TREE4_TREE_PLOT.
NOTE: The data set WORK.OLD_TREE_PLOT has 28 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 28 observations read from the data set WORK.OLD_TREE_PLOT.
NOTE: The data set WORK.OLD_TREE_PLOT has 28 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1167:196   
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 13 observations read from the data set WORK.TEMPN.
NOTE: There were 13 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE4_TREE_PLOT has 13 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      


NOTE: There were 91 observations read from the data set EMWS1.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 26 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 13 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 7 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set EMWS1.TREE4_TREE_PLOT.
NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
NOTE: There were 28 observations read from the data set WORK.OLD_TREE_PLOT.
NOTE: The data set EMWS1.TREE4_TREE_PLOT has 40 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.04 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 40 observations read from the data set EMWS1.TREE4_TREE_PLOT.
NOTE: The data set WORK.T has 40 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 40 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 40 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 7 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 13 observations read from the data set EMWS1.TREE4_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

37835      
37836      *------------------------------------------------------------*;
37837      * End REPORT: Tree4;
37838      *------------------------------------------------------------*;

37839      /* Reset EM Options */
37840      options formchar="|----|+|---+=|-/\<>*";
37841      options nocenter ls=256 ps=10000;
37842      goptions reset=all device=GIF NODISPLAY;
37843      proc sort data=WORK.EM_USER_REPORT;
37844      by ID VIEW;
37845      run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

37846      proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
37847      by NAME;
37848      run;

NOTE: There were 18 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 18 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

37849      proc sort data=EMWS1.Tree4_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
37850      by NAME;
37851      run;

NOTE: There were 18 observations read from the data set EMWS1.TREE4_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 18 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

37852      data WORK.ASSESS_META;
37853      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
37854      by NAME;
37855      run;

NOTE: There were 18 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 18 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 18 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

37856      data EM_temp_assessMeta;
37857      set EMWS1.Tree4_CMeta_TRAIN;
37858      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
37859      run;

NOTE: There were 12 observations read from the data set EMWS1.TREE4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

37860      data EM_temp_assessdata;
37861      set EMWS1.Tree4_TRAIN(keep=
37862      F_ORGYN
37863      I_ORGYN
37864      P_ORGYN0
37865      P_ORGYN1
37866      Q_ORGYN0
37867      Q_ORGYN1
37868      R_ORGYN0
37869      R_ORGYN1
37870      U_ORGYN
37871      V_ORGYN0
37872      V_ORGYN1
37873      _WARN_
37874      ORGYN
37875      );
37876      run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4000 observations read from the data set EMWS1.TREE4_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 4000 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
















42154      data EM_temp_assessMeta;
42155      set EMWS1.Tree4_CMeta_TRAIN;
42156      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
42157      run;

NOTE: There were 12 observations read from the data set EMWS1.TREE4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

42158      data EM_temp_assessdata;
42159      set EMWS1.Tree4_VALIDATE(keep=
42160      F_ORGYN
42161      I_ORGYN
42162      P_ORGYN0
42163      P_ORGYN1
42164      Q_ORGYN0
42165      Q_ORGYN1
42166      R_ORGYN0
42167      R_ORGYN1
42168      U_ORGYN
42169      V_ORGYN0
42170      V_ORGYN1
42171      _WARN_
42172      ORGYN
42173      );
42174      run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE4_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 3000 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 3000 observations read from the data set EMWS1.TREE4_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 3000 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
















46461      %let _cn = %sysfunc(getoption(CENTER));
46462      options nocenter;
46463      proc print data=EMWS1.Tree4_EMREPORTFIT noobs label;
46464      var STAT LABEL TRAIN
46465      VALIDATE
46466      TEST
46467      ;
46468      by TARGET TARGETLABEL;
46469      title9 ' ';
46470      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
46471      run;

NOTE: There were 8 observations read from the data set EMWS1.TREE4_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 10.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46472      title10;
46473      options &_cn;
46474      proc sort data=EMWS1.Tree4_EMCLASSIFICATION nothreads;
46475      by DATAROLE TARGET TARGETLABEL;
46476      run;

NOTE: There were 8 observations read from the data set EMWS1.TREE4_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE4_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

46477      %let _cn = %sysfunc(getoption(CENTER));
46478      options nocenter;
46479      proc print data=EMWS1.Tree4_EMCLASSIFICATION noobs label;
46480      var from into pct_row pct_col count percent
46481      ;
46482      by DATAROLE TARGET TARGETLABEL;
46483      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
46484      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
46485      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
46486      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
46487      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
46488      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
46489      where _TYPE_='PREDICTION';
46490      title9 ' ';
46491      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
46492      run;

NOTE: There were 8 observations read from the data set EMWS1.TREE4_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 11.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

46493      title9;
46494      title10;
46495      options &_cn;
46496      %let _cn = %sysfunc(getoption(CENTER));
46497      options nocenter;
46498      data EMWS1.Tree4_EMEVENTREPORT;
46499      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
46500      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
46500    ! FALSEEVENT
46501      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
46502         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
46503      FALSEEVENT=0;
46504      FALSENEVENT=0;
46505      TRUEEVENT=0;
46506      TRUENEVENT=0;
46507      set EMWS1.Tree4_EMEVENTREPORT;
46508      run;

NOTE: There were 2 observations read from the data set EMWS1.TREE4_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE4_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      

46509      proc print data=EMWS1.Tree4_EMEVENTREPORT noobs label;
46510      title9 ' ';
46511      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
46512      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
46513      run;

NOTE: There were 2 observations read from the data set EMWS1.TREE4_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 12.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

46514      title10;
46515      options &_cn;
46516      proc datasets library=EMWS1 nolist;
46517      modify Tree4_EMRANK;
46518      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
46519      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
46520      run;

NOTE: MODIFY was successful for EMWS1.TREE4_EMRANK.DATA.
46521      quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.81 seconds
      cpu time            0.15 seconds
      

46522      %let _cn = %sysfunc(getoption(CENTER));
46523      options nocenter;
46524      proc print data=EMWS1.Tree4_EMRANK label noobs;
46525      var
46526      decile gain lift liftc resp respc N _meanP_;
46527      by
46528      notsorted DATAROLE
46529      notsorted TARGET
46530      notsorted TARGETLABEL
46531      ;
46532      title9 ' ';
46533      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
46534      run;

NOTE: There were 40 observations read from the data set EMWS1.TREE4_EMRANK.
NOTE: The PROCEDURE PRINT printed page 13.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

46535      title10;
46536      options &_cn;
46537      proc datasets library=EMWS1 nolist;
46538      modify Tree4_EMSCOREDIST;
46539      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
46540      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
46541      run;

NOTE: MODIFY was successful for EMWS1.TREE4_EMSCOREDIST.DATA.
46542      quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.89 seconds
      cpu time            0.11 seconds
      

47366      proc printto;
47367      run;

