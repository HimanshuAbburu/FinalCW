*------------------------------------------------------------*
User:                p2503016
Date:                30 November 2021
Time:                14:43:11
Site:                51200470
Platform:            X64_10PRO
Maintenance Release: 9.04.01M7P080520
EM Version:          15.2
* 
*------------------------------------------------------------*
* Training Log
Date:                30 November 2021
Time:                14:42:57
*------------------------------------------------------------*
15241  proc freq data=EMWS1.Tree2_VariableSet noprint;
15242  table ROLE*LEVEL/out=WORK.Tree2META;
15243  run;
 
NOTE: There were 18 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
15244  proc print data=WORK.Tree2META label noobs;
15245  var ROLE LEVEL COUNT;
15246  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15247  title9 ' ';
15248  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15249  run;
 
NOTE: There were 5 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
 
15250  title10;
 
15251  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
>>>>>>>>>>>>>> TARGET(   USE='Y'
                         REPORT='N'
                         NAME='ORGYN'
                         ROLE='TARGET'
                         LEVEL='BINARY'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='QUANTITY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='N'
                         LABEL=''
                         FORMAT='BEST12.0'
                         INFORMAT='BEST32.0'
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=8
                      )[11367]
PERFORMANCE  DETAILS
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
15336  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15337  length ORDER $20;
15338  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15339     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15340  set EMWS1.TREE2_ORGYN_DM( where=(_TYPE_="TARGET"));
15341  NumLevels=2;
15342  select(upcase(ORDER));
15343  when('DESC') ORDER = 'Descending';
15344  when('ASC') ORDER = 'Ascending';
15345  when('FMTDESC') ORDER = 'Formatted Descending';
15346  when('FMTASC') ORDER = 'Formatted Ascending';
15347  otherwise ORDER = 'Descending';
15348  end;
15349  output;
15350  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_ORGYN_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
15351  title9 ' ';
15352  proc print data=WORK.Tree2_EVENT noobs label;
15353  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15354  title9 ' ';
15355  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15356  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15357  title10;
 
"No decisions defined for target "ORGYN"."
15358  proc print data = EMWS1.Tree2_ORGYN_DM noobs label;
15359  var _type_ variable label;
15360  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15361  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15362  title9 ' ';
15363  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15364  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE2_ORGYN_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
15365  title10;
 
15366  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15872  *------------------------------------------------------------*;
15873  * Tree2: Generation of macros and macro variables;
15874  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15875  *------------------------------------------------------------*;
 
15876  %let EMEXCEPTIONSTRING=;
15877  *------------------------------------------------------------*;
15878  * TRAIN: Tree2;
15879  *------------------------------------------------------------*;
15880  %let EM_ACTION = TRAIN;
15881  %let syscc = 0;
15882  %macro main;
15883
15884    %if %upcase(&EM_ACTION) = CREATE %then %do;
15885      filename temp catalog 'sashelp.emmodl.tree_create.source';
15886      %include temp;
15887      filename temp;
15888
15889      %em_tree_create;
15890    %end;
15891
15892     %else
15893     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15894
15895         filename temp catalog 'sashelp.emmodl.tree_train.source';
15896         %include temp;
15897         filename temp;
15898         %em_tree_train;
15899     %end;
15900
15901    %else
15902    %if %upcase(&EM_ACTION) = SCORE %then %do;
15903      filename temp catalog 'sashelp.emmodl.tree_score.source';
15904      %include temp;
15905      filename temp;
15906
15907      %em_tree_score;
15908
15909    %end;
15910
15911    %else
15912    %if %upcase(&EM_ACTION) = REPORT %then %do;
15913
15914         filename temp catalog 'sashelp.emmodl.tree_report.source';
15915         %include temp;
15916         filename temp;
15917
15918         %em_tree_report;
15919     %end;
15920
15921    %else
15922    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15923
15924         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15925         %include temp;
15926         filename temp;
15927         %EM_TREE_OPENTREEVIEWER;
15928
15929     %end;
15930
15931    %else
15932    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15933
15934         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15935         %include temp;
15936         filename temp;
15937         %EM_TREE_CLOSETREEVIEWER;
15938
15939     %end;
15940
15941
15942     %doendm:
15943  %mend main;
15944
15945  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15947 +%macro em_tree_train;
15949 +   %if &EM_IMPORT_DATA eq %then %do;
15950 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15951 +       %put &em_codebar;
15952 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15953 +       %put &errormsg;
15954 +       %put &em_codebar;
15955 +       %goto doendm;
15956 +   %end;
15957 +   %else
15958 +       %let EMEXCEPTIONSTRING =;
15960 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15961 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15962 +        %put &em_codebar;
15963 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15964 +        %put &errormsg;
15965 +        %put &em_codebar;
15966 +        %goto doendm;
15967 +   %end;
15969 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15970 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15971 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15972 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15973 +        %put &em_codebar;
15974 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15975 +        %put &errormsg;
15976 +        %put &em_codebar;
15977 +        %goto doendm;
15978 +   %end;
15980 +   /* Initialize property macro variables */
15981 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15982 +   %include temp;
15983 +   filename temp;
15985 +   %EM_SetProperties;
15987 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15988 +   %EM_GETNAME(key=EMTREE, type=DATA);
15989 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15990 +     /* if import eq Y and no importtable defined, throw an exception */
15991 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15992 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15993 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15994 +         %put &em_codebar;
15995 +         %put &errmsg;
15996 +         %put &em_codebar;
15997 +         %goto doendm;
15998 +      %end;
15999 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
16000 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
16001 +         %put &em_codebar;
16002 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
16003 +         %put &errormsg;
16004 +         %put &em_codebar;
16005 +         %goto doendm;
16006 +      %end;
16007 +      %else %do;
16008 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
16009 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
16010 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
16011 +         %let varnumX = %sysfunc(varnum(&dsid,X));
16012 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
16013 +         %let dsid = %sysfunc(close(&dsid));
16014 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
16015 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
16016 +            %put &em_codebar;
16017 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
16018 +            %put &errormsg;
16019 +            %put &em_codebar;
16020 +            %goto doendm;
16021 +         %end;
16022 +      %end;
16023 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
16024 +         proc delete data=&EM_USER_EMTREE;
16025 +         run;
16026 +      %end;
16027 +   %end;
16028 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
16029 +      proc delete data=&EM_USER_EMTREE;
16030 +      run;
16031 +   %end;
16033 +   /* load tree macros */
16034 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16035 +   %include temp;
16036 +   filename temp;
16038 +   /* data sets */
16039 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
16040 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
16041 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
16043 +   /* files */
16044 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
16046 +   /* check actual num of target levels */
16047 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
16048 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16049 +                              nLevel=_nTargetLevel );
16050 +      %if &_nTargetLevel  > 2 %then %do;
16051 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16052 +        %put &em_codebar;
16053 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16054 +        %put &errormsg;
16055 +        %put &em_codebar;
16056 +        %goto doendm;
16057 +      %end;
16058 +   %end;
16060 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16061 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16062 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16063 +        %let costflag=0;
16064 +        data _null_;
16065 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16066 +          if eof then call symput("costflag", _N_);
16067 +        run;
16068 +        %if &costflag gt 0 %then %do;
16069 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16070 +          %put &em_codebar;
16071 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16072 +          %put &errormsg;
16073 +          %put &em_codebar;
16074 +          %goto doendm;
16075 +       %end;
16076 +     %end;
16077 +   %end;
16079 +   /* determine if multiple targets will be processed */
16080 +   %let em_tree_multipleTargets=N;
16081 +   %let em_tree_numTarget = 1;
16082 +   %let em_tree_targetVars=;
16084 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16085 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16086 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16087 +         %let em_tree_multipleTargets=N;
16088 +      %end;
16089 +      %else %do;
16090 +         /* create macro array of targets  */
16091 +         data _null_;
16092 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16093 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16094 +           if eof then
16095 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16096 +        run;
16098 +        %if &em_tree_numTarget gt 1 %then %do;
16099 +           %let em_tree_multipleTargets=Y;
16100 +        %end;
16101 +      %end;
16102 +   %end;
16104 +   /* create view of only necessary variable for performance reasons */
16105 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16106 +   data &tempData / view=&tempData;
16107 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16108 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16109 +       %EM_TARGET
16110 +     %end;
16111 +     %else %do;
16112 +       %if &em_tree_numTarget ne 0 %then %do;
16113 +         %do i=1 %to &em_tree_numTarget;
16114 +            &&em_tree_targetVars&i
16115 +         %end;
16116 +       %end;
16117 +     %end;
16118 +     );
16119 +   run;
16121 +   /* run Tree procedure */
16122 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16124 +   /* Check return code and throw exception if error is detected */
16125 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16126 +   %if &syserr %then %do;
16127 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16128 +     %goto doendm;
16129 +   %end;
16131 +   /* add decision score code if multiple targets are processed */
16132 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16133 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16134 +   %end;
16136 +   /* create outfit dataset if multiple score statements have been executed */
16137 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16139 +   /* create English Rules */
16140 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16141 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16142 +       %em_tree_makeEnglishRules;
16144 +       /* English Rules */
16145 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16147 +     %end;
16148 +   filename x;
16150 +   %doendm:
16151 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16152 +%macro EM_SetProperties;
16154 +   /* train properties */
16155 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16163 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16165 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16166 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16167 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16168 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16169 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16170 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16171 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16172 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16173 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16174 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16175 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16176 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16177 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16178 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16179 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16180 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16181 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16182 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16183 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16184 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16185 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16186 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16187 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16188 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16189 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16190 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16191 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16192 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16193 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16194 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16195 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16197 +   /* properties for interactive sample */
16198 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16199 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16200 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16201 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16203 +   /* report properties */
16204 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16205 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16206 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16207 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16208 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16209 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16210 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16211 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16212 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16213 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16214 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16215 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16216 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16218 +   /* score properties */
16219 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16220 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16222 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16224 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16225 +  %global &nLevel;
16226 +  proc dmdb batch data=&indata
16227 +    classout=_tmp_dmdbout;
16228 +    class &target;
16229 +  run;
16230 +  data _tmp_dmdbout;
16231 +    set _tmp_dmdbout;
16232 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16233 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16234 +  run;
16235 +  data _null_;
16236 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16237 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16238 +    %let dsid = %sysfunc(close(&dsid));
16239 +     call symput("&nLevel", put(&_obs, Best12.));
16240 +  run;
16242 +  proc datasets lib=work nolist;
16243 +     delete _tmp_dmdbout;
16244 +  run;
16245 +  quit;
16246 +%Mend EM_CheckBinaryTargetLevel;
16249 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16251 +  /* determine the number of obs in training data */
16252 +  proc sql;
16253 +    reset noprint;
16254 +    select count(*) into :em_nobs from &indata;
16255 +  quit;
16257 +  /* determine the number of input variables */
16258 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16259 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16261 +  /* retrieve targetEvent from decmeta */
16262 +  %let targetEvent=;
16263 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16264 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16265 +      data _null_;
16266 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16267 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16268 +      run;
16269 +    %end;
16270 +  %end;
16272 +  /* create targetTable if multipleTar eq Y */
16273 +  data temptarget;
16274 +    set &EM_DATA_VARIABLESET;
16275 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16276 +  run;
16278 + /* data sets */
16279 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16280 + %EM_GETNAME(key=EMTREE,        type=DATA);
16281 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16282 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16283 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16284 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16285 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16286 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16287 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16288 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16290 + /* files */
16291 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16292 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16294 + /* turn on pmml if requested */
16295 + %let nnpmml=0;
16296 + %if %symexist(EM_PMML) %then %do;
16297 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16298 +       %let nnpmml=1;
16300 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16301 +   %end;
16302 +%end;
16304 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16306 +%if &nnpmml or &numClassTarget %then %do;
16308 +    /* create dmdb needed for pmml generation */
16309 +    %let tree_maxlevel = 512;
16310 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16311 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16312 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16313 +      %end;
16314 +    %end;
16315 +    %if &tree_maxlevel gt 0 %then %do;
16316 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16317 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16318 +    %end;
16320 +    %let targetOrderString =;
16321 +    %let targetString = ;
16322 +    data _null_;
16323 +       length orderString nameString $10000;
16324 +       retain orderString nameString;
16325 +       set &em_data_variableset end=eof;
16326 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16327 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16328 +       %end;
16329 +       %else %do;
16330 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16331 +       %end;          select(order);
16332 +         when('')        order ='DESC';
16333 +         when('FMTASC')  order='ASCFMT';
16334 +         when('FMTDESC') order='DESFMT';
16335 +         otherwise;
16336 +       end;
16337 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16338 +       nameString = trim(nameString)!!' '!!trim(NAME);
16340 +       if eof then do;
16341 +          call symput('targetOrderString', trim(orderString));
16342 +          call symput('targetString', trim(nameString));
16343 +       end;
16344 +    run;
16346 +    %let arborkluge= "work._treeDMDB";
16348 +    proc dmdb batch data=&indata
16349 +    %if &nnpmml %then %do;
16350 +        PMML
16351 +    %end;
16352 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16354 +      %if &nnpmml %then %do;
16355 +           %if "%EM_ID" ne "" %then %do;
16356 +             id %EM_ID;
16357 +           %end;
16358 +           %if &EM_NUM_CLASS gt 0 %then %do;
16359 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16360 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16361 +                  &targetOrderString;
16362 +           %end;
16363 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16364 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16365 +           %end;
16366 +           target &targetString %EM_INTERVAL_TARGET;
16367 +           %if "%EM_FREQ" ne "" %then %do;
16368 +             freq %EM_FREQ;
16369 +           %end;
16370 +      %end;
16371 +      %else %do;
16372 +         class  &targetOrderString;
16373 +         target &targetString %EM_INTERVAL_TARGET;
16374 +      %end;
16375 +    run;
16376 +    quit;
16378 +    proc datasets lib=work nolist;
16379 +       delete classout varout;
16380 +    run;
16381 +    quit;
16383 + %end;
16386 + /* run Arbor procedure */
16387 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16388 +  proc arbor data=&INDATA
16390 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16391 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16392 +  %end;
16394 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16395 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16396 +  %end;
16398 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16399 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16400 +  %end;
16402 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16403 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16404 +  %end;
16406 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16407 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16408 +  %end;
16410 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16411 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16412 +  %end;
16413 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16414 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16415 +  %end;
16416 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16417 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16418 +  %end;
16420 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16421 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16422 +      alpha = &EM_PROPERTY_SIGLEVEL
16423 +    %end;
16424 +  %end;
16426 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16427 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16428 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16429 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16430 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16432 +        padjust =
16433 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16434 +          &chaid
16435 +        %end;
16436 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16437 +          DEPTH
16438 +        %end;
16439 +      %end;
16440 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16441 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16442 +         pvars = &num_inputs
16443 +      %end;
16444 +    %end;
16445 +  %end;
16446 +  %else %do;
16447 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16448 +         padjust = NONE
16449 +      %end;
16450 +  %end;
16452 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16453 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16454 +    Maxrules = &num_nrules
16455 +  %end;
16457 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16458 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16459 +    Maxsurrs = &num_nsurrs
16460 +  %end;
16462 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16463 +     Missing=&EM_PROPERTY_MISSINGVALUE
16464 +  %end;
16466 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16467 +     USEVARONCE
16468 +  %end;
16470 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16471 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16472 +  %end;
16475 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16476 +    event = "&targetEvent"
16477 +  %end;
16479 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16480 +     DECSEARCH
16481 +  %end;
16483 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16484 +     PRIORSSEARCH
16485 +  %end;
16487 +  %if &arbor_1 ne %then %do;
16488 +    &arbor_1
16489 +  %end;
16491 +  %if &em_arbor ne %then %do;
16492 +     &em_arbor
16493 +  %end;
16494 +  ;
16495 + %end;
16496 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16497 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16498 +       Performance &EM_PROPERTY_PERFORMANCE
16499 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16500 +         nodesize=&EM_PROPERTY_NODESAMPLE
16501 +       %end;
16502 +       ;
16503 +       interact;
16504 + %end;
16505 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16506 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16507 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16508 +    %put &em_codebar;
16509 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16510 +    %put &errormsg;
16511 +    %put &em_codebar;
16512 +    %goto doendm;
16513 +   %end;
16514 +   %else %do;
16515 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16516 +       Performance &EM_PROPERTY_PERFORMANCE
16517 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16518 +         nodesize=&EM_PROPERTY_NODESAMPLE
16519 +       %end;
16520 +       ;
16521 +       interact;
16522 +   %end;
16523 + %end;
16525 + %else %do;
16526 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16527 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16528 +    %put &em_codebar;
16529 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16530 +    %put &errormsg;
16531 +    %put &em_codebar;
16532 +    %goto doendm;
16533 +   %end;
16534 +   %else %do;
16535 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16536 +       Performance &EM_PROPERTY_PERFORMANCE
16537 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16538 +         nodesize=&EM_PROPERTY_NODESAMPLE
16539 +       %end;
16540 +       ;
16541 +        interact;
16542 +   %end;
16543 + %end;
16545 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16546 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16547 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16548 +    %end;
16550 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16551 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16552 +    %end;
16554 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16555 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16556 +    %end;
16558 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16559 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16560 +    %end;
16562 +    %if "%EM_FREQ" ne "" %then %do;
16563 +       freq %EM_FREQ;
16564 +    %end;
16566 +    %if "&multipleTar" eq "Y" %then %do;
16567 +       /* cycle through all target vars in variableset */
16568 +       %let tdsid = %sysfunc(open(temptarget));
16569 +       %if &tdsid %then %do;
16570 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16571 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16572 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16573 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16574 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16575 +             target &var / level = &lvl
16576 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16577 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16578 +             %end;
16579 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16580 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16581 +             %end;
16582 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16583 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16584 +             %end;
16585 +          %end;
16586 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16587 +       %end;
16588 +       useTarget variable = %EM_TARGET;
16589 +    %end;
16590 +    %else %do;
16591 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16592 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16593 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16594 +      %end;
16595 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16596 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16597 +      %end;
16598 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16599 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16600 +      %end;
16601 +    %end;
16603 +    %if "&multipleTar" eq "N" %then %do;
16604 +      &EM_DEC_STATEMENT;
16605 +    %end;
16607 +    Performance &EM_PROPERTY_PERFORMANCE
16608 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16609 +      nodesize=&EM_PROPERTY_NODESAMPLE
16610 +    %end;
16611 +    ;
16613 +    %if "&intFlag" eq "Y" %then %do;
16614 +       INTERACT Largest;
16615 +       Train maxnewdepth=0;
16616 +    %end;
16618 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16619 +         Assess
16620 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16621 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16622 +              %put &em_codebar;
16623 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16624 +              %put &errormsg;
16625 +              %put &em_codebar;
16626 +            %end;
16627 +            %else %do;
16628 +               Validata=&EM_IMPORT_VALIDATE
16629 +            %end;
16630 +         %end;
16631 +         %else %do;
16632 +           NoValidata
16633 +         %end;
16634 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16635 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16636 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16637 +               %if &dsid %then %do;
16638 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16639 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16640 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16641 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16642 +                   %else %do;
16643 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16644 +                      %else %let measure= MISC;
16645 +                   %end;
16646 +                 %end;
16647 +               %end;
16648 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16649 +            %end;
16650 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16651 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16652 +                 %let measure=ASE;
16653 +              %end;
16654 +              %else %do;
16655 +                 %let measure=MISC;
16656 +              %end;
16657 +            %end;
16658 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16659 +              %let measure=ASE;
16660 +            %end;
16661 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16662 +               %let measure = LIFT;
16663 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16664 +               %if &dsid %then %do;
16665 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16666 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16667 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16668 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16669 +                 %end;
16670 +               %end;
16671 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16672 +            %end;
16673 +            measure=&measure
16674 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16675 +               event = "&targetEvent"
16676 +            %end;
16677 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16678 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16679 +            %end;
16680 +         %end;
16681 +         %if "&multipleTar" eq "N" %then %do;
16682 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16683 +               CV
16684 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16685 +                 CVNITer = &EM_PROPERTY_CVNITER
16686 +               %end;
16687 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16688 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16689 +               %end;
16690 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16691 +                 CVSeed = &EM_PROPERTY_CVSEED
16692 +               %end;
16693 +            %end;
16694 +         %end;
16695 +       %end;
16696 +      ;
16698 +      %if "&intFlag" ne "Y" %then %do;
16699 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16700 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16701 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16702 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16704 +          SUBTREE &subtree
16705 +          %if "&subtree" eq "NLEAVES" %then %do;
16706 +            =&EM_PROPERTY_NSUBTREE
16707 +          %end;
16708 +          ;
16709 +        %end;
16711 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16712 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16713 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16714 +          %end;
16715 +       %end;
16716 +      %end;
16717 + %end;
16720 + MakeMacro nleaves = nleaves;
16721 + save
16722 + %if "&EM_USER_EMTREE" ne "" %then %do;
16723 +   MODEL=&EM_USER_EMTREE
16724 + %end;
16725 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16726 +   SEQUENCE=&EM_USER_OUTSEQ
16727 + %end;
16728 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16729 +   IMPORTANCE=&EM_USER_OUTIMPORT
16730 + %end;
16731 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16732 +   NODESTAT=&EM_USER_OUTNODES
16733 + %end;
16734 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16735 +   SUMMARY=&EM_USER_OUTSUMMARY
16736 + %end;
16737 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16738 +   STATSBYNODE=&EM_USER_OUTSTATS
16739 + %end;
16740 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16741 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16742 + %end;
16743 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16744 +   Pathlistnonmissing=&EM_USER_OUTPATH
16745 + %end;
16746 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16747 +   RULES = &EM_USER_OUTRULES
16748 + %end;
16749 + ;
16751 + %if "&intFlag" ne "Y" %then %do;
16753 +   %let lookupString = ;
16754 +   %if ^%symexist(EM_OPTION) %then
16755 +      %let EM_OPTION=;
16757 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16758 +      %let lookupString = LOOKUP=SELECT;
16759 +   %end;
16761 +   %let codetext=;
16762 +   %let norescodetxt=;
16764 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16765 +     %let codetext=&codetext DUMMY;
16766 +     %let norescodetxt=&norescodetxt DUMMY;
16767 +   %end;
16768 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16769 +     %let codetext=&codetext NOLEAFID;
16770 +     %let norescodetxt=&norescodetxt NOLEAFID;
16771 +   %end;
16772 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16773 +     %let norescodetxt=&norescodetxt NOPRED;
16774 +   %end;
16776 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16777 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16779 +   %if &nnpmml %then %do;
16780 +     code pmml;
16781 +   %end;
16783 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16784 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16785 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16786 +   %end;
16787 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16788 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16789 +   %end;
16790 + %end;
16792 + run;
16793 + quit;
16795 + /*%em_checkerror(); */
16796 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16797 +   /* Delete DMDB catalog */
16798 +   proc datasets lib=work nolist;
16799 +       delete _treeDMDB / mt=cat;
16800 +  run;
16801 +  %end;
16803 + %if &nnpmml %then %do;
16804 +    ods pmml close;
16805 + %end;
16807 +  %doendm:
16809 +%mend em_tree_runTreeProcedure;
16811 +%macro em_tree_createFitStats( multipleTar= );
16814 +  /* create targetTable is multipleTar eq Y */
16815 +  data temptarget;
16816 +    set &EM_DATA_VARIABLESET;
16817 +    where ROLE="TARGET";
16818 +  run;
16820 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16821 +   data &EM_USER_EMOUTFIT;
16822 +     length target $32;
16823 +     merge work.fit_train
16824 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16825 +       work.fit_valid
16826 +     %end;
16827 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16828 +       work.fit_test
16829 +     %end;
16830 +     ;
16831 +     %if "&multipleTar" eq "N" %then %do;
16832 +       target="%EM_TARGET";
16833 +     %end;
16834 +     %else %do;
16835 +       target = _TARGET_;
16836 +     %end;
16837 +     drop _NW_ _SUMW_
16838 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16839 +        _VSUMW_
16840 +     %end;
16841 +     ;
16842 +   run;
16844 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16845 +     proc datasets library=work nolist;
16846 +       delete fit_valid;
16847 +     run;
16848 +   %end;
16849 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16850 +     proc datasets library=work nolist;
16851 +       delete fit_test;
16852 +     run;
16853 +   %end;
16855 +%mend em_tree_createFitStats;
16858 +%macro em_tree_makeEnglishRules;
16860 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16861 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16863 +  /* verify that necessary tables exist and if not, skip processing */
16864 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16865 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16866 +    %goto doendm;
16867 +  %end;
16868 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16869 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16870 +    %goto doendm;
16871 +  %end;
16873 +  /* determine length of variable in outpath dataset */
16874 +  %let vlength= ;
16875 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16876 +  %if &dsid ne %then %do;
16877 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16878 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16879 +  %end;
16880 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16882 +  data tempoutpath;
16883 +    length varname $&vlength;
16884 +    retain varname;
16885 +    set &EM_USER_OUTPATH;
16887 +    if ^missing(variable) then varname=variable;
16888 +    else if ^missing(var_name) then varname=var_name;
16889 +    output;
16890 +  run;
16892 +  /* create an array of generated predicted variable names */
16893 +  %let tree_pred_vars = ;
16894 +  %let tree_pred_label = ;
16895 +  %let numpred= 0;
16896 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16898 +    data _null_;
16899 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16900 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16901 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16902 +     if eof then
16903 +       call symput('numpred', strip(put(_N_, BEST.)));
16904 +    run;
16905 +  %end;
16907 +  /* determine if NPRIORS exists in outnodes  */
16908 +  %local nprior_flag;
16909 +  data _null_;
16910 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16911 +    if eof then do;
16912 +      call symput('nprior_flag', strip(put(npriors, best.)));
16913 +    end;
16914 +  run;
16916 +  proc sort data=tempoutpath; by node; run;
16917 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16919 +  data tempoutpath;
16920 +    merge tempoutpath(in=_a) outnodes(keep= node
16921 +    %if "&nprior_flag" ne "." %then %do;
16922 +      NPRIORS
16923 +    %end;
16924 +    %else %do;
16925 +      N
16926 +    %end;
16927 +    %if &numpred gt 0 %then %do;
16928 +      %do i=1 %to &numpred;
16929 +        &&tree_pred_vars&i
16930 +      %end;
16931 +    %end;
16932 +    );
16933 +    by node;
16934 +    if _a;
16935 +  run;
16937 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16939 +  data _null_;
16940 +    file x;
16941 +    set tempoutpath;
16942 +    by node descending varname;
16943 +    retain origvar oldnode string;
16944 +    length origvar $32 oldnode 8 string $5000;
16946 +    if _N_ = 1 then do;
16947 +      origvar = varname;
16948 +      oldnode = node;
16949 +    end;
16951 +    if first.node then do;
16952 +       put "&EM_CODEBAR";
16953 +       put " Node = " node;
16954 +       put "&EM_CODEBAR";
16955 +    end;
16957 +      if first.varname then do;
16958 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16959 +            if MISSING(CHARACTER_VALUE) then do;
16960 +             if NUMERIC_VALUE ne .  then do;
16961 +              if ^first.node then do;
16962 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16963 +              end;
16964 +              else do;
16965 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16966 +              end;
16967 +             end;
16968 +            end;
16969 +            else do;
16970 +              if ^first.node then do;
16971 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16972 +              end;
16973 +              else do;
16974 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16975 +              end;
16976 +             end;
16977 +         end;
16978 +         else if RELATION in ("=") then do;
16979 +            if ^first.node then do;
16980 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16981 +            end;
16982 +            else do;
16983 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16984 +            end;
16985 +         end;
16986 +         else if RELATION in ("ISMISSING") then do;
16987 +            if ^first.node then do;
16988 +              string = " AND "|| strip(varname) || " equals Missing";
16989 +            end;
16990 +            else do;
16991 +              string = "if "|| strip(varname) ||" equals Missing";
16992 +            end;
16993 +         end;
16994 +         else if RELATION in ("ISNOTMISSING") then do;
16995 +            if ^first.node then do;
16996 +              string = " AND "|| strip(varname) || " equals All Values";
16997 +            end;
16998 +            else do;
16999 +              string = "if "|| strip(varname) ||" equals All Values";
17000 +            end;
17001 +         end;
17002 +         if ^missing(varname) then origvar = varname;
17003 +         oldnode=node;
17005 +      end;
17006 +      else do;
17007 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
17008 +          if MISSING(CHARACTER_VALUE) then do;
17009 +           if  NUMERIC_VALUE ne .  then do;
17010 +            if ^MISSING(string) then
17011 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
17012 +            else
17013 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
17014 +           end;
17015 +          end;
17016 +          else do;
17017 +            if ^MISSING(string) then
17018 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17019 +            else
17020 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17021 +          end;
17023 +         end;
17024 +         else if RELATION in ("=") then do;
17025 +           string = strip(string)||", "||strip(character_value);
17026 +         end;
17027 +         else if RELATION in ("ISMISSING") then do;
17029 +         end;
17030 +         if ^missing(varname) then origvar = varname;
17031 +         oldnode=node;
17032 +      end;
17033 +      if last.varname then do;
17034 +         if RELATION in ("ISMISSING") then do;
17035 +           if ^first.varname then do;
17036 +             string = strip(string) || " or MISSING";
17037 +           end;
17038 +         end;
17039 +         put string;
17040 +         if ^missing(varname) then origvar = varname;
17041 +         oldnode=node;
17042 +      end;
17044 +      if last.node then do;
17045 +         put "then ";
17046 +         put " Tree Node Identifier   = " node;
17048 +         %if "&nprior_flag" ne "." %then %do;
17049 +           put " Number of Observations = " NPRIORS;
17050 +         %end;
17051 +         %else %do;
17052 +           put " Number of Observations = " N;
17053 +         %end;
17055 +         %if &numpred gt 0 %then %do;
17056 +           %do i=1 %to &numpred;
17057 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17058 +           %end;
17059 +         %end;
17061 +         put " ";
17062 +         if ^missing(varname) then origvar = varname;
17063 +         oldnode=node;
17064 +      end;
17066 +  run;
17068 +  proc datasets lib=work nolist;
17069 +    delete tempoutpath outnodes;
17070 +  run;
17072 +  %doendm:
17073 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 4000   Memory used = 511K.
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.11 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_ORGYN_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 4000   Memory used = 511K.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4000 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1595228 kilobytes of physical memory.
NOTE: Will use 4000 out of 4000 training cases.
NOTE: Using memory pool with 152157184 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 1516696 bytes of work memory.
NOTE: The subtree sequence contains 21 subtrees. The largest has 41 nodes and 21 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Created macro variable NLEAVES equal to 8.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 14 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_EMTREE has 1154 observations and 4 variables.
NOTE: The data set EMWS1.TREE2_OUTNODES has 15 observations and 24 variables.
NOTE: The data set EMWS1.TREE2_OUTPATH has 56 observations and 7 variables.
NOTE: The data set EMWS1.TREE2_OUTRULES has 219 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 21 observations and 20 variables.
NOTE: The data set EMWS1.TREE2_OUTSTATS has 105 observations and 5 variables.
NOTE: The data set EMWS1.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_OUTTOPOLOGY has 15 observations and 5 variables.
NOTE: External file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\TREEFLOW.sas opened.
NOTE: External file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
 
 
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.71 seconds
      cpu time            0.26 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4000 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.72 seconds
      cpu time            0.29 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set EMWS1.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 56 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_ORGYN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 56 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 15 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 56 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 56 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=30 November 2021 14:43:02,
      Create Time=30 November 2021 14:43:02
 
NOTE: 96 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 56 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref X has been deassigned.
17075
17076  *------------------------------------------------------------*;
17077  * End TRAIN: Tree2;
17078  *------------------------------------------------------------*;
 
17079  *------------------------------------------------------------*;
17080  * Close any missing semi colons;
17081  *------------------------------------------------------------*;
17082  ;
17083  ;
17084  ;
17085  ;
17086  quit;
17087  *------------------------------------------------------------*;
17088  * Close any unbalanced quotes;
17089  *------------------------------------------------------------*;
17090  /*; *"; *'; */
17091  ;
17092  run;
17093  quit;
17094  /* Reset EM Options */
17095  options formchar="|----|+|---+=|-/\<>*";
17096  options nocenter ls=256 ps=10000;
17097  goptions reset=all device=GIF NODISPLAY;
 
17098  proc sort data=WORK.EM_USER_REPORT;
17099  by ID VIEW;
17100  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                30 November 2021
Time:                14:43:03
*------------------------------------------------------------*
17202  %let EMEXCEPTIONSTRING=;
17203  *------------------------------------------------------------*;
17204  * SCORE: Tree2;
17205  *------------------------------------------------------------*;
17206  %let EM_ACTION = SCORE;
17207  %let syscc = 0;
17208  %macro main;
17209
17210    %if %upcase(&EM_ACTION) = CREATE %then %do;
17211      filename temp catalog 'sashelp.emmodl.tree_create.source';
17212      %include temp;
17213      filename temp;
17214
17215      %em_tree_create;
17216    %end;
17217
17218     %else
17219     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17220
17221         filename temp catalog 'sashelp.emmodl.tree_train.source';
17222         %include temp;
17223         filename temp;
17224         %em_tree_train;
17225     %end;
17226
17227    %else
17228    %if %upcase(&EM_ACTION) = SCORE %then %do;
17229      filename temp catalog 'sashelp.emmodl.tree_score.source';
17230      %include temp;
17231      filename temp;
17232
17233      %em_tree_score;
17234
17235    %end;
17236
17237    %else
17238    %if %upcase(&EM_ACTION) = REPORT %then %do;
17239
17240         filename temp catalog 'sashelp.emmodl.tree_report.source';
17241         %include temp;
17242         filename temp;
17243
17244         %em_tree_report;
17245     %end;
17246
17247    %else
17248    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17249
17250         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17251         %include temp;
17252         filename temp;
17253         %EM_TREE_OPENTREEVIEWER;
17254
17255     %end;
17256
17257    %else
17258    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17259
17260         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17261         %include temp;
17262         filename temp;
17263         %EM_TREE_CLOSETREEVIEWER;
17264
17265     %end;
17266
17267
17268     %doendm:
17269  %mend main;
17270
17271  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17273 +%macro em_tree_score;
17275 +   /* determine if multiple targets will be processed */
17276 +   %let em_tree_multipleTargets=N;
17277 +   %let em_tree_numTarget=1;
17278 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17279 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17280 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17281 +         %let em_tree_multipleTargets=N;
17282 +      %end;
17283 +      %else %do;
17284 +         /* create macro array of targets  */
17285 +         data _null_;
17286 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17287 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17288 +           if eof then
17289 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17290 +        run;
17292 +        %if &em_tree_numTarget gt 1 %then %do;
17293 +           %let em_tree_multipleTargets=Y;
17294 +        %end;
17295 +      %end;
17296 +   %end;
17298 +   /* build flow and publish scoring code */
17299 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17300 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17302 +   filename treeflow "&EM_USER_TREEFLOW";
17303 +   filename treepub "&EM_USER_TREEPUBLISH";
17305 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17306 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17308 +   %em_copyfile(infref=treeflow, outfref=flowref);
17309 +   %em_copyfile(infref=treepub, outfref=pubref);
17311 +   filename treeflow;
17312 +   filename treepub;
17314 +   /* if priors are used, add code to generate unadjusted residuals in export */
17315 +   %let useAdjPriors = N;
17316 +   data _null_;
17317 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17318 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17319 +   run;
17320 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17321 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17322 +      %include temp;
17323 +      filename temp;
17325 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17326 +      filename adjref "&EM_USER_adjResidualCode";
17327 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17329 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17331 +      filename adjref;
17332 +   %end;
17334 +   /* LEAF */
17335 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17336 +      data _null_;
17337 +        file flowref mod;
17338 +        put 'drop _LEAF_;';
17339 +      run;
17341 +      data _null_;
17342 +        file pubref mod;
17343 +        put 'drop _LEAF_;';
17344 +      run;
17346 +   %end;
17348 +   filename flowref;
17349 +   filename pubref;
17351 +   /* em_metachange code */
17352 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17353 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17354 +   %end;
17356 +   /* variable selection based on importance stat    */
17357 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17358 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17359 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17360 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17361 +     %let obs = %sysfunc(fetch(&dsid));
17362 +     %do %while(&obs=0);
17363 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17364 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17365 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17366 +       %let obs = %sysfunc(fetch(&dsid));
17367 +     %end;
17368 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17369 +   %end;
17371 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17372 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17373 +    %let tree_pred_vars = ;
17374 +    %let tree_pred_lvl =;
17375 +    %let numpred= 0;
17377 +    data _null_;
17378 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17379 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17380 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17381 +     if eof then
17382 +       call symput('numpred', strip(put(_N_, BEST.)));
17383 +    run;
17384 +   %end;
17386 +   %if &numpred ne 0 %then %do;
17387 +    %do i=1 %to &numpred;
17388 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17389 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17390 +    %end;
17391 +   %end;
17393 +   /* determine if multiple targets will be processed */
17394 +   %let em_tree_multipleTargets=N;
17395 +   %let em_tree_numTarget=1;
17396 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17397 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17398 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17399 +         %let em_tree_multipleTargets=N;
17400 +      %end;
17401 +      %else %do;
17402 +        data _null_;
17403 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17404 +          if eof then
17405 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17406 +        run;
17408 +        %if &em_tree_numTarget gt 1 %then %do;
17409 +           %let em_tree_multipleTargets=Y;
17410 +        %end;
17411 +     %end;
17412 +   %end;
17414 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17415 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17417 +      /* variable importance */
17418 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17419 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17421 +         %let validexist=0;
17422 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17423 +           %let validexist=1;
17424 +         %end;
17426 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17427 +         /* and the columns may not be generated                                                                                 */
17428 +         %let em_tree_cvexists=;
17429 +         %let em_tree_surrexists=.;
17430 +         data _null_;
17431 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17432 +            if eof then do ;
17433 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17434 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17435 +            end;
17436 +         run;
17438 +         data &EM_USER_OUTIMPORT;
17439 +            set &EM_USER_OUTIMPORT;
17441 +            /* format columns based on Precison value specified */
17442 +            format importance 15.&EM_PROPERTY_PRECISION
17443 +                 %if &validexist %then %do;
17444 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17445 +                 %end;
17446 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17447 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17448 +                 %end;
17449 +            ;
17450 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17451 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17452 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17453 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17454 +                 %if "&em_tree_surrexists" ne "" %then %do;
17455 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17456 +                 %end;
17457 +                 %if &validexist %then %do;
17458 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17459 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17460 +                 %end;
17461 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17462 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17463 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17464 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17465 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17466 +                 %end;
17467 +            ;
17468 +         run;
17470 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17471 +      %end;
17472 +   %end;
17474 +   %doendm:
17475 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=30 November 2021 14:43:02,
      Create Time=30 November 2021 14:43:02
 
NOTE: 174 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=30 November 2021 14:43:02,
      Create Time=30 November 2021 14:43:02
 
NOTE: 152 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_ORGYN_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5918,
      Last Modified=30 November 2021 14:43:02,
      Create Time=30 November 2021 14:43:02
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5333,
      Last Modified=30 November 2021 14:43:02,
      Create Time=30 November 2021 14:43:02
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_ORGYN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 14 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
17476
17477  *------------------------------------------------------------*;
17478  * End SCORE: Tree2;
17479  *------------------------------------------------------------*;
 
17480  proc sort data=WORK.EM_METACHANGE;
17481  by key uname;
17482  run;
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17483  filename x "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas";
17484  data _null_;
17485  file x;
17486  put 'if upcase(NAME) = "BILL" then do;';
17487  put 'ROLE = "REJECTED";';
17488  put 'end;';
17489  put 'else ';
17490  put 'if upcase(NAME) = "CLASS" then do;';
17491  put 'ROLE = "REJECTED";';
17492  put 'end;';
17493  put 'else ';
17494  put 'if upcase(NAME) = "LTIME" then do;';
17495  put 'ROLE = "REJECTED";';
17496  put 'end;';
17497  put 'else ';
17498  put 'if upcase(NAME) = "NGROUP" then do;';
17499  put 'ROLE = "REJECTED";';
17500  put 'end;';
17501  put 'else ';
17502  put 'if upcase(NAME) = "OAC" then do;';
17503  put 'ROLE = "REJECTED";';
17504  put 'end;';
17505  put 'else ';
17506  put 'if upcase(NAME) = "Q_ORGYN0" then do;';
17507  put 'ROLE = "ASSESS";';
17508  put 'end;';
17509  put 'else ';
17510  put 'if upcase(NAME) = "Q_ORGYN1" then do;';
17511  put 'ROLE = "ASSESS";';
17512  put 'end;';
17513  put 'else ';
17514  put 'if upcase(NAME) = "REGION" then do;';
17515  put 'ROLE = "REJECTED";';
17516  put 'end;';
17517  put 'else ';
17518  put 'if upcase(NAME) = "S_CONV" then do;';
17519  put 'ROLE = "REJECTED";';
17520  put 'end;';
17521  put 'else ';
17522  put 'if upcase(NAME) = "S_FVEG" then do;';
17523  put 'ROLE = "REJECTED";';
17524  put 'end;';
17525  put 'else ';
17526  put 'if upcase(NAME) = "S_TOIL" then do;';
17527  put 'ROLE = "REJECTED";';
17528  put 'end;';
17529  put 'else ';
17530  put 'if upcase(NAME) = "TV_REG" then do;';
17531  put 'ROLE = "REJECTED";';
17532  put 'end;';
17533  put 'else ';
17534  put 'if upcase(NAME) = "_NODE_" then do;';
17535  put 'ROLE = "SEGMENT";';
17536  put 'LEVEL = "NOMINAL";';
17537  put 'end;';
17538  run;
 
NOTE: The file X is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=30 November 2021 14:43:03,
      Create Time=30 November 2021 14:40:19
 
NOTE: 52 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 37.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17539  filename x;
NOTE: Fileref X has been deassigned.
 
17540  filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
17541  *------------------------------------------------------------*;
17542  * Tree2: Scoring DATA data;
17543  *------------------------------------------------------------*;
17544  data EMWS1.Tree2_TRAIN
17545  / view=EMWS1.Tree2_TRAIN
17546  ;
17547  set EMWS1.Part_TRAIN
17548  ;
17549  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
17550 +****************************************************************;
17551 +******             DECISION TREE SCORING CODE             ******;
17552 +****************************************************************;
17553 +
17554 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17555 +LENGTH F_ORGYN  $   12;
17556 +LENGTH I_ORGYN  $   12;
17557 +LENGTH _WARN_  $    4;
17558 +
17559 +******              LABELS FOR NEW VARIABLES              ******;
17560 +label _NODE_ = 'Node' ;
17561 +label _LEAF_ = 'Leaf' ;
17562 +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
17563 +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
17564 +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
17565 +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
17566 +label V_ORGYN1 = 'Validated: ORGYN=1' ;
17567 +label V_ORGYN0 = 'Validated: ORGYN=0' ;
17568 +label R_ORGYN1 = 'Residual: ORGYN=1' ;
17569 +label R_ORGYN0 = 'Residual: ORGYN=0' ;
17570 +label F_ORGYN = 'From: ORGYN' ;
17571 +label I_ORGYN = 'Into: ORGYN' ;
17572 +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
17573 +label _WARN_ = 'Warnings' ;
17574 +
17575 +
17576 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17577 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17578 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17579 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17580 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17581 +
17582 +
17583 +_ARBFMT_12 = PUT( ORGYN , BEST12.);
17584 + %DMNORMCP( _ARBFMT_12, F_ORGYN );
17585 +
17586 +******             ASSIGN OBSERVATION TO NODE             ******;
17587 +IF  NOT MISSING(AGE ) AND
17588 +  AGE  <                 44.5 THEN DO;
17589 +  IF  NOT MISSING(AFFL ) AND
17590 +    AFFL  <                 10.5 THEN DO;
17591 +    _ARBFMT_1 = PUT( GENDER , $1.);
17592 +     %DMNORMIP( _ARBFMT_1);
17593 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17594 +      IF  NOT MISSING(AFFL ) AND
17595 +        AFFL  <                  5.5 THEN DO;
17596 +        _NODE_  =                   16;
17597 +        _LEAF_  =                    1;
17598 +        P_ORGYN1  =             0.265625;
17599 +        P_ORGYN0  =             0.734375;
17600 +        Q_ORGYN1  =             0.265625;
17601 +        Q_ORGYN0  =             0.734375;
17602 +        V_ORGYN1  =     0.31914893617021;
17603 +        V_ORGYN0  =     0.68085106382978;
17604 +        I_ORGYN  = '0' ;
17605 +        U_ORGYN  =                    0;
17606 +        END;
17607 +      ELSE DO;
17608 +        _NODE_  =                   17;
17609 +        _LEAF_  =                    2;
17610 +        P_ORGYN1  =     0.54601226993865;
17611 +        P_ORGYN0  =     0.45398773006134;
17612 +        Q_ORGYN1  =     0.54601226993865;
17613 +        Q_ORGYN0  =     0.45398773006134;
17614 +        V_ORGYN1  =     0.60829493087557;
17615 +        V_ORGYN0  =     0.39170506912442;
17616 +        I_ORGYN  = '1' ;
17617 +        U_ORGYN  =                    1;
17618 +        END;
17619 +      END;
17620 +    ELSE DO;
17621 +      _NODE_  =                    9;
17622 +      _LEAF_  =                    3;
17623 +      P_ORGYN1  =     0.21186440677966;
17624 +      P_ORGYN0  =     0.78813559322033;
17625 +      Q_ORGYN1  =     0.21186440677966;
17626 +      Q_ORGYN0  =     0.78813559322033;
17627 +      V_ORGYN1  =     0.22110552763819;
17628 +      V_ORGYN0  =      0.7788944723618;
17629 +      I_ORGYN  = '0' ;
17630 +      U_ORGYN  =                    0;
17631 +      END;
17632 +    END;
17633 +  ELSE DO;
17634 +    _NODE_  =                    5;
17635 +    _LEAF_  =                    4;
17636 +    P_ORGYN1  =     0.72849462365591;
17637 +    P_ORGYN0  =     0.27150537634408;
17638 +    Q_ORGYN1  =     0.72849462365591;
17639 +    Q_ORGYN0  =     0.27150537634408;
17640 +    V_ORGYN1  =     0.75686274509803;
17641 +    V_ORGYN0  =     0.24313725490196;
17642 +    I_ORGYN  = '1' ;
17643 +    U_ORGYN  =                    1;
17644 +    END;
17645 +  END;
17646 +ELSE DO;
17647 +  IF  NOT MISSING(AFFL ) AND
17648 +                    12.5 <= AFFL  THEN DO;
17649 +    IF  NOT MISSING(S_MT ) AND
17650 +                    33.315 <= S_MT  THEN DO;
17651 +      _NODE_  =                   15;
17652 +      _LEAF_  =                    8;
17653 +      P_ORGYN1  =     0.77777777777777;
17654 +      P_ORGYN0  =     0.22222222222222;
17655 +      Q_ORGYN1  =     0.77777777777777;
17656 +      Q_ORGYN0  =     0.22222222222222;
17657 +      V_ORGYN1  =     0.47619047619047;
17658 +      V_ORGYN0  =     0.52380952380952;
17659 +      I_ORGYN  = '1' ;
17660 +      U_ORGYN  =                    1;
17661 +      END;
17662 +    ELSE DO;
17663 +      _ARBFMT_1 = PUT( GENDER , $1.);
17664 +       %DMNORMIP( _ARBFMT_1);
17665 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
17666 +        _NODE_  =                   28;
17667 +        _LEAF_  =                    6;
17668 +        P_ORGYN1  =     0.50318471337579;
17669 +        P_ORGYN0  =      0.4968152866242;
17670 +        Q_ORGYN1  =     0.50318471337579;
17671 +        Q_ORGYN0  =      0.4968152866242;
17672 +        V_ORGYN1  =     0.57894736842105;
17673 +        V_ORGYN0  =     0.42105263157894;
17674 +        I_ORGYN  = '1' ;
17675 +        U_ORGYN  =                    1;
17676 +        END;
17677 +      ELSE DO;
17678 +        _NODE_  =                   29;
17679 +        _LEAF_  =                    7;
17680 +        P_ORGYN1  =     0.27083333333333;
17681 +        P_ORGYN0  =     0.72916666666666;
17682 +        Q_ORGYN1  =     0.27083333333333;
17683 +        Q_ORGYN0  =     0.72916666666666;
17684 +        V_ORGYN1  =               0.2625;
17685 +        V_ORGYN0  =               0.7375;
17686 +        I_ORGYN  = '0' ;
17687 +        U_ORGYN  =                    0;
17688 +        END;
17689 +      END;
17690 +    END;
17691 +  ELSE DO;
17692 +    _NODE_  =                    6;
17693 +    _LEAF_  =                    5;
17694 +    P_ORGYN1  =     0.11979358643568;
17695 +    P_ORGYN0  =     0.88020641356432;
17696 +    Q_ORGYN1  =     0.11979358643568;
17697 +    Q_ORGYN0  =     0.88020641356432;
17698 +    V_ORGYN1  =     0.12046444121915;
17699 +    V_ORGYN0  =     0.87953555878084;
17700 +    I_ORGYN  = '0' ;
17701 +    U_ORGYN  =                    0;
17702 +    END;
17703 +  END;
17704 +
17705 +*****  RESIDUALS R_ *************;
17706 +IF  F_ORGYN  NE '1'
17707 +AND F_ORGYN  NE '0'  THEN DO;
17708 +        R_ORGYN1  = .;
17709 +        R_ORGYN0  = .;
17710 + END;
17711 + ELSE DO;
17712 +       R_ORGYN1  =  -P_ORGYN1 ;
17713 +       R_ORGYN0  =  -P_ORGYN0 ;
17714 +       SELECT( F_ORGYN  );
17715 +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
17716 +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
17717 +       END;
17718 + END;
17719 +
17720 +****************************************************************;
17721 +******          END OF DECISION TREE SCORING CODE         ******;
17722 +****************************************************************;
17723 +
17724 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17725  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
17726  quit;
17727  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17728  filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
17729  *------------------------------------------------------------*;
17730  * Tree2: Scoring VALIDATE data;
17731  *------------------------------------------------------------*;
17732  data EMWS1.Tree2_VALIDATE
17733  / view=EMWS1.Tree2_VALIDATE
17734  ;
17735  set EMWS1.Part_VALIDATE
17736  ;
17737  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
17738 +****************************************************************;
17739 +******             DECISION TREE SCORING CODE             ******;
17740 +****************************************************************;
17741 +
17742 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17743 +LENGTH F_ORGYN  $   12;
17744 +LENGTH I_ORGYN  $   12;
17745 +LENGTH _WARN_  $    4;
17746 +
17747 +******              LABELS FOR NEW VARIABLES              ******;
17748 +label _NODE_ = 'Node' ;
17749 +label _LEAF_ = 'Leaf' ;
17750 +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
17751 +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
17752 +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
17753 +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
17754 +label V_ORGYN1 = 'Validated: ORGYN=1' ;
17755 +label V_ORGYN0 = 'Validated: ORGYN=0' ;
17756 +label R_ORGYN1 = 'Residual: ORGYN=1' ;
17757 +label R_ORGYN0 = 'Residual: ORGYN=0' ;
17758 +label F_ORGYN = 'From: ORGYN' ;
17759 +label I_ORGYN = 'Into: ORGYN' ;
17760 +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
17761 +label _WARN_ = 'Warnings' ;
17762 +
17763 +
17764 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17765 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17766 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17767 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17768 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17769 +
17770 +
17771 +_ARBFMT_12 = PUT( ORGYN , BEST12.);
17772 + %DMNORMCP( _ARBFMT_12, F_ORGYN );
17773 +
17774 +******             ASSIGN OBSERVATION TO NODE             ******;
17775 +IF  NOT MISSING(AGE ) AND
17776 +  AGE  <                 44.5 THEN DO;
17777 +  IF  NOT MISSING(AFFL ) AND
17778 +    AFFL  <                 10.5 THEN DO;
17779 +    _ARBFMT_1 = PUT( GENDER , $1.);
17780 +     %DMNORMIP( _ARBFMT_1);
17781 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17782 +      IF  NOT MISSING(AFFL ) AND
17783 +        AFFL  <                  5.5 THEN DO;
17784 +        _NODE_  =                   16;
17785 +        _LEAF_  =                    1;
17786 +        P_ORGYN1  =             0.265625;
17787 +        P_ORGYN0  =             0.734375;
17788 +        Q_ORGYN1  =             0.265625;
17789 +        Q_ORGYN0  =             0.734375;
17790 +        V_ORGYN1  =     0.31914893617021;
17791 +        V_ORGYN0  =     0.68085106382978;
17792 +        I_ORGYN  = '0' ;
17793 +        U_ORGYN  =                    0;
17794 +        END;
17795 +      ELSE DO;
17796 +        _NODE_  =                   17;
17797 +        _LEAF_  =                    2;
17798 +        P_ORGYN1  =     0.54601226993865;
17799 +        P_ORGYN0  =     0.45398773006134;
17800 +        Q_ORGYN1  =     0.54601226993865;
17801 +        Q_ORGYN0  =     0.45398773006134;
17802 +        V_ORGYN1  =     0.60829493087557;
17803 +        V_ORGYN0  =     0.39170506912442;
17804 +        I_ORGYN  = '1' ;
17805 +        U_ORGYN  =                    1;
17806 +        END;
17807 +      END;
17808 +    ELSE DO;
17809 +      _NODE_  =                    9;
17810 +      _LEAF_  =                    3;
17811 +      P_ORGYN1  =     0.21186440677966;
17812 +      P_ORGYN0  =     0.78813559322033;
17813 +      Q_ORGYN1  =     0.21186440677966;
17814 +      Q_ORGYN0  =     0.78813559322033;
17815 +      V_ORGYN1  =     0.22110552763819;
17816 +      V_ORGYN0  =      0.7788944723618;
17817 +      I_ORGYN  = '0' ;
17818 +      U_ORGYN  =                    0;
17819 +      END;
17820 +    END;
17821 +  ELSE DO;
17822 +    _NODE_  =                    5;
17823 +    _LEAF_  =                    4;
17824 +    P_ORGYN1  =     0.72849462365591;
17825 +    P_ORGYN0  =     0.27150537634408;
17826 +    Q_ORGYN1  =     0.72849462365591;
17827 +    Q_ORGYN0  =     0.27150537634408;
17828 +    V_ORGYN1  =     0.75686274509803;
17829 +    V_ORGYN0  =     0.24313725490196;
17830 +    I_ORGYN  = '1' ;
17831 +    U_ORGYN  =                    1;
17832 +    END;
17833 +  END;
17834 +ELSE DO;
17835 +  IF  NOT MISSING(AFFL ) AND
17836 +                    12.5 <= AFFL  THEN DO;
17837 +    IF  NOT MISSING(S_MT ) AND
17838 +                    33.315 <= S_MT  THEN DO;
17839 +      _NODE_  =                   15;
17840 +      _LEAF_  =                    8;
17841 +      P_ORGYN1  =     0.77777777777777;
17842 +      P_ORGYN0  =     0.22222222222222;
17843 +      Q_ORGYN1  =     0.77777777777777;
17844 +      Q_ORGYN0  =     0.22222222222222;
17845 +      V_ORGYN1  =     0.47619047619047;
17846 +      V_ORGYN0  =     0.52380952380952;
17847 +      I_ORGYN  = '1' ;
17848 +      U_ORGYN  =                    1;
17849 +      END;
17850 +    ELSE DO;
17851 +      _ARBFMT_1 = PUT( GENDER , $1.);
17852 +       %DMNORMIP( _ARBFMT_1);
17853 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
17854 +        _NODE_  =                   28;
17855 +        _LEAF_  =                    6;
17856 +        P_ORGYN1  =     0.50318471337579;
17857 +        P_ORGYN0  =      0.4968152866242;
17858 +        Q_ORGYN1  =     0.50318471337579;
17859 +        Q_ORGYN0  =      0.4968152866242;
17860 +        V_ORGYN1  =     0.57894736842105;
17861 +        V_ORGYN0  =     0.42105263157894;
17862 +        I_ORGYN  = '1' ;
17863 +        U_ORGYN  =                    1;
17864 +        END;
17865 +      ELSE DO;
17866 +        _NODE_  =                   29;
17867 +        _LEAF_  =                    7;
17868 +        P_ORGYN1  =     0.27083333333333;
17869 +        P_ORGYN0  =     0.72916666666666;
17870 +        Q_ORGYN1  =     0.27083333333333;
17871 +        Q_ORGYN0  =     0.72916666666666;
17872 +        V_ORGYN1  =               0.2625;
17873 +        V_ORGYN0  =               0.7375;
17874 +        I_ORGYN  = '0' ;
17875 +        U_ORGYN  =                    0;
17876 +        END;
17877 +      END;
17878 +    END;
17879 +  ELSE DO;
17880 +    _NODE_  =                    6;
17881 +    _LEAF_  =                    5;
17882 +    P_ORGYN1  =     0.11979358643568;
17883 +    P_ORGYN0  =     0.88020641356432;
17884 +    Q_ORGYN1  =     0.11979358643568;
17885 +    Q_ORGYN0  =     0.88020641356432;
17886 +    V_ORGYN1  =     0.12046444121915;
17887 +    V_ORGYN0  =     0.87953555878084;
17888 +    I_ORGYN  = '0' ;
17889 +    U_ORGYN  =                    0;
17890 +    END;
17891 +  END;
17892 +
17893 +*****  RESIDUALS R_ *************;
17894 +IF  F_ORGYN  NE '1'
17895 +AND F_ORGYN  NE '0'  THEN DO;
17896 +        R_ORGYN1  = .;
17897 +        R_ORGYN0  = .;
17898 + END;
17899 + ELSE DO;
17900 +       R_ORGYN1  =  -P_ORGYN1 ;
17901 +       R_ORGYN0  =  -P_ORGYN0 ;
17902 +       SELECT( F_ORGYN  );
17903 +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
17904 +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
17905 +       END;
17906 + END;
17907 +
17908 +****************************************************************;
17909 +******          END OF DECISION TREE SCORING CODE         ******;
17910 +****************************************************************;
17911 +
17912 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17913  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
17914  quit;
17915  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17916  filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
17917  *------------------------------------------------------------*;
17918  * Tree2: Scoring TEST data;
17919  *------------------------------------------------------------*;
17920  data EMWS1.Tree2_TEST
17921  / view=EMWS1.Tree2_TEST
17922  ;
17923  set EMWS1.Part_TEST
17924  ;
17925  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
17926 +****************************************************************;
17927 +******             DECISION TREE SCORING CODE             ******;
17928 +****************************************************************;
17929 +
17930 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17931 +LENGTH F_ORGYN  $   12;
17932 +LENGTH I_ORGYN  $   12;
17933 +LENGTH _WARN_  $    4;
17934 +
17935 +******              LABELS FOR NEW VARIABLES              ******;
17936 +label _NODE_ = 'Node' ;
17937 +label _LEAF_ = 'Leaf' ;
17938 +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
17939 +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
17940 +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
17941 +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
17942 +label V_ORGYN1 = 'Validated: ORGYN=1' ;
17943 +label V_ORGYN0 = 'Validated: ORGYN=0' ;
17944 +label R_ORGYN1 = 'Residual: ORGYN=1' ;
17945 +label R_ORGYN0 = 'Residual: ORGYN=0' ;
17946 +label F_ORGYN = 'From: ORGYN' ;
17947 +label I_ORGYN = 'Into: ORGYN' ;
17948 +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
17949 +label _WARN_ = 'Warnings' ;
17950 +
17951 +
17952 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17953 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17954 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17955 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17956 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17957 +
17958 +
17959 +_ARBFMT_12 = PUT( ORGYN , BEST12.);
17960 + %DMNORMCP( _ARBFMT_12, F_ORGYN );
17961 +
17962 +******             ASSIGN OBSERVATION TO NODE             ******;
17963 +IF  NOT MISSING(AGE ) AND
17964 +  AGE  <                 44.5 THEN DO;
17965 +  IF  NOT MISSING(AFFL ) AND
17966 +    AFFL  <                 10.5 THEN DO;
17967 +    _ARBFMT_1 = PUT( GENDER , $1.);
17968 +     %DMNORMIP( _ARBFMT_1);
17969 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17970 +      IF  NOT MISSING(AFFL ) AND
17971 +        AFFL  <                  5.5 THEN DO;
17972 +        _NODE_  =                   16;
17973 +        _LEAF_  =                    1;
17974 +        P_ORGYN1  =             0.265625;
17975 +        P_ORGYN0  =             0.734375;
17976 +        Q_ORGYN1  =             0.265625;
17977 +        Q_ORGYN0  =             0.734375;
17978 +        V_ORGYN1  =     0.31914893617021;
17979 +        V_ORGYN0  =     0.68085106382978;
17980 +        I_ORGYN  = '0' ;
17981 +        U_ORGYN  =                    0;
17982 +        END;
17983 +      ELSE DO;
17984 +        _NODE_  =                   17;
17985 +        _LEAF_  =                    2;
17986 +        P_ORGYN1  =     0.54601226993865;
17987 +        P_ORGYN0  =     0.45398773006134;
17988 +        Q_ORGYN1  =     0.54601226993865;
17989 +        Q_ORGYN0  =     0.45398773006134;
17990 +        V_ORGYN1  =     0.60829493087557;
17991 +        V_ORGYN0  =     0.39170506912442;
17992 +        I_ORGYN  = '1' ;
17993 +        U_ORGYN  =                    1;
17994 +        END;
17995 +      END;
17996 +    ELSE DO;
17997 +      _NODE_  =                    9;
17998 +      _LEAF_  =                    3;
17999 +      P_ORGYN1  =     0.21186440677966;
18000 +      P_ORGYN0  =     0.78813559322033;
18001 +      Q_ORGYN1  =     0.21186440677966;
18002 +      Q_ORGYN0  =     0.78813559322033;
18003 +      V_ORGYN1  =     0.22110552763819;
18004 +      V_ORGYN0  =      0.7788944723618;
18005 +      I_ORGYN  = '0' ;
18006 +      U_ORGYN  =                    0;
18007 +      END;
18008 +    END;
18009 +  ELSE DO;
18010 +    _NODE_  =                    5;
18011 +    _LEAF_  =                    4;
18012 +    P_ORGYN1  =     0.72849462365591;
18013 +    P_ORGYN0  =     0.27150537634408;
18014 +    Q_ORGYN1  =     0.72849462365591;
18015 +    Q_ORGYN0  =     0.27150537634408;
18016 +    V_ORGYN1  =     0.75686274509803;
18017 +    V_ORGYN0  =     0.24313725490196;
18018 +    I_ORGYN  = '1' ;
18019 +    U_ORGYN  =                    1;
18020 +    END;
18021 +  END;
18022 +ELSE DO;
18023 +  IF  NOT MISSING(AFFL ) AND
18024 +                    12.5 <= AFFL  THEN DO;
18025 +    IF  NOT MISSING(S_MT ) AND
18026 +                    33.315 <= S_MT  THEN DO;
18027 +      _NODE_  =                   15;
18028 +      _LEAF_  =                    8;
18029 +      P_ORGYN1  =     0.77777777777777;
18030 +      P_ORGYN0  =     0.22222222222222;
18031 +      Q_ORGYN1  =     0.77777777777777;
18032 +      Q_ORGYN0  =     0.22222222222222;
18033 +      V_ORGYN1  =     0.47619047619047;
18034 +      V_ORGYN0  =     0.52380952380952;
18035 +      I_ORGYN  = '1' ;
18036 +      U_ORGYN  =                    1;
18037 +      END;
18038 +    ELSE DO;
18039 +      _ARBFMT_1 = PUT( GENDER , $1.);
18040 +       %DMNORMIP( _ARBFMT_1);
18041 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
18042 +        _NODE_  =                   28;
18043 +        _LEAF_  =                    6;
18044 +        P_ORGYN1  =     0.50318471337579;
18045 +        P_ORGYN0  =      0.4968152866242;
18046 +        Q_ORGYN1  =     0.50318471337579;
18047 +        Q_ORGYN0  =      0.4968152866242;
18048 +        V_ORGYN1  =     0.57894736842105;
18049 +        V_ORGYN0  =     0.42105263157894;
18050 +        I_ORGYN  = '1' ;
18051 +        U_ORGYN  =                    1;
18052 +        END;
18053 +      ELSE DO;
18054 +        _NODE_  =                   29;
18055 +        _LEAF_  =                    7;
18056 +        P_ORGYN1  =     0.27083333333333;
18057 +        P_ORGYN0  =     0.72916666666666;
18058 +        Q_ORGYN1  =     0.27083333333333;
18059 +        Q_ORGYN0  =     0.72916666666666;
18060 +        V_ORGYN1  =               0.2625;
18061 +        V_ORGYN0  =               0.7375;
18062 +        I_ORGYN  = '0' ;
18063 +        U_ORGYN  =                    0;
18064 +        END;
18065 +      END;
18066 +    END;
18067 +  ELSE DO;
18068 +    _NODE_  =                    6;
18069 +    _LEAF_  =                    5;
18070 +    P_ORGYN1  =     0.11979358643568;
18071 +    P_ORGYN0  =     0.88020641356432;
18072 +    Q_ORGYN1  =     0.11979358643568;
18073 +    Q_ORGYN0  =     0.88020641356432;
18074 +    V_ORGYN1  =     0.12046444121915;
18075 +    V_ORGYN0  =     0.87953555878084;
18076 +    I_ORGYN  = '0' ;
18077 +    U_ORGYN  =                    0;
18078 +    END;
18079 +  END;
18080 +
18081 +*****  RESIDUALS R_ *************;
18082 +IF  F_ORGYN  NE '1'
18083 +AND F_ORGYN  NE '0'  THEN DO;
18084 +        R_ORGYN1  = .;
18085 +        R_ORGYN0  = .;
18086 + END;
18087 + ELSE DO;
18088 +       R_ORGYN1  =  -P_ORGYN1 ;
18089 +       R_ORGYN0  =  -P_ORGYN0 ;
18090 +       SELECT( F_ORGYN  );
18091 +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
18092 +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
18093 +       END;
18094 + END;
18095 +
18096 +****************************************************************;
18097 +******          END OF DECISION TREE SCORING CODE         ******;
18098 +****************************************************************;
18099 +
18100 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18101  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
18102  quit;
18103  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18105  proc sort data=WORK.EM_USER_REPORT;
18106  by ID VIEW;
18107  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18108  *------------------------------------------------------------*;
18109  * Tree2: Computing metadata for TRAIN data;
18110  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18507  data EMWS1.Tree2_EMINFO;
18508  length TARGET KEY $32 DATA $43;
18509  input TARGET KEY DATA $;
18510  cards;
 
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
18514  run;
18515  proc sort data = EMWS1.Tree2_EMINFO NOTHREADS;
18516  by TARGET KEY;
18517  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
18518  proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18519  by TARGET KEY;
18520  run;
 
NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18521  proc sort data = EMWS1.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18522  by TARGET KEY;
18523  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18524  data EMWS1.Tree2_EMINFO;
18525  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18526  by TARGET KEY;
18527  run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
18528  proc datasets lib=work nolist;
18529  delete TEMP_INFO SORTEDEMINFO;
18530  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18531  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS1.TREE2_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                30 November 2021
Time:                14:43:05
*------------------------------------------------------------*
18555  data EMWS1.Tree2_EMOUTFIT;
18556  set EMWS1.Tree2_EMOUTFIT;
18557  length TargetLabel $200;
18558  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18559  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMOUTFIT.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
18560  proc sort data=EMWS1.Tree2_EMREPORTFIT nothreads;
18561  by TARGET;
18562  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMREPORTFIT.
NOTE: The data set EMWS1.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
18563  %let _EMwarndup = 0;
18564  %let _EMtargetdup =;
18565  %let _EMASEtargetdup =;
18566  data _null_;
18567  set EMWS1.Tree2_EMOUTFIT;
18568  if .<_ASE_<0.000001 then do;
18569  call symput('_EMwarndup', '1');
18570  call symput('_EMtargetdup', target);
18571  call symput('_EMASEtargetdup', put(_ASE_, best.));
18572  end;
18573  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18574  %let EMEXCEPTIONSTRING=;
18575  *------------------------------------------------------------*;
18576  * REPORT: Tree2;
18577  *------------------------------------------------------------*;
18578  %let EM_ACTION = REPORT;
18579  %let syscc = 0;
18580  %macro main;
18581
18582    %if %upcase(&EM_ACTION) = CREATE %then %do;
18583      filename temp catalog 'sashelp.emmodl.tree_create.source';
18584      %include temp;
18585      filename temp;
18586
18587      %em_tree_create;
18588    %end;
18589
18590     %else
18591     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18592
18593         filename temp catalog 'sashelp.emmodl.tree_train.source';
18594         %include temp;
18595         filename temp;
18596         %em_tree_train;
18597     %end;
18598
18599    %else
18600    %if %upcase(&EM_ACTION) = SCORE %then %do;
18601      filename temp catalog 'sashelp.emmodl.tree_score.source';
18602      %include temp;
18603      filename temp;
18604
18605      %em_tree_score;
18606
18607    %end;
18608
18609    %else
18610    %if %upcase(&EM_ACTION) = REPORT %then %do;
18611
18612         filename temp catalog 'sashelp.emmodl.tree_report.source';
18613         %include temp;
18614         filename temp;
18615
18616         %em_tree_report;
18617     %end;
18618
18619    %else
18620    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18621
18622         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18623         %include temp;
18624         filename temp;
18625         %EM_TREE_OPENTREEVIEWER;
18626
18627     %end;
18628
18629    %else
18630    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18631
18632         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18633         %include temp;
18634         filename temp;
18635         %EM_TREE_CLOSETREEVIEWER;
18636
18637     %end;
18638
18639
18640     %doendm:
18641  %mend main;
18642
18643  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18645 +%macro em_tree_makePlotDs( multipleTar= );
18647 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18648 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18649 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18650 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18652 +  /* determine if validation statistics will be displayed */
18653 +  %let validflag=N;
18654 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18655 +    /* determine if validation data exists */
18656 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18657 +      %let validflag=Y;
18658 +    %end;
18659 +  %end;
18661 +   /* retrieve name of decmeta even in presence of multiple targets */
18662 +   %let decmeta = ;
18663 +   %if &EM_DEC_DECMETA eq %then %do;
18664 +     data _Target;
18665 +       set &em_data_variableset;
18666 +       where ROLE='TARGET' and USE in('D', 'Y');
18667 +       keep NAME;
18668 +     run;
18669 +     proc sort data=_Target;
18670 +       by NAME;
18671 +     run;
18672 +     proc sort data=EM_TARGETDECINFO;
18673 +       by TARGET;
18674 +     run;
18675 +     data _Target;
18676 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18677 +       by NAME;
18678 +       if _a then do;
18679 +         call symput('decmeta', trim(DECMETA));
18680 +       end;
18681 +     run;
18682 +     proc delete data=_Target;run;
18683 +   %end;
18684 +   %else %let decmeta = &EM_DEC_DECMETA;
18687 +  /* retrieve targetEvent from decmeta */
18688 +  %let targetEvent=;
18689 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18690 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18691 +      data _null_;
18692 +       set &DECMETA(where=(_TYPE_="TARGET"));
18693 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18694 +      run;
18695 +    %end;
18696 +  %end;
18698 +  /* retrieve predicted var for targetEvent from decmeta */
18699 +  %let predTarget=;
18700 +  %let predLvl=;
18701 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18702 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18703 +      data _null_;
18704 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18705 +       call symput('predTarget', strip(VARIABLE));
18706 +       call symput('predLvl', strip(LEVEL));
18707 +      run;
18708 +    %end;
18709 +  %end;
18710 +  %else %do;
18711 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18712 +      data _null_;
18713 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18714 +       call symput('predTarget', strip(VARIABLE));
18715 +      run;
18716 +    %end;
18717 +  %end;
18719 +  /* create BelowText value */
18720 +  data belowtext;
18721 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18722 +    keep node belowtext;
18723 +  run;
18725 +  /* replace belowtext with variable label if it exists */
18726 +  data belowtext2;
18727 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18728 +    keep node belowtextlbl;
18729 +  run;
18731 +  proc sort data=belowtext; by node; run;
18732 +  proc sort data=belowtext2; by node; run;
18734 +  data belowtext;
18735 +    merge belowtext belowtext2(in=_a);
18736 +    by node;
18737 +    if _a then belowtext=belowtextlbl;
18738 +    keep node belowtext;
18739 +  run;
18741 +  /* create AboveText value */
18742 +  data abovetext;
18743 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18744 +  run;
18745 +  proc sort data=abovetext; by node numeric_value; run;
18747 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18748 +  data abovetext;
18749 +    set abovetext(rename=(node=parent));
18750 +    by parent numeric_value;
18751 +    retain abovetext tempstring flag branch origval origchar ;
18752 +    length abovetext $256;
18753 +    length tempstring origchar $64;
18755 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18756 +      if first.parent then do;
18757 +        if missing(character_value) then do;
18758 +          numeric_value = round(numeric_value, &sp_precision);
18759 +          abovetext = "< "||strip(NUMERIC_VALUE);
18760 +          branch = 1;
18761 +          origval = numeric_value;
18762 +          output;
18763 +        end;
18764 +        else do;
18765 +          abovetext = "< "||strip(CHARACTER_VALUE);
18766 +          branch = 1;
18767 +          origchar = character_value;
18768 +          output;
18769 +        end;
18771 +        if first.parent AND last.parent then do;
18772 +          if missing(character_value) then do;
18773 +            numeric_value = round(numeric_value, &sp_precision);
18774 +            branch = branch + 1;
18775 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18776 +            output;
18777 +          end;
18778 +          else do;
18779 +            branch = branch + 1;
18780 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18781 +            output;
18782 +          end;
18783 +        end;
18784 +      end;
18785 +      else if last.parent then do;
18786 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18787 +          if missing(character_value) then do;
18788 +            numeric_value = round(numeric_value, &sp_precision);
18789 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18790 +          end;
18791 +          else do;
18792 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18793 +          end;
18794 +          branch = branch + 1;
18795 +          output;
18797 +          if missing(character_value) then do;
18798 +            numeric_value = round(numeric_value, &sp_precision);
18799 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18800 +          end;
18801 +          else do;
18802 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18803 +          end;
18804 +          branch = branch + 1;
18805 +          output;
18806 +        end;
18807 +        else do;
18808 +          if missing(character_value) then do;
18809 +            numeric_value = round(numeric_value, &sp_precision);
18810 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18811 +          end;
18812 +          else do;
18813 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18814 +          end;
18815 +          branch = branch + 1;
18816 +          output;
18817 +        end;
18818 +      end;
18819 +      else do;
18820 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18821 +          if missing(character_value) then do;
18822 +            numeric_value = round(numeric_value,&sp_precision);
18823 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18824 +            origval = numeric_value;
18825 +          end;
18826 +          else do;
18827 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18828 +            origchar = character_value;
18829 +          end;
18830 +          branch = branch + 1;
18831 +          output;
18833 +        end;
18834 +        else do;
18835 +          if missing(character_value) then do;
18836 +            numeric_value = round(numeric_value, &sp_precision);
18837 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18838 +            origval = numeric_value;
18839 +          end;
18840 +          else do;
18841 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18842 +            origval = character_value;
18843 +          end;
18844 +          branch = branch + 1;
18845 +          output;
18846 +        end;
18847 +      end;
18848 +    end;
18849 +    else do;
18850 +       if first.numeric_value then do;
18851 +         flag = 0;
18852 +         abovetext = strip(CHARACTER_VALUE);
18853 +         branch = numeric_value;
18854 +         if first.numeric_value AND last.numeric_value then do;
18855 +           output;
18856 +         end;
18857 +       end;
18858 +       else if last.numeric_value then do;
18859 +         if flag=0 then do;
18860 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18861 +           length = length(strip(tempstring));
18862 +           if length < 32 then do;
18863 +             abovetext = strip(tempstring);
18864 +           end;
18865 +           else do;
18866 +             abovetext = strip(abovetext)||", ...";
18867 +             flag = 1;
18868 +           end;
18869 +         end;
18870 +         branch = numeric_value;
18871 +         output;
18872 +       end;
18873 +       else do;
18874 +         if flag=0 then do;
18875 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18876 +           length = length(strip(tempstring));
18877 +           if length < 32 then do;
18878 +             abovetext = strip(tempstring);
18879 +           end;
18880 +           else do;
18881 +             abovetext = strip(abovetext)||", ...";
18882 +             flag=1;
18883 +           end;
18884 +         end;
18885 +         branch = numeric_value;
18886 +       end;
18887 +    end;
18888 +    keep parent branch abovetext;
18889 +  run;
18891 +  /* Missing value to abovetext */
18892 +  data tempmissing;
18893 +    set &EM_USER_OUTRULES;
18894 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18895 +    rename node=parent numeric_value=branch character_value=misschar;
18896 +  run;
18899 +  proc sort data=abovetext; by parent branch; run;
18900 +  proc sort data=tempmissing; by parent branch; run;
18901 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18903 +  data tempoutnodes;
18904 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18905 +    by parent branch;
18906 +    length traintotal validtotal 8;
18907 +    retain traintotal validtotal;
18909 +    if _a then do;
18910 +      if ^MISSING(abovetext) then do;
18911 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18912 +      end;
18913 +      else do;
18914 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18915 +      end;
18916 +    end;
18917 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18919 +    if node=1 then do;
18920 +      traintotal = N;
18921 +      validtotal=VN;
18922 +    end;
18924 +    drop role rank stat misschar belowtext;
18925 +  run;
18926 +  proc sort data=tempoutnodes; by node; run;
18927 +  proc sort data=belowtext; by node; run;
18929 +  data tempoutnodes;
18930 +    merge tempoutnodes belowtext;
18931 +    by node;
18933 +  run;
18935 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18936 +  %let adjusted = N;
18937 +  %let npriors = 0;
18938 +  data _null_ ;
18939 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18940 +    if eof then do ;
18941 +      call symput("npriors" , strip(put(_N_,best.))) ;
18942 +    end;
18943 +  run;
18944 +  %if &npriors gt 0 %then %let adjusted=Y;
18947 +  /* create a table with targetUsed and targetLevel columns for each node */
18948 +  data temptarmeta;
18949 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18950 +    %if &multipleTar eq N %then %do;
18951 +      AND USE in ('D', 'Y')
18952 +    %end;
18953 +    ));
18954 +    length TARGET $32;
18955 +    Target=name;
18956 +    keep target level;
18957 +  run;
18959 +  %if &multipleTar eq Y %then %do;
18960 +    data temptargetused;
18961 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18962 +      keep node target;
18963 +    run;
18964 +    proc sort data=temptargetused; by target; run;
18965 +    proc sort data=temptarmeta; by target; run;
18966 +    data temptargetused;
18967 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18968 +      by target;
18969 +      if _a and _b;
18970 +    run;
18971 +  %end;
18972 +  %else %do;
18973 +    data temptargetused;
18974 +      set &EM_USER_OUTSTATS;
18975 +      length target $32 tarlevel $10;
18976 +      target="%EM_TARGET";
18977 +      tarlevel="%EM_TARGET_LEVEL";
18978 +      keep node target tarlevel;
18979 +    run;
18980 +    proc sort data=temptargetused nodupkey; by node; run;
18981 +  %end;
18983 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
18984 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18985 +  proc sort data=temptargetused; by node; run;
18988 +  /* create tables for all interval targets as well as all class targets */
18989 +  data tempinterval tempclass;
18990 +    merge tempoutstats temptargetused( rename=(target=targetused));
18991 +    by node;
18992 +    %if "&multipleTar" eq "Y" %then %do;
18993 +      if ((missing(Target)) OR (target=targetused ));
18994 +    %end;
18996 +    if tarlevel="INTERVAL" then output tempinterval;
18997 +    else output tempclass;
18998 +  run;
19000 +  /* initialize intTarget and classTarget flags */
19001 +  %let em_intNobs =0;
19002 +  %let em_classNobs = 0;
19003 +  %let em_intTarget= N;
19004 +  %let em_classTarget= N;
19006 +  proc sql;
19007 +    reset noprint;
19008 +    select count(*) into :em_intNobs from tempinterval;
19009 +  quit;
19010 +  proc sql;
19011 +    reset noprint;
19012 +    select count(*) into :em_classNobs from tempclass;
19013 +  quit;
19015 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19016 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19018 +  /* retrieve all information for interval targets */
19019 +  %if &em_intTarget eq Y %then %do;
19021 +    /* determine if leaf variable exists */
19022 +    %let dsid=%sysfunc(open(tempinterval,i));
19023 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19024 +    %let rc=%sysfunc(close(&dsid));
19026 +    proc transpose data=tempinterval
19027 +      %if &leafexists %then %do;
19028 +        (drop=leaf)
19029 +      %end;
19030 +      %if &validexist %then %do;
19031 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19032 +      %end;
19033 +      %else %do;
19034 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19035 +      %end;
19036 +      by node;
19037 +      id statname;
19038 +    run;
19039 +    data tempinterval;
19040 +      set tempinterval;
19041 +      if missing(N) then delete;
19042 +    run;
19043 +  %end;
19045 +  /* retrieve all information for class targets */
19046 +  %if &em_classTarget eq Y %then %do;
19047 +    proc sort data=tempclass; by node category; run;
19048 +    %if &validflag eq N %then %do;
19049 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19050 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19051 +    %end;
19052 +    %else %do;
19053 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19054 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19055 +    %end;
19056 +      set tempclass;
19058 +      %if &validflag eq N %then %do;
19059 +        %if "&adjusted" eq "N" %then %do;
19060 +          if statname="N" then output tempn;
19061 +        %end;
19062 +        %else %do;
19063 +          if statname="NPRIORS" then output tempn;
19064 +        %end;
19065 +        else if statname="PREDICTION" then output temppredict;
19066 +        else if statname="PROBABILITY" then output tempprob;
19067 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19068 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19069 +      %end;
19070 +      %else %do;
19071 +        %if "&adjusted" eq "N" %then %do;
19072 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19073 +        %end;
19074 +        %else %do;
19075 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19076 +        %end;
19077 +        else if statname="PREDICTION" then output temppredict;
19078 +        else if statname="PROBABILITY" then output tempprob;
19079 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19080 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19081 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19082 +      %end;
19083 +    run;
19086 +    /* determine if profit/loss exists in tempprofit */
19087 +    %let em_profitflag=0;
19088 +    %let em_lossflag=0;
19089 +    proc sql;
19090 +      reset noprint;
19091 +      select count(*) into :em_profitflag from tempprofit;
19092 +    quit;
19093 +    proc sql;
19094 +      reset noprint;
19095 +      select count(*) into :em_lossflag from temploss;
19096 +    quit;
19098 +    %if &validFlag eq Y %then %do;
19099 +      proc transpose data=tempn
19100 +        %if "&adjusted" eq "N" %then %do;
19101 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19102 +        %end;
19103 +        %else %do;
19104 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19105 +        %end;
19106 +        by node;
19107 +        id statname;
19108 +      run;
19109 +      %if &em_profitflag ne 0 %then %do;
19110 +        proc transpose data=tempprofit out=tempprofit;
19111 +          by node category;
19112 +          id statname ;
19113 +        run;
19114 +      %end;
19115 +      %if &em_lossflag ne 0 %then %do;
19116 +        proc transpose data=temploss out=temploss;
19117 +          by node category;
19118 +          id statname ;
19119 +        run;
19120 +      %end;
19121 +      data tempprob;
19122 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19123 +        by node
19124 +        %if &multipleTar eq Y %then %do;
19125 +          target
19126 +        %end;
19127 +        category;
19128 +      run;
19129 +    %end;
19131 +    /* store percentcorrect value */
19132 +    data temppredict;
19133 +      merge tempprob temppredict(in=_a);
19134 +      by node category;
19135 +      if _a then do;
19136 +        percentCorrect = statvalue;
19137 +        %if &validFlag eq Y %then %do;
19138 +          vpercentCorrect= vstatvalue;
19139 +        %end;
19140 +      end;
19141 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19142 +      %if &validFlag eq Y %then %do;
19143 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19144 +      %end;
19145 +      ;
19146 +      if missing(percentCorrect) then delete;
19147 +      drop target;
19148 +    run;
19150 +    /* build profittext */
19151 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19152 +      data tempprofittext(keep= node profittext profitloss);
19153 +        length profittext $800 profitloss 8.;
19154 +        retain profittext profitloss;
19156 +        merge tempprob
19157 +        %if &em_profitflag ne 0 %then %do;
19158 +          tempprofit
19159 +        %end;
19160 +        %else %if &em_lossflag ne 0 %then %do;
19161 +          temploss
19162 +        %end;
19163 +        ;
19164 +        by node category;
19166 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19167 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19168 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19169 +          %let profittype = ALL;
19170 +        %end;
19172 +        /* create the profitloss variable for nodecolor if selected */
19173 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19175 +        %if "&profittype" eq "ALL" %then %do;
19176 +          if strip(CATEGORY)="&targetEvent" then do;
19177 +            profitloss=statvalue;
19178 +          end;
19179 +          if first.node then do;
19180 +            %if &validFlag eq N %then %do;
19181 +             %if &em_profitflag ne 0 %then %do;
19182 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19183 +             %end;
19184 +             %if &em_lossflag ne 0 %then %do;
19185 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19186 +             %end;
19187 +            %end;
19188 +            %else %do;
19189 +             %if &em_profitflag ne 0 %then %do;
19190 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19190!+;
19191 +             %end;
19192 +             %if &em_lossflag ne 0 %then %do;
19193 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19194 +             %end;
19195 +            %end;
19196 +          end;
19197 +          else if last.node then do;
19198 +            %if &validFlag eq N %then %do;
19199 +             %if &em_profitflag ne 0 %then %do;
19200 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19201 +             %end;
19202 +             %if &em_lossflag ne 0 %then %do;
19203 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19204 +             %end;
19205 +             /*if CATEGORY="&targetEvent" then do;
19206 +               profitloss=statvalue;
19207 +             end;*/
19208 +            %end;
19209 +            %else %do;
19210 +             %if &em_profitflag ne 0 %then %do;
19211 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19211!+14.&EM_PROPERTY_SPLITPRECISION);
19212 +                if CATEGORY="&targetEvent" then do;
19213 +                 profitloss=ALTERNATIVE_PROFIT;
19214 +                end;
19215 +             %end;
19216 +             %if &em_lossflag ne 0 %then %do;
19217 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19217!+14.&EM_PROPERTY_SPLITPRECISION);
19218 +                if CATEGORY="&targetEvent" then do;
19219 +                  profitloss=ALTERNATIVE_LOSS;
19220 +                end;
19221 +             %end;
19222 +            %end;
19223 +            output;
19224 +          end;
19225 +          else do;
19226 +            %if &validFlag eq N %then %do;
19227 +             %if &em_profitflag ne 0 %then %do;
19228 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19229 +             %end;
19230 +             %if &em_lossflag ne 0 %then %do;
19231 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19232 +             %end;
19233 +            %end;
19234 +            %else %do;
19235 +             %if &em_profitflag ne 0 %then %do;
19236 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19236!+14.&EM_PROPERTY_SPLITPRECISION);
19237 +             %end;
19238 +             %if &em_lossflag ne 0 %then %do;
19239 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19239!+14.&EM_PROPERTY_SPLITPRECISION);
19240 +             %end;
19241 +            %end;
19242 +          end;
19243 +        %end;
19244 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19245 +          if strip(CATEGORY) = "&targetevent" then do;
19246 +            %if &validFlag eq N %then %do;
19247 +             %if &em_profitflag ne 0 %then %do;
19248 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19249 +             %end;
19250 +             %if &em_lossflag ne 0 %then %do;
19251 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19252 +             %end;
19253 +             profitloss=statvalue;
19254 +            %end;
19255 +            %else %do;
19256 +             %if &em_profitflag ne 0 %then %do;
19257 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19257!+;
19258 +                profitloss=ALTERNATIVE_PROFIT;
19259 +             %end;
19260 +             %if &em_lossflag ne 0 %then %do;
19261 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19262 +                profitloss=ALTERNATIVE_LOSS;
19263 +             %end;
19264 +            %end;
19265 +            output;
19266 +          end;
19267 +        %end;
19268 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19269 +          if strip(CATEGORY) = "&targetevent" then do;
19270 +            %if &validFlag eq N %then %do;
19271 +             profitloss=statvalue;
19272 +            %end;
19273 +            %else %do;
19274 +             %if &em_profitflag ne 0 %then %do;
19275 +                profitloss=ALTERNATIVE_PROFIT;
19276 +             %end;
19277 +             %if &em_lossflag ne 0 %then %do;
19278 +                profitloss=ALTERNATIVE_LOSS;
19279 +             %end;
19280 +            %end;
19281 +            output;
19282 +          end;
19283 +        %end;
19284 +      run;
19285 +    %end;
19287 +    data tempprob(keep= node probtext);
19288 +      length probtext $800;
19289 +      retain probtext;
19290 +      set tempprob ;
19291 +      by node;
19293 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19294 +      %let probtype = &EM_PROPERTY_TARGET;
19295 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19296 +        %let probtype = ALL;
19297 +      %end;
19299 +      %if "&probtype" eq "ALL" %then %do;
19300 +        if first.node then do;
19301 +          %if &validFlag eq N %then %do;
19302 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19303 +          %end;
19304 +          %else %do;
19305 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19306 +          %end;
19307 +        end;
19308 +        else if last.node then do;
19309 +          %if &validFlag eq N %then %do;
19310 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19311 +          %end;
19312 +          %else %do;
19313 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19314 +          %end;
19315 +          output;
19316 +        end;
19317 +        else do;
19318 +          %if &validFlag eq N %then %do;
19319 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19320 +          %end;
19321 +          %else %do;
19322 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19323 +          %end;
19324 +        end;
19325 +      %end;
19326 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19327 +        if strip(CATEGORY) = "&targetevent" then do;
19328 +          %if &validFlag eq N %then %do;
19329 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19330 +          %end;
19331 +          %else %do;
19332 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19333 +          %end;
19334 +          output;
19335 +        end;
19336 +      %end;
19337 +      %else %if "&probtype" eq "NONE" %then %do;
19338 +        if last.node then do;
19339 +          output;
19340 +        end;
19341 +      %end;
19342 +    run;
19343 +  %end;
19345 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19347 +  %let oldexists=0;
19348 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19349 +     data old_tree_plot;
19350 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19351 +        rename nodecolor=oldnodecolor;
19352 +     run;
19354 +     proc sort data=old_tree_plot;
19355 +        by node;
19356 +     run;
19358 +     %let oldexists=1;
19359 +  %end;
19361 +  data &EM_USER_TREE_PLOT;
19362 +    length textall $800;
19363 +    merge tempoutnodes temptargetused
19365 +    %if &em_intTarget eq Y %then %do;
19366 +      tempinterval
19367 +    %end;
19369 +    %if &em_classTarget eq Y %then %do;
19371 +      %if &validFlag eq N %then %do;
19372 +        tempn(rename=(statvalue=N))
19373 +      %end;
19374 +      %else %do;
19375 +        tempn
19376 +      %end;
19378 +      temppredict tempprob
19380 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19381 +        tempprofittext
19382 +      %end;
19383 +    %end;
19384 +    ;
19385 +    by node;
19387 +    /* build nodetext based on user selection */
19388 +    textall="";
19390 +    %if &em_intTarget eq Y %then %do;
19391 +    if tarlevel="INTERVAL" then do;
19392 +      /* Nodeid */
19393 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19394 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19395 +      %end;
19397 +      /* Target identifier if multiple targets are used */
19398 +      %if "&multipleTar" eq "Y" %then %do;
19399 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19400 +      %end;
19402 +      %if &validFlag eq Y %then %do;
19403 +         /* Column labels displayed in validflag eq Y only */
19404 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19405 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19405!+noquote ))";
19406 +         %end;
19408 +         /* Average values */
19409 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19410 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19411 +         %end;
19413 +         /* RASE */
19414 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19415 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19416 +         %end;
19418 +         /* Count */
19419 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19420 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19421 +         %end;
19422 +      %end;
19423 +      %else %do;
19424 +         /* Average values */
19425 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19426 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19427 +         %end;
19429 +         /* RASE */
19430 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19431 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19432 +         %end;
19434 +         /* Count */
19435 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19436 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19437 +         %end;
19438 +      %end;
19440 +      /* nodecolor */
19441 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19442 +        nodecolor=PREDICTION;
19443 +      %end;
19444 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19445 +        nodecolor=RASE;
19446 +      %end;
19447 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19448 +        nodecolor=1;
19449 +      %end;
19451 +    end;
19452 +    %end;
19453 +    %if &em_classTarget eq Y %then %do;
19454 +    if tarlevel^="INTERVAL" then  do;
19456 +      /* Nodeid */
19457 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19458 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19459 +      %end;
19460 +      /* Target identifier if multiple targets are used */
19461 +      %if "&multipleTar" eq "Y" %then %do;
19462 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19463 +      %end;
19465 +      /* Predicted values */
19466 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19467 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19468 +      %end;
19470 +      /* Column labels displayed in validflag eq Y only */
19471 +      %if "&ValidFlag" eq "Y" %then %do;
19472 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19473 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19473!+noquote ))";
19474 +        %end;
19475 +      %end;
19477 +      /* Target Values */
19478 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19479 +        textall=strip(textall)||"0A"x||strip(probtext);
19480 +      %end;
19482 +      /* include profit or loss for all target levels */
19483 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19484 +        textall=strip(textall)||"0A"x||strip(profittext);
19485 +      %end;
19487 +      %if &validFlag eq N %then %do;
19488 +        /* Percent Correct */
19489 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19490 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19491 +        %end;
19493 +         /* Count */
19494 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19495 +          %if "&adjusted" eq "N" %then %do;
19496 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19497 +          %end;
19498 +          %else %do;
19499 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19500 +          %end;
19501 +         %end;
19502 +      %end;
19503 +      %else %do;
19504 +        /* Percent Correct */
19505 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19506 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19507 +        %end;
19509 +         /* Count */
19510 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19511 +          %if "&adjusted" eq "N" %then %do;
19512 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19513 +          %end;
19514 +          %else %do;
19515 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19516 +          %end;
19517 +         %end;
19518 +      %end;
19520 +      /* nodecolor */
19521 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19522 +       %if &multipleTar ne Y %then %do;
19523 +        nodecolor=&predTarget;
19524 +       %end;
19525 +       %else %do;
19526 +         nodecolor=percentcorrect;
19527 +       %end;
19528 +      %end;
19529 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19530 +        nodecolor=percentcorrect;
19531 +      %end;
19532 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19533 +        nodecolor=1;
19534 +      %end;
19535 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19536 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19537 +          nodecolor=percentcorrect;
19538 +        %end;
19539 +        %else %do;
19540 +          nodecolor=profitloss;
19541 +        %end;
19542 +      %end;
19544 +    end;
19545 +    %end;
19546 +    %if &em_intTarget eq Y %then %do;
19547 +     drop  PREDICTION  TARGET TARLEVEL
19548 +     %if &ValidFlag eq Y %then %do;
19549 +         VPREDICTION
19550 +     %end;
19551 +     ;
19552 +    %end;
19553 +    %if &em_classTarget eq Y %then %do;
19554 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19555 +     %if &ValidFlag eq Y %then %do;
19556 +         VSTATVALUE
19557 +     %end;
19558 +     ;
19559 +    %end;
19561 +  run;
19563 +  /* add leaf index information to plotds - based on primary target only*/
19564 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19565 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19566 +      set &EM_USER_OUTSTATS;
19567 +      if ((statname="PROBABILITY"
19568 +      %if &validexist %then %do;
19569 +       or statname="VALID: PROBABILITY"
19570 +      %end;
19571 +      ) AND (CATEGORY="&TARGETEVENT")
19572 +      %if "&multipleTar" eq "Y" %then %do;
19573 +        AND (Target="%EM_TARGET")
19574 +      %end;
19575 +      );
19576 +    run;
19578 +    %if &validexist %then %do;
19579 +      proc sort data=tempprob; by node; run;
19580 +      %let vpredTarget = V%substr(&predTarget, 2);
19581 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19582 +         by node;
19583 +         id statname;
19584 +      run;
19585 +    %end;
19586 +  %end;
19587 +  %else %do;
19588 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19589 +      set &EM_USER_OUTSTATS;
19590 +      if ((statname="PREDICTION"
19591 +      %if &validexist %then %do;
19592 +       or statname="VALID: PREDICTION"
19593 +      %end;
19594 +      )
19595 +      %if "&multipleTar" eq "Y" %then %do;
19596 +        AND (Target="%EM_TARGET")
19597 +      %end;
19598 +      );
19599 +    run;
19600 +    %if &validexist %then %do;
19601 +      proc sort data=tempprob; by node; run;
19602 +      %let vpredTarget = V%substr(&predTarget, 2);
19603 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19604 +         by node;
19605 +         id statname;
19606 +      run;
19607 +    %end;
19608 +  %end;
19610 +  proc sort data=tempprob; by node; run;
19611 +  data tempoutnodes;
19612 +    merge tempoutnodes tempprob;
19613 +    by node;
19614 +  run;
19616 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19617 +  data tempnodes;
19618 +    retain traintotal validtotal;
19619 +    set tempnodes(where=(leaf ne . ));
19620 +    tprob=round(&predTarget, .01);
19621 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19622 +      percevent_train=round(tprob*100, .01);
19623 +    %end;
19624 +    %else %do;
19625 +      percevent_train=tprob;
19626 +    %end;
19628 +    perc_train=round((n/traintotal)*100, 0.01);
19629 +    /* leafwidth already has a *10 multiplier */
19630 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19632 +    %if &validexist %then %do;
19633 +      %let vpredTarget = V%substr(&predTarget,2);
19634 +      vprob=round(&vpredTarget, .01);
19635 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19636 +        percevent_valid=round(vprob*100, .01);
19637 +      %end;
19638 +      %else %do;
19639 +        percevent_valid=vprob;
19640 +      %end;
19641 +      perc_valid=round((vn/validtotal)*100, .01);
19642 +    %end;
19644 +    index=_N_;
19645 +    keep node index tprob perc_train percevent_train
19646 +    %if &validexist %then %do;
19647 +        vprob percevent_valid perc_valid
19648 +    %end;
19649 +    ;
19650 +  run;
19651 +  proc sort data=tempnodes; by node; run;
19652 +  data &EM_USER_TREE_PLOT;
19653 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19654 +    by node;
19655 +    if missing(node) then delete;
19656 +    %if &oldexists %then %do;
19657 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19658 +      drop oldnodecolor;
19659 +    %end;
19660 +    abovetext = compbl(abovetext);
19662 +    /* add variable labels */
19663 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19664 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19665 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19666 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19667 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19668 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19670 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19671 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19672 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19673 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19674 +          %end;
19675 +          %else %do;
19676 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19677 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19678 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19679 +          %end;
19680 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19682 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19683 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19684 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19685 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19686 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19687 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19688 +          %end;
19689 +          %else %do;
19690 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19691 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19692 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19693 +          %end;
19694 +    ;
19695 +  run;
19697 +  /* delete temporary tables */
19698 +  proc datasets lib=work nolist;
19699 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19700 +  run;
19702 +%mend em_tree_makePlotDs;
19706 +%macro em_tree_report;
19708 +   /* report properties */
19709 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19710 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19711 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19712 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19713 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19714 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19715 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19716 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19717 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19718 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19719 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19720 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19721 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19723 +   %let validexist=0;
19724 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19725 +     %let validexist=1;
19726 +   %end;
19728 +   /* determine if multiple targets will be processed */
19729 +   %let em_tree_multipleTargets=N;
19730 +   %let em_tree_numTarget=1;
19731 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19732 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19733 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19734 +         %let em_tree_multipleTargets=N;
19735 +      %end;
19736 +      %else %do;
19737 +        data _null_;
19738 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19739 +          if eof then
19740 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19741 +        run;
19743 +        %if &em_tree_numTarget gt 1 %then %do;
19744 +           %let em_tree_multipleTargets=Y;
19745 +        %end;
19746 +     %end;
19747 +   %end;
19749 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19751 +   /* variable importance */
19752 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19753 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19755 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19756 +     /* and the columns may not be generated                                                                                 */
19757 +     %let em_tree_cvexists=;
19758 +     %let em_tree_surrexists=.;
19759 +     data _null_;
19760 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19761 +       if eof then do ;
19762 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19763 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19764 +       end;
19765 +     run;
19767 +     data &EM_USER_OUTIMPORT;
19768 +         set &EM_USER_OUTIMPORT;
19769 +         /* format columns based on Precison value specified */
19770 +         format importance 15.&EM_PROPERTY_PRECISION
19771 +              %if &validexist %then %do;
19772 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19773 +              %end;
19774 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19775 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19776 +              %end;
19777 +         ;
19778 +     run;
19780 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19781 +     proc print data=&EM_USER_OUTIMPORT
19782 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19783 +          (where=((nrules>0) OR (nsurrogates>0)))
19784 +        %end;
19785 +        %else %do;
19786 +           (where=(nrules>0))
19787 +        %end;
19788 +        label noobs
19789 +        ;
19790 +     run;
19791 +     title10;
19793 +   %end;
19795 +   /* Sequence */
19796 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19797 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19798 +   data _null_ ;
19799 +      set &EM_USER_outseq (obs=2) end=eof ;
19800 +      if eof then do ;
19801 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19802 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19803 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19804 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19805 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19806 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19807 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19808 +      end;
19809 +    run;
19811 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19812 +      data &EM_USER_OUTSEQ;
19813 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19814 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19815 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19816 +           _XMISC_=_VMISC_
19817 +        %end;
19818 +        %if "&em_tree_aprof" ne "."  %then %do;
19819 +           _XAPROF_=_VAPROF_
19820 +           _XPROF_ = _VPROF_
19821 +        %end;
19822 +        %if "&em_tree_aloss" ne "."  %then %do;
19823 +           _XALOSS_=_VALOSS_
19824 +        %end;
19825 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19826 +           _XPASE_ = _VPASE_
19827 +           _XPMISC_ = _VPMISC_
19828 +        %end;
19830 +        ));
19831 +     %end;
19832 +     %else %do;
19833 +        set &EM_USER_OUTSEQ;
19834 +     %end;
19836 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19837 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19838 +            _MISC_   15.&EM_PROPERTY_PRECISION
19839 +         %end;
19840 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19841 +            _PASE_  15.&EM_PROPERTY_PRECISION
19842 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19843 +         %end;
19844 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19845 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19846 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19847 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19848 +            %end;
19849 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19850 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19851 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19852 +            %end;
19853 +         %end;
19854 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19855 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19856 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19857 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19858 +            %end;
19859 +         %end;
19860 +         %if "&em_tree_seq" ne "." %then %do;
19861 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19862 +         %end;
19863 +         %if "&em_tree_vseq" ne "." %then %do;
19864 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19865 +         %end;
19866 +         %if "&em_tree_aprof" ne "." %then %do;
19867 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19868 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19869 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19870 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19871 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19872 +           %end;
19873 +         %end;
19874 +         %else %if "&em_tree_aloss" ne "." %then %do;
19875 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19876 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19877 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19878 +           %end;
19879 +         %end;
19880 +      ;
19881 +    run;
19882 +   %end;
19884 +   /* Observation Based Importance */
19885 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19887 +      /* need to check for 0 obs */
19888 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19889 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19890 +      %let rc=%sysfunc(close(&dsid));
19892 +      %if &onobs %then %do;
19893 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19894 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19896 +         data &EM_USER_OUTOBSIMP;
19897 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19898 +           if _a;
19899 +           by _INPUT1_;
19900 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19901 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19902 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19903 +                   %end;
19904 +                   ;
19905 +         run;
19906 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19907 +      %end;
19908 +   %end;
19910 +  %end;
19912 +  /* create dataset to support tree diagram and icicle plot */
19913 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19914 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19916 +  /* display tree diagram */
19917 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19918 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19920 +  /* display icicle diagram */
19921 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19922 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19924 +  /* Leaf Statistics Plot */
19925 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19927 +  /* print leaf information to output window */
19928 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19930 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19931 +       by descending N;
19932 +     run;
19934 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19935 +     %local vn;
19936 +     data _null_;
19937 +       set t (obs=2) end=eof;
19938 +       if eof then do;
19939 +         call symput("vn", strip(put(vn, best.)));
19940 +       end;
19941 +     run;
19943 +     data t;
19944 +       set t;
19945 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19946 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19947 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19948 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19949 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19950 +       %end;
19951 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19952 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19953 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19954 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19955 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19956 +          %end;
19957 +       %end;
19958 +       ;
19959 +     run;
19961 +     /* determine if rase is found in t */
19962 +    %let dsid=%sysfunc(open(t,i));
19963 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19964 +    %let rc=%sysfunc(close(&dsid));
19966 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19967 +     proc print data=t noobs label;
19968 +       where tprob ne .;
19969 +       var node depth N tprob
19970 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19971 +         %if "&vn" ne "." %then %do;
19972 +           VN
19973 +         %end;
19974 +         vprob
19975 +       %end;
19976 +       %if &raseexists %then %do;
19977 +            RASE
19978 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19979 +              VRASE
19980 +            %end;
19981 +       %end;
19982 +       ;
19983 +     run;
19984 +     title10;
19985 +  %end;
19987 +  /* create plots that are done during training of node */
19988 +  /* display iterative plot, including reference line */
19989 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19990 +   /* %if &nleaves eq  %then %do; */
19991 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19992 +      data _null_;
19993 +        set &EM_USER_OUTTOPOLOGY end=eof;
19994 +        if eof then do;
19995 +          call symput('nleaves', LEAF);
19996 +        end;
19997 +      run;
19998 +   /* %end; */
20000 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20001 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20002 +  %end;
20004 +  /* display leaf statistics */
20005 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20007 +  /* stats by node if multiple targets = Y */
20008 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20009 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20010 +    data &EM_USER_OUTSTATS;
20011 +      set &EM_USER_OUTSTATS;
20013 +     * if STATNAME="TARGET" then delete;
20014 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20015 +      drop leaf;
20016 +    run;
20017 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20019 +  %end;
20020 +  %else %do;
20021 +    /* add outstats and outdescribe to spk but not results */
20022 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20023 +  %end;
20025 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE2_OUTSEQ.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 21 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_ORGYN_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_ORGYN_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 11 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 11 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 219 observations read from the data set EMWS1.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 105 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 90 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 105 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 30 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 15 observations read from the data set WORK.TEMPN.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE2_TREE_PLOT has 15 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.TREE2_TREE_PLOT.
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE2_TREE_PLOT has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 15 observations read from the data set EMWS1.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
20026
20027  *------------------------------------------------------------*;
20028  * End REPORT: Tree2;
20029  *------------------------------------------------------------*;
 
20030  /* Reset EM Options */
20031  options formchar="|----|+|---+=|-/\<>*";
20032  options nocenter ls=256 ps=10000;
20033  goptions reset=all device=GIF NODISPLAY;
 
20034  proc sort data=WORK.EM_USER_REPORT;
20035  by ID VIEW;
20036  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20037  proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20038  by NAME;
20039  run;
 
NOTE: There were 18 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 18 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20040  proc sort data=EMWS1.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20041  by NAME;
20042  run;
 
NOTE: There were 18 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 18 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20043  data WORK.ASSESS_META;
20044  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20045  by NAME;
20046  run;
 
NOTE: There were 18 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 18 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 18 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20047  data EM_temp_assessMeta;
20048  set EMWS1.Tree2_CMeta_TRAIN;
20049  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20050  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
20051  data EM_temp_assessdata;
20052  set EMWS1.Tree2_TRAIN(keep=
20053  F_ORGYN
20054  I_ORGYN
20055  P_ORGYN0
20056  P_ORGYN1
20057  Q_ORGYN0
20058  Q_ORGYN1
20059  R_ORGYN0
20060  R_ORGYN1
20061  U_ORGYN
20062  V_ORGYN0
20063  V_ORGYN1
20064  _WARN_
20065  ORGYN
20066  );
20067  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4000 observations read from the data set EMWS1.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 4000 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24345   data EM_temp_assessMeta;
24346   set EMWS1.Tree2_CMeta_TRAIN;
24347   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24348   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24349   data EM_temp_assessdata;
24350   set EMWS1.Tree2_VALIDATE(keep=
24351   F_ORGYN
24352   I_ORGYN
24353   P_ORGYN0
24354   P_ORGYN1
24355   Q_ORGYN0
24356   Q_ORGYN1
24357   R_ORGYN0
24358   R_ORGYN1
24359   U_ORGYN
24360   V_ORGYN0
24361   V_ORGYN1
24362   _WARN_
24363   ORGYN
24364   );
24365   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 3000 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 3000 observations read from the data set EMWS1.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 3000 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28652   %let _cn = %sysfunc(getoption(CENTER));
28653   options nocenter;
28654   proc print data=EMWS1.Tree2_EMREPORTFIT noobs label;
28655   var STAT LABEL TRAIN
28656   VALIDATE
28657   TEST
28658   ;
28659   by TARGET TARGETLABEL;
28660   title9 ' ';
28661   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28662   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28663   title10;
28664   options &_cn;
 
28665   proc sort data=EMWS1.Tree2_EMCLASSIFICATION nothreads;
28666   by DATAROLE TARGET TARGETLABEL;
28667   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE2_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
28668   %let _cn = %sysfunc(getoption(CENTER));
28669   options nocenter;
28670   proc print data=EMWS1.Tree2_EMCLASSIFICATION noobs label;
28671   var from into pct_row pct_col count percent
28672   ;
28673   by DATAROLE TARGET TARGETLABEL;
28674   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28675   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28676   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28677   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28678   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28679   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28680   where _TYPE_='PREDICTION';
28681   title9 ' ';
28682   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28683   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
 
 
28684   title9;
28685   title10;
28686   options &_cn;
 
28687   %let _cn = %sysfunc(getoption(CENTER));
28688   options nocenter;
28689   data EMWS1.Tree2_EMEVENTREPORT;
28690   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
28691   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28691 ! FALSEEVENT
28692   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28693      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28694   FALSEEVENT=0;
28695   FALSENEVENT=0;
28696   TRUEEVENT=0;
28697   TRUENEVENT=0;
28698   set EMWS1.Tree2_EMEVENTREPORT;
28699   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.04 seconds
 
 
28700   proc print data=EMWS1.Tree2_EMEVENTREPORT noobs label;
28701   title9 ' ';
28702   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28703   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28704   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
28705   title10;
28706   options &_cn;
 
28707   proc datasets library=EMWS1 nolist;
28708   modify Tree2_EMRANK;
28709   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28710   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28711   run;
 
NOTE: MODIFY was successful for EMWS1.TREE2_EMRANK.DATA.
28712   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
 
 
28713   %let _cn = %sysfunc(getoption(CENTER));
28714   options nocenter;
28715   proc print data=EMWS1.Tree2_EMRANK label noobs;
28716   var
28717   decile gain lift liftc resp respc N _meanP_;
28718   by
28719   notsorted DATAROLE
28720   notsorted TARGET
28721   notsorted TARGETLABEL
28722   ;
28723   title9 ' ';
28724   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28725   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28726   title10;
28727   options &_cn;
 
28728   proc datasets library=EMWS1 nolist;
28729   modify Tree2_EMSCOREDIST;
28730   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28731   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28732   run;
 
NOTE: MODIFY was successful for EMWS1.TREE2_EMSCOREDIST.DATA.
28733   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
 
 
