*------------------------------------------------------------*
User:                P2503016
Date:                30 November 2021
Time:                13:33:33
Site:                51200470
Platform:            X64_10PRO
Maintenance Release: 9.04.01M7P080520
EM Version:          15.2
*------------------------------------------------------------*
NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18936      data EMWS1.EM_TREEINT_STARTTIME;
18937      starttime=1953898412.893;
18938      run;

NOTE: The data set EMWS1.EM_TREEINT_STARTTIME has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

18939      %let _emdsep = \;
18940      %em_getactionstatus(emlib =EMWS1, nodeid=Tree);

18941      %let em_filemodtime=;
18942      data _null_;
18943      format modate best.;
18944      set sashelp.Vextfl;
18945      where fileref eq "#LN00161";
18946      call symput('EM_FILEMODTIME', put(modate, best.));
18947      run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00161';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

18948      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
18949      %let em_Train = N;
18950      %let em_Score = N;
18951      %let em_Report = N;
18952      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      


PERFORMANCE  DETAILS
19464      data EM_TARGETDECINFO;
19465      length TARGET $32 DECDATA DECMETA $43;
19466      TARGET="ORGYN";
19467      DECDATA="EMWS1.Tree_ORGYN_DD";
19468      DECMETA="EMWS1.Tree_ORGYN_DM";
19469      output;
19470      run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

19471      %let emexceptionString =;
19472      %let EMEXCEPTIONSTRING=;
19473      *------------------------------------------------------------*;
19474      * OPENINT: Tree;
19475      *------------------------------------------------------------*;
19476      %let EM_ACTION = OPENINT;
19477      %let syscc = 0;
19478      %macro main;
19479      
19480        %if %upcase(&EM_ACTION) = CREATE %then %do;
19481          filename temp catalog 'sashelp.emmodl.tree_create.source';
19482          %include temp;
19483          filename temp;
19484      
19485          %em_tree_create;
19486        %end;
19487      
19488         %else
19489         %if %upcase(&EM_ACTION) = TRAIN %then %do;
19490      
19491             filename temp catalog 'sashelp.emmodl.tree_train.source';
19492             %include temp;
19493             filename temp;
19494             %em_tree_train;
19495         %end;
19496      
19497        %else
19498        %if %upcase(&EM_ACTION) = SCORE %then %do;
19499          filename temp catalog 'sashelp.emmodl.tree_score.source';
19500          %include temp;
19501          filename temp;
19502      
19503          %em_tree_score;
19504      
19505        %end;
19506      
19507        %else
19508        %if %upcase(&EM_ACTION) = REPORT %then %do;
19509      
19510             filename temp catalog 'sashelp.emmodl.tree_report.source';
19511             %include temp;
19512             filename temp;
19513      
19514             %em_tree_report;
19515         %end;
19516      
19517        %else
19518        %if %upcase(&EM_ACTION) = OPENINT %then %do;
19519      
19520             filename temp catalog 'sashelp.emmodl.tree_actions.source';
19521             %include temp;
19522             filename temp;
19523             %EM_TREE_OPENTREEVIEWER;
19524      
19525         %end;
19526      
19527        %else
19528        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
19529      
19530             filename temp catalog 'sashelp.emmodl.tree_actions.source';
19531             %include temp;
19532             filename temp;
19533             %EM_TREE_CLOSETREEVIEWER;
19534      
19535         %end;
19536      
19537      
19538         %doendm:
19539      %mend main;
19540      
19541      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_ACTIONS.SOURCE.
19543     +%macro EM_TREE_OPENTREEVIEWER;
19545     +  options validvarname = v7;
19547     +  /* retrieve table names */
19548     +  %EM_GETNAME(key=EMTREE, type=DATA);
19549     +  %EM_GETNAME(key=BROWSETREE, type=DATA);
19551     +  /* check if the path needs to be updated; if so, delete datasets and force user to update */
19552     +  %em_getActionStatus(emlib=&EM_LIB, nodeid=&EM_NODEID);
19554     +  /* load trainmacros */
19555     +  filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
19556     +  %include temp;
19557     +  filename temp;
19559     +  %em_checkmacro(name=EM_PROPERTY_IMPORTMODEL,value=N,global=Y);
19561     +    %if "&EM_IMPORT_DATA"="" %then %do;
19562     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
19563     +       %goto doendm;
19564     +   %end;
19565     +   %if ((%sysfunc(exist(&EM_IMPORT_DATA)) ne 1) AND (%sysfunc(exist(&EM_IMPORT_DATA, VIEW)) ne 1)) %then %do;
19566     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.PATHNEEDSTORUN;
19567     +       %goto doendm;
19568     +   %end;
19570     +   /* if node needs to run or tree data doesn't exist, create a root node for interactive training */
19571     +   %if ( (%sysfunc(exist(&EM_USER_EMTREE)) ne 1 ) OR (&EM_TRAIN eq Y) ) %then %do;
19573     +       /* determine if multiple targets will be processed */
19574     +       %let em_tree_multipleTargets=N;
19575     +       %let em_tree_numTarget=1;
19576     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19577     +         /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19578     +         %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19579     +            %let em_tree_multipleTargets=N;
19580     +         %end;
19581     +         %else %do;
19582     +            /* create macro array of targets  */
19583     +            data _null_;
19584     +              set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19585     +              call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
19586     +              if eof then
19587     +                call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19588     +           run;
19590     +           %if &em_tree_numTarget gt 1 %then %do;
19591     +            %let em_tree_multipleTargets=Y;
19592     +           %end;
19593     +         %end;
19594     +       %end;
19596     +       %em_tree_runTreeProcedure(indata=&EM_IMPORT_DATA, multipleTar=&em_tree_multipleTargets, intFlag=Y);
19598     +       /* Check return code and throw exception if error is detected */
19599     +       %if &SYSERR > 0 %then %do;
19600     +          %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
19601     +          %goto doendm;
19602     +       %end;
19604     +  %end;
19606     +  /* set default values for sampling macros if they don't exist; this would happen on diagrams imported from release prior to 12.3 */
19607     +  %if "&EM_PROPERTY_CREATESAMPLE" eq "" %then %let EM_PROPERTY_CREATESAMPLE=DEFAULT;
19608     +  %if "&EM_PROPERTY_SAMPLEMETHOD" eq "" %then %let EM_PROPERTY_SAMPLEMETHOD=RANDOM;
19609     +  %if "&EM_PROPERTY_SAMPLESIZE" eq "." %then %let EM_PROPERTY_SAMPLESIZE=10000;
19610     +  %if "&EM_PROPERTY_SAMPLESEED" eq "." %then %let EM_PROPERTY_SAMPLESEED=12345;
19612     +  /* determine if sample should be used within interactive training */
19613     +  %EM_GETNAME(key=TRAINSAMPLE, type=DATA);
19614     +  %if "&EM_PROPERTY_CREATESAMPLE" ne "NONE" %then %do;
19616     +     /* determine number of obs in training table */
19617     +     %let trainobs = ;
19618     +     proc sql noprint;
19619     +       select count(*) into: trainobs from &EM_IMPORT_DATA;
19620     +     quit;
19622     +     /* retrieve appropriate sample size */
19623     +     %let maxobs = ;
19624     +     %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
19625     +       %exploreObs(data=&EM_IMPORT_DATA);
19626     +       %let maxobs = &_EXPLOREOBS_MAX;
19627     +     %end;
19628     +     %else %do;
19629     +       %let maxobs = &EM_PROPERTY_SAMPLESIZE;
19630     +     %end;
19632     +     /* create sample based on maxobs */
19633     +     %if &trainobs gt &maxobs %then %do;
19634     +        %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
19635     +          %exploreSample(data=&EM_IMPORT_DATA, seed=12345, output=&EM_USER_TRAINSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
19636     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19637     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
19638     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=12345, output=&EM_USER_VALIDSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
19639     +          %end;
19640     +        %end;
19641     +        %else %if "&EM_PROPERTY_CREATESAMPLE" eq "USER" %then %do;
19642     +          %if "&EM_PROPERTY_SAMPLEMETHOD" eq "STRATIFY" %then %do;
19643     +            %if &EM_NUM_INTERVAL_TARGET %then %do;
19644     +              %let em_tree_tempmethod = RANDOM;
19645     +            %end;
19646     +            %else %do;
19647     +              %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
19648     +            %end;
19649     +          %end;
19650     +          %else %do;
19651     +            %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
19652     +          %end;
19654     +          %exploreSample(data=&EM_IMPORT_DATA, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_TRAINSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
19655     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19656     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
19657     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_VALIDSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
19658     +          %end;
19659     +        %end;
19661     +        proc arbor data=&EM_USER_TRAINSAMPLE inmodel=&EM_USER_EMTREE refreshtrain;
19662     +          interact;
19663     +          subtree largest;
19664     +           /********** do i need CV options here? *********/
19665     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19666     +            assess validata=&&EM_USER_VALIDSAMPLE;
19667     +          %end;
19668     +          save model=&EM_USER_EMTREE;
19669     +        run;
19670     +        quit;
19671     +     %end;
19672     +  %end;
19674     +  /* create browsetree table as a copy of EMTREE to process within interactive training */
19675     +  %EM_GETNAME(key=BROWSETREE,  type=DATA);
19676     +  data &EM_USER_BROWSETREE;
19677     +    set &EM_USER_EMTREE;
19678     +  run;
19680     +  /* reset validvarname options
19681     +  %let vvarname = %sysfunc(optgetc('VALIDVARNAME'));
19682     +  options validvarname=&vvarname;  */
19683     +  %doendm:
19685     +%mend EM_TREE_OPENTREEVIEWER;
19689     +%macro EM_TREE_CLOSETREEVIEWER;
19691     +    /* clear syscc prior to running close Method */
19692     +    %let SYSCC = 0;
19693     +    options validvarname=V7;
19695     +    /* retrieve table names */
19696     +    %EM_GETNAME(key=BROWSETREE,  type=DATA);
19697     +    %EM_GETNAME(key=EMTREE,  type=DATA);
19698     +    %EM_GETNAME(key=OUTSEQ,  type=DATA);
19699     +    %EM_GETNAME(key=OUTIMPORT,  type=DATA);
19700     +    %EM_GETNAME(key=OUTNODES,  type=DATA);
19701     +    %EM_GETNAME(key=OUTSUMMARY,  type=DATA);
19702     +    %EM_GETNAME(key=OUTSTATS,  type=DATA);
19703     +    %EM_GETNAME(key=OUTTOPOLOGY,  type=DATA);
19704     +    %EM_GETNAME(key=OUTPATH,  type=DATA);
19705     +    %EM_GETNAME(key=OUTRULES,  type=DATA);
19707     +    %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
19708     +    %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
19710     +    /* load trainmacros */
19711     +    filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
19712     +    %include temp;
19713     +    filename temp;
19715     +    /* send output to node output window ; this will replace */
19716     +    /* old print with the new  print                         */
19717     +    options validvarname = v7;
19719     +    /* determine if multiple targets will be processed */
19720     +    %let em_tree_multipleTargets=N;
19721     +    %let em_tree_numTarget=1;
19722     +    %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19723     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19724     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19725     +         %let em_tree_multipleTargets=N;
19726     +      %end;
19727     +      %else %do;
19728     +         /* create macro array of targets  */
19729     +         data _null_;
19730     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19731     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
19732     +           if eof then
19733     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19734     +        run;
19736     +        %if &em_tree_numTarget gt 1 %then %do;
19737     +           %let em_tree_multipleTargets=Y;
19738     +        %end;
19739     +      %end;
19740     +    %end;
19743     + /* turn on pmml if requested */
19744     + %let nnpmml=0;
19745     + %if %symexist(EM_PMML) %then %do;
19746     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
19747     +       %let nnpmml=1;
19749     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
19750     +   %end;
19751     + %end;
19753     + %if &nnpmml %then %do;
19755     +    /* create dmdb needed for pmml generation */
19756     +    %let tree_maxlevel = 512;
19757     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
19758     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
19759     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
19760     +      %end;
19761     +    %end;
19762     +    %if &tree_maxlevel gt 0 %then %do;
19763     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
19764     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
19765     +    %end;
19767     +    %let targetOrderString =;
19768     +    %let targetString = ;
19769     +    data _null_;
19770     +       length orderString nameString $10000;
19771     +       retain orderString nameString;
19772     +       set &em_data_variableset end=eof;
19773     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
19774     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
19775     +       %end;
19776     +       %else %do;
19777     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
19778     +       %end;          select(order);
19779     +         when('')        order ='DESC';
19780     +         when('FMTASC')  order='ASCFMT';
19781     +         when('FMTDESC') order='DESFMT';
19782     +         otherwise;
19783     +       end;
19784     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
19785     +       nameString = trim(nameString)!!' '!!trim(NAME);
19787     +       if eof then do;
19788     +          call symput('targetOrderString', trim(orderString));
19789     +          call symput('targetString', trim(nameString));
19790     +       end;
19791     +    run;
19793     +    %let arborkluge= "work._treeDMDB";
19795     +    proc dmdb batch data=&EM_IMPORT_DATA
19796     +    %if &nnpmml %then %do;
19797     +        PMML
19798     +    %end;
19799     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
19801     +     %if "%EM_ID" ne "" %then %do;
19802     +       id %EM_ID;
19803     +     %end;
19804     +     %if &EM_NUM_CLASS gt 0 %then %do;
19805     +       class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
19806     +            %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
19807     +            &targetOrderString;
19808     +     %end;
19809     +     %if &EM_NUM_INTERVAL gt 0 %then %do;
19810     +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
19811     +     %end;
19812     +     target &targetString %EM_INTERVAL_TARGET;
19813     +     %if "%EM_FREQ" ne "" %then %do;
19814     +       freq %EM_FREQ;
19815     +     %end;
19816     +    run;
19817     +    quit;
19819     +    proc datasets lib=work nolist;
19820     +       delete classout varout;
19821     +    run;
19822     +    quit;
19824     + %end;
19827     +    /* run arbor to generate new results and scoring code */
19828     +    proc arbor data=&EM_IMPORT_DATA inmodel=&EM_USER_BROWSETREE refreshtrain;
19829     +       Performance &EM_PROPERTY_PERFORMANCE
19830     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19831     +         nodesize=&EM_PROPERTY_NODESAMPLE
19832     +       %end;
19833     +       ;
19834     +      interact;
19835     +      *subtree largest;
19838     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
19839     +         Assess
19840     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19841     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
19842     +              %put &em_codebar;
19843     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
19844     +              %put &errormsg;
19845     +              %put &em_codebar;
19846     +            %end;
19847     +            %else %do;
19848     +               Validata=&EM_IMPORT_VALIDATE;
19849     +            %end;
19850     +         %end;
19851     +         %else %do;
19852     +           NoValidata
19853     +         %end;
19854     +       %end;
19855     +      ;
19856     +      makemacro nleaves=nleaves;
19857     +      save
19858     +      %if "&EM_USER_EMTREE" ne "" %then %do;
19859     +         MODEL=&EM_USER_EMTREE
19860     +      %end;
19861     +      %if "&EM_USER_OUTSEQ" ne "" %then %do;
19862     +        SEQUENCE=&EM_USER_OUTSEQ
19863     +      %end;
19864     +      %if "&EM_USER_OUTIMPORT" ne "" %then %do;
19865     +        IMPORTANCE=&EM_USER_OUTIMPORT
19866     +      %end;
19867     +      %if "&EM_USER_OUTNODES" ne "" %then %do;
19868     +         NODESTAT=&EM_USER_OUTNODES
19869     +      %end;
19870     +      %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
19871     +         SUMMARY=&EM_USER_OUTSUMMARY
19872     +      %end;
19873     +      %if "&EM_USER_OUTSTATS" ne "" %then %do;
19874     +         STATSBYNODE=&EM_USER_OUTSTATS
19875     +      %end;
19876     +      %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
19877     +         TOPOLOGY=&EM_USER_OUTTOPOLOGY
19878     +      %end;
19879     +      %if "&EM_USER_OUTPATH" ne "" %then %do;
19880     +         Pathlistnonmissing=&EM_USER_OUTPATH
19881     +      %end;
19882     +      %if "&EM_USER_OUTRULES" ne "" %then %do;
19883     +         RULES = &EM_USER_OUTRULES
19884     +      %end;
19885     +      ;
19887     +      %let codetext=;
19888     +      %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
19889     +        %let codetext=&codetext DUMMY;
19890     +      %end;
19891     +      %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
19892     +        %let codetext=&codetext NOLEAFID;
19893     +      %end;
19895     +      %let norescodetxt=;
19896     +      %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
19897     +        %let norescodetxt=&codetext NOPRED;
19898     +      %end;
19900     +      %let lookupString = ;
19901     +      %if ^%symexist(EM_OPTION) %then
19902     +         %let EM_OPTION=;
19904     +      %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
19905     +         %let lookupString = LOOKUP=SELECT;
19906     +      %end;
19908     +      code file="&EM_USER_TREEFLOW" res &codetext &lookupString;
19909     +      code file="&EM_USER_TREEPUBLISH" nores &norescodetxt &lookupString;
19911     +      %if &nnpmml %then %do;
19912     +        code pmml;
19913     +      %end;
19915     +      score data=&EM_IMPORT_DATA out=_NULL_ outfit=work.fit_train role=TRAIN;
19916     +      %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19917     +        score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
19918     +      %end;
19919     +      %if (("&EM_IMPORT_TEST" ne "") AND (%sysfunc(exist(&EM_IMPORT_TEST)) or %sysfunc(exist(&EM_IMPORT_TEST,VIEW)) )) %then %do;
19920     +        score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
19921     +      %end;
19922     +    run;
19924     +    quit;
19926     +    %if &nnpmml %then %do;
19927     +       ods pmml close;
19928     +    %end;
19930     +   /* Check return code and throw exception if error is detected */
19931     +   %if &SYSERR > 0 %then %do;
19932     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
19933     +     %goto doendm;
19934     +   %end;
19936     +   /* create outfit dataset if multiple score statements have been executed */
19937     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
19939     +   /* print variable importance listing */
19940     +   %let em_tree_surrexists=.;
19941     +   data _null_;
19942     +    set &EM_USER_OUTIMPORT (obs=2) end=eof;
19943     +    if eof then do ;
19944     +      call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19945     +      call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19946     +    end;
19947     +   run;
19949     +   /* create English Rules */
19950     +   %EM_GETNAME(key=ENGLISHRULES, type=FILE, extension=txt);
19951     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
19952     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
19953     +       %em_tree_makeEnglishRules;
19955     +      /* English Rules */
19956     +      %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
19958     +     %end;
19959     +   filename x;
19961     +   %doendm:
19963     +   %EM_REPORT(key=EMINTLOG, viewtype=LOG, block=Interactive, description=Log, autodisplay=N);
19964     +   %EM_REPORT(key=EMINTOUT, viewtype=OUTPUT, block=Interactive, description=Output, autodisplay=N);
19966     +%mend EM_TREE_CLOSETREEVIEWER;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

19968      %let em_filemodtime=;
19969      data _null_;
19970      format modate best.;
19971      set sashelp.Vextfl;
19972      where fileref eq "#LN00171";
19973      call symput('EM_FILEMODTIME', put(modate, best.));
19974      run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00171';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19975      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
19976      %let em_Train = N;
19977      %let em_Score = N;
19978      %let em_Report = N;
19979      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
19981     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
19982     +  %global &nLevel;
19983     +  proc dmdb batch data=&indata
19984     +    classout=_tmp_dmdbout;
19985     +    class &target;
19986     +  run;
19987     +  data _tmp_dmdbout;
19988     +    set _tmp_dmdbout;
19989     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
19990     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
19991     +  run;
19992     +  data _null_;
19993     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
19994     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
19995     +    %let dsid = %sysfunc(close(&dsid));
19996     +     call symput("&nLevel", put(&_obs, Best12.));
19997     +  run;
19999     +  proc datasets lib=work nolist;
20000     +     delete _tmp_dmdbout;
20001     +  run;
20002     +  quit;
20003     +%Mend EM_CheckBinaryTargetLevel;
20006     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
20008     +  /* determine the number of obs in training data */
20009     +  proc sql;
20010     +    reset noprint;
20011     +    select count(*) into :em_nobs from &indata;
20012     +  quit;
20014     +  /* determine the number of input variables */
20015     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
20016     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
20018     +  /* retrieve targetEvent from decmeta */
20019     +  %let targetEvent=;
20020     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20021     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
20022     +      data _null_;
20023     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
20024     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
20025     +      run;
20026     +    %end;
20027     +  %end;
20029     +  /* create targetTable if multipleTar eq Y */
20030     +  data temptarget;
20031     +    set &EM_DATA_VARIABLESET;
20032     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
20033     +  run;
20035     + /* data sets */
20036     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
20037     + %EM_GETNAME(key=EMTREE,        type=DATA);
20038     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
20039     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
20040     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
20041     + %EM_GETNAME(key=OUTNODES,      type=DATA);
20042     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
20043     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
20044     + %EM_GETNAME(key=OUTPATH,       type=DATA);
20045     + %EM_GETNAME(key=OUTRULES,      type=DATA);
20047     + /* files */
20048     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
20049     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
20051     + /* turn on pmml if requested */
20052     + %let nnpmml=0;
20053     + %if %symexist(EM_PMML) %then %do;
20054     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
20055     +       %let nnpmml=1;
20057     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
20058     +   %end;
20059     +%end;
20061     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
20063     +%if &nnpmml or &numClassTarget %then %do;
20065     +    /* create dmdb needed for pmml generation */
20066     +    %let tree_maxlevel = 512;
20067     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
20068     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
20069     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
20070     +      %end;
20071     +    %end;
20072     +    %if &tree_maxlevel gt 0 %then %do;
20073     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
20074     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
20075     +    %end;
20077     +    %let targetOrderString =;
20078     +    %let targetString = ;
20079     +    data _null_;
20080     +       length orderString nameString $10000;
20081     +       retain orderString nameString;
20082     +       set &em_data_variableset end=eof;
20083     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
20084     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
20085     +       %end;
20086     +       %else %do;
20087     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
20088     +       %end;          select(order);
20089     +         when('')        order ='DESC';
20090     +         when('FMTASC')  order='ASCFMT';
20091     +         when('FMTDESC') order='DESFMT';
20092     +         otherwise;
20093     +       end;
20094     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
20095     +       nameString = trim(nameString)!!' '!!trim(NAME);
20097     +       if eof then do;
20098     +          call symput('targetOrderString', trim(orderString));
20099     +          call symput('targetString', trim(nameString));
20100     +       end;
20101     +    run;
20103     +    %let arborkluge= "work._treeDMDB";
20105     +    proc dmdb batch data=&indata
20106     +    %if &nnpmml %then %do;
20107     +        PMML
20108     +    %end;
20109     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
20111     +      %if &nnpmml %then %do;
20112     +           %if "%EM_ID" ne "" %then %do;
20113     +             id %EM_ID;
20114     +           %end;
20115     +           %if &EM_NUM_CLASS gt 0 %then %do;
20116     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20117     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20118     +                  &targetOrderString;
20119     +           %end;
20120     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
20121     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
20122     +           %end;
20123     +           target &targetString %EM_INTERVAL_TARGET;
20124     +           %if "%EM_FREQ" ne "" %then %do;
20125     +             freq %EM_FREQ;
20126     +           %end;
20127     +      %end;
20128     +      %else %do;
20129     +         class  &targetOrderString;
20130     +         target &targetString %EM_INTERVAL_TARGET;
20131     +      %end;
20132     +    run;
20133     +    quit;
20135     +    proc datasets lib=work nolist;
20136     +       delete classout varout;
20137     +    run;
20138     +    quit;
20140     + %end;
20143     + /* run Arbor procedure */
20144     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
20145     +  proc arbor data=&INDATA
20147     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
20148     +    Leafsize = &EM_PROPERTY_LEAFSIZE
20149     +  %end;
20151     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
20152     +    Splitsize = &EM_PROPERTY_SPLITSIZE
20153     +  %end;
20155     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
20156     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
20157     +  %end;
20159     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
20160     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
20161     +  %end;
20163     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
20164     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
20165     +  %end;
20167     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
20168     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
20169     +  %end;
20170     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
20171     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
20172     +  %end;
20173     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20174     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
20175     +  %end;
20177     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
20178     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
20179     +      alpha = &EM_PROPERTY_SIGLEVEL
20180     +    %end;
20181     +  %end;
20183     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
20184     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
20185     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
20186     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
20187     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
20189     +        padjust =
20190     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
20191     +          &chaid
20192     +        %end;
20193     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
20194     +          DEPTH
20195     +        %end;
20196     +      %end;
20197     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
20198     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
20199     +         pvars = &num_inputs
20200     +      %end;
20201     +    %end;
20202     +  %end;
20203     +  %else %do;
20204     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
20205     +         padjust = NONE
20206     +      %end;
20207     +  %end;
20209     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
20210     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
20211     +    Maxrules = &num_nrules
20212     +  %end;
20214     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
20215     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
20216     +    Maxsurrs = &num_nsurrs
20217     +  %end;
20219     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
20220     +     Missing=&EM_PROPERTY_MISSINGVALUE
20221     +  %end;
20223     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
20224     +     USEVARONCE
20225     +  %end;
20227     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
20228     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
20229     +  %end;
20232     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
20233     +    event = "&targetEvent"
20234     +  %end;
20236     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
20237     +     DECSEARCH
20238     +  %end;
20240     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
20241     +     PRIORSSEARCH
20242     +  %end;
20244     +  %if &arbor_1 ne %then %do;
20245     +    &arbor_1
20246     +  %end;
20248     +  %if &em_arbor ne %then %do;
20249     +     &em_arbor
20250     +  %end;
20251     +  ;
20252     + %end;
20253     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
20254     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
20255     +       Performance &EM_PROPERTY_PERFORMANCE
20256     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
20257     +         nodesize=&EM_PROPERTY_NODESAMPLE
20258     +       %end;
20259     +       ;
20260     +       interact;
20261     + %end;
20262     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
20263     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
20264     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
20265     +    %put &em_codebar;
20266     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
20267     +    %put &errormsg;
20268     +    %put &em_codebar;
20269     +    %goto doendm;
20270     +   %end;
20271     +   %else %do;
20272     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
20273     +       Performance &EM_PROPERTY_PERFORMANCE
20274     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
20275     +         nodesize=&EM_PROPERTY_NODESAMPLE
20276     +       %end;
20277     +       ;
20278     +       interact;
20279     +   %end;
20280     + %end;
20282     + %else %do;
20283     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
20284     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
20285     +    %put &em_codebar;
20286     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
20287     +    %put &errormsg;
20288     +    %put &em_codebar;
20289     +    %goto doendm;
20290     +   %end;
20291     +   %else %do;
20292     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
20293     +       Performance &EM_PROPERTY_PERFORMANCE
20294     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
20295     +         nodesize=&EM_PROPERTY_NODESAMPLE
20296     +       %end;
20297     +       ;
20298     +        interact;
20299     +   %end;
20300     + %end;
20302     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
20303     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
20304     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
20305     +    %end;
20307     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
20308     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
20309     +    %end;
20311     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
20312     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
20313     +    %end;
20315     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
20316     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
20317     +    %end;
20319     +    %if "%EM_FREQ" ne "" %then %do;
20320     +       freq %EM_FREQ;
20321     +    %end;
20323     +    %if "&multipleTar" eq "Y" %then %do;
20324     +       /* cycle through all target vars in variableset */
20325     +       %let tdsid = %sysfunc(open(temptarget));
20326     +       %if &tdsid %then %do;
20327     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
20328     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
20329     +          %do %while(^ %sysfunc(fetch(&tdsid)));
20330     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
20331     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
20332     +             target &var / level = &lvl
20333     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
20334     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
20335     +             %end;
20336     +             %else %if "&lvl" eq "INTERVAL" %then %do;
20337     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
20338     +             %end;
20339     +             %else %if "&lvl" eq "ORDINAL" %then %do;
20340     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
20341     +             %end;
20342     +          %end;
20343     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
20344     +       %end;
20345     +       useTarget variable = %EM_TARGET;
20346     +    %end;
20347     +    %else %do;
20348     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
20349     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
20350     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
20351     +      %end;
20352     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20353     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
20354     +      %end;
20355     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
20356     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
20357     +      %end;
20358     +    %end;
20360     +    %if "&multipleTar" eq "N" %then %do;
20361     +      &EM_DEC_STATEMENT;
20362     +    %end;
20364     +    Performance &EM_PROPERTY_PERFORMANCE
20365     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
20366     +      nodesize=&EM_PROPERTY_NODESAMPLE
20367     +    %end;
20368     +    ;
20370     +    %if "&intFlag" eq "Y" %then %do;
20371     +       INTERACT Largest;
20372     +       Train maxnewdepth=0;
20373     +    %end;
20375     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
20376     +         Assess
20377     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
20378     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
20379     +              %put &em_codebar;
20380     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
20381     +              %put &errormsg;
20382     +              %put &em_codebar;
20383     +            %end;
20384     +            %else %do;
20385     +               Validata=&EM_IMPORT_VALIDATE
20386     +            %end;
20387     +         %end;
20388     +         %else %do;
20389     +           NoValidata
20390     +         %end;
20391     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
20392     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
20393     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
20394     +               %if &dsid %then %do;
20395     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
20396     +                 %do %while(^ %sysfunc(fetch(&dsid)));
20397     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
20398     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
20399     +                   %else %do;
20400     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
20401     +                      %else %let measure= MISC;
20402     +                   %end;
20403     +                 %end;
20404     +               %end;
20405     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
20406     +            %end;
20407     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
20408     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
20409     +                 %let measure=ASE;
20410     +              %end;
20411     +              %else %do;
20412     +                 %let measure=MISC;
20413     +              %end;
20414     +            %end;
20415     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
20416     +              %let measure=ASE;
20417     +            %end;
20418     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
20419     +               %let measure = LIFT;
20420     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
20421     +               %if &dsid %then %do;
20422     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
20423     +                 %do %while(^ %sysfunc(fetch(&dsid)));
20424     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
20425     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
20426     +                 %end;
20427     +               %end;
20428     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
20429     +            %end;
20430     +            measure=&measure
20431     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
20432     +               event = "&targetEvent"
20433     +            %end;
20434     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
20435     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
20436     +            %end;
20437     +         %end;
20438     +         %if "&multipleTar" eq "N" %then %do;
20439     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
20440     +               CV
20441     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
20442     +                 CVNITer = &EM_PROPERTY_CVNITER
20443     +               %end;
20444     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
20445     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
20446     +               %end;
20447     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
20448     +                 CVSeed = &EM_PROPERTY_CVSEED
20449     +               %end;
20450     +            %end;
20451     +         %end;
20452     +       %end;
20453     +      ;
20455     +      %if "&intFlag" ne "Y" %then %do;
20456     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
20457     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
20458     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
20459     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
20461     +          SUBTREE &subtree
20462     +          %if "&subtree" eq "NLEAVES" %then %do;
20463     +            =&EM_PROPERTY_NSUBTREE
20464     +          %end;
20465     +          ;
20466     +        %end;
20468     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
20469     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
20470     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
20471     +          %end;
20472     +       %end;
20473     +      %end;
20474     + %end;
20477     + MakeMacro nleaves = nleaves;
20478     + save
20479     + %if "&EM_USER_EMTREE" ne "" %then %do;
20480     +   MODEL=&EM_USER_EMTREE
20481     + %end;
20482     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
20483     +   SEQUENCE=&EM_USER_OUTSEQ
20484     + %end;
20485     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
20486     +   IMPORTANCE=&EM_USER_OUTIMPORT
20487     + %end;
20488     + %if "&EM_USER_OUTNODES" ne "" %then %do;
20489     +   NODESTAT=&EM_USER_OUTNODES
20490     + %end;
20491     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
20492     +   SUMMARY=&EM_USER_OUTSUMMARY
20493     + %end;
20494     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
20495     +   STATSBYNODE=&EM_USER_OUTSTATS
20496     + %end;
20497     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
20498     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
20499     + %end;
20500     + %if "&EM_USER_OUTPATH" ne "" %then %do;
20501     +   Pathlistnonmissing=&EM_USER_OUTPATH
20502     + %end;
20503     + %if "&EM_USER_OUTRULES" ne "" %then %do;
20504     +   RULES = &EM_USER_OUTRULES
20505     + %end;
20506     + ;
20508     + %if "&intFlag" ne "Y" %then %do;
20510     +   %let lookupString = ;
20511     +   %if ^%symexist(EM_OPTION) %then
20512     +      %let EM_OPTION=;
20514     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
20515     +      %let lookupString = LOOKUP=SELECT;
20516     +   %end;
20518     +   %let codetext=;
20519     +   %let norescodetxt=;
20521     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
20522     +     %let codetext=&codetext DUMMY;
20523     +     %let norescodetxt=&norescodetxt DUMMY;
20524     +   %end;
20525     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
20526     +     %let codetext=&codetext NOLEAFID;
20527     +     %let norescodetxt=&norescodetxt NOLEAFID;
20528     +   %end;
20529     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
20530     +     %let norescodetxt=&norescodetxt NOPRED;
20531     +   %end;
20533     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
20534     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
20536     +   %if &nnpmml %then %do;
20537     +     code pmml;
20538     +   %end;
20540     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
20541     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20542     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
20543     +   %end;
20544     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
20545     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
20546     +   %end;
20547     + %end;
20549     + run;
20550     + quit;
20552     + /*%em_checkerror(); */
20553     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
20554     +   /* Delete DMDB catalog */
20555     +   proc datasets lib=work nolist;
20556     +       delete _treeDMDB / mt=cat;
20557     +  run;
20558     +  %end;
20560     + %if &nnpmml %then %do;
20561     +    ods pmml close;
20562     + %end;
20564     +  %doendm:
20566     +%mend em_tree_runTreeProcedure;
20568     +%macro em_tree_createFitStats( multipleTar= );
20571     +  /* create targetTable is multipleTar eq Y */
20572     +  data temptarget;
20573     +    set &EM_DATA_VARIABLESET;
20574     +    where ROLE="TARGET";
20575     +  run;
20577     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
20578     +   data &EM_USER_EMOUTFIT;
20579     +     length target $32;
20580     +     merge work.fit_train
20581     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20582     +       work.fit_valid
20583     +     %end;
20584     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
20585     +       work.fit_test
20586     +     %end;
20587     +     ;
20588     +     %if "&multipleTar" eq "N" %then %do;
20589     +       target="%EM_TARGET";
20590     +     %end;
20591     +     %else %do;
20592     +       target = _TARGET_;
20593     +     %end;
20594     +     drop _NW_ _SUMW_
20595     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20596     +        _VSUMW_
20597     +     %end;
20598     +     ;
20599     +   run;
20601     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20602     +     proc datasets library=work nolist;
20603     +       delete fit_valid;
20604     +     run;
20605     +   %end;
20606     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
20607     +     proc datasets library=work nolist;
20608     +       delete fit_test;
20609     +     run;
20610     +   %end;
20612     +%mend em_tree_createFitStats;
20615     +%macro em_tree_makeEnglishRules;
20617     +  %EM_GETNAME(key=OUTNODES, type=DATA);
20618     +  %EM_GETNAME(key=OUTPATH, type=DATA);
20620     +  /* verify that necessary tables exist and if not, skip processing */
20621     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
20622     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
20623     +    %goto doendm;
20624     +  %end;
20625     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
20626     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
20627     +    %goto doendm;
20628     +  %end;
20630     +  /* determine length of variable in outpath dataset */
20631     +  %let vlength= ;
20632     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
20633     +  %if &dsid ne %then %do;
20634     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
20635     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
20636     +  %end;
20637     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
20639     +  data tempoutpath;
20640     +    length varname $&vlength;
20641     +    retain varname;
20642     +    set &EM_USER_OUTPATH;
20644     +    if ^missing(variable) then varname=variable;
20645     +    else if ^missing(var_name) then varname=var_name;
20646     +    output;
20647     +  run;
20649     +  /* create an array of generated predicted variable names */
20650     +  %let tree_pred_vars = ;
20651     +  %let tree_pred_label = ;
20652     +  %let numpred= 0;
20653     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
20655     +    data _null_;
20656     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
20657     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
20658     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
20659     +     if eof then
20660     +       call symput('numpred', strip(put(_N_, BEST.)));
20661     +    run;
20662     +  %end;
20664     +  /* determine if NPRIORS exists in outnodes  */
20665     +  %local nprior_flag;
20666     +  data _null_;
20667     +    set &EM_USER_OUTNODES(obs=2) end=eof;
20668     +    if eof then do;
20669     +      call symput('nprior_flag', strip(put(npriors, best.)));
20670     +    end;
20671     +  run;
20673     +  proc sort data=tempoutpath; by node; run;
20674     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
20676     +  data tempoutpath;
20677     +    merge tempoutpath(in=_a) outnodes(keep= node
20678     +    %if "&nprior_flag" ne "." %then %do;
20679     +      NPRIORS
20680     +    %end;
20681     +    %else %do;
20682     +      N
20683     +    %end;
20684     +    %if &numpred gt 0 %then %do;
20685     +      %do i=1 %to &numpred;
20686     +        &&tree_pred_vars&i
20687     +      %end;
20688     +    %end;
20689     +    );
20690     +    by node;
20691     +    if _a;
20692     +  run;
20694     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
20696     +  data _null_;
20697     +    file x;
20698     +    set tempoutpath;
20699     +    by node descending varname;
20700     +    retain origvar oldnode string;
20701     +    length origvar $32 oldnode 8 string $5000;
20703     +    if _N_ = 1 then do;
20704     +      origvar = varname;
20705     +      oldnode = node;
20706     +    end;
20708     +    if first.node then do;
20709     +       put "&EM_CODEBAR";
20710     +       put " Node = " node;
20711     +       put "&EM_CODEBAR";
20712     +    end;
20714     +      if first.varname then do;
20715     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
20716     +            if MISSING(CHARACTER_VALUE) then do;
20717     +             if NUMERIC_VALUE ne .  then do;
20718     +              if ^first.node then do;
20719     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20720     +              end;
20721     +              else do;
20722     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20723     +              end;
20724     +             end;
20725     +            end;
20726     +            else do;
20727     +              if ^first.node then do;
20728     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20729     +              end;
20730     +              else do;
20731     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20732     +              end;
20733     +             end;
20734     +         end;
20735     +         else if RELATION in ("=") then do;
20736     +            if ^first.node then do;
20737     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
20738     +            end;
20739     +            else do;
20740     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
20741     +            end;
20742     +         end;
20743     +         else if RELATION in ("ISMISSING") then do;
20744     +            if ^first.node then do;
20745     +              string = " AND "|| strip(varname) || " equals Missing";
20746     +            end;
20747     +            else do;
20748     +              string = "if "|| strip(varname) ||" equals Missing";
20749     +            end;
20750     +         end;
20751     +         else if RELATION in ("ISNOTMISSING") then do;
20752     +            if ^first.node then do;
20753     +              string = " AND "|| strip(varname) || " equals All Values";
20754     +            end;
20755     +            else do;
20756     +              string = "if "|| strip(varname) ||" equals All Values";
20757     +            end;
20758     +         end;
20759     +         if ^missing(varname) then origvar = varname;
20760     +         oldnode=node;
20762     +      end;
20763     +      else do;
20764     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
20765     +          if MISSING(CHARACTER_VALUE) then do;
20766     +           if  NUMERIC_VALUE ne .  then do;
20767     +            if ^MISSING(string) then
20768     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20769     +            else
20770     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20771     +           end;
20772     +          end;
20773     +          else do;
20774     +            if ^MISSING(string) then
20775     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20776     +            else
20777     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20778     +          end;
20780     +         end;
20781     +         else if RELATION in ("=") then do;
20782     +           string = strip(string)||", "||strip(character_value);
20783     +         end;
20784     +         else if RELATION in ("ISMISSING") then do;
20786     +         end;
20787     +         if ^missing(varname) then origvar = varname;
20788     +         oldnode=node;
20789     +      end;
20790     +      if last.varname then do;
20791     +         if RELATION in ("ISMISSING") then do;
20792     +           if ^first.varname then do;
20793     +             string = strip(string) || " or MISSING";
20794     +           end;
20795     +         end;
20796     +         put string;
20797     +         if ^missing(varname) then origvar = varname;
20798     +         oldnode=node;
20799     +      end;
20801     +      if last.node then do;
20802     +         put "then ";
20803     +         put " Tree Node Identifier   = " node;
20805     +         %if "&nprior_flag" ne "." %then %do;
20806     +           put " Number of Observations = " NPRIORS;
20807     +         %end;
20808     +         %else %do;
20809     +           put " Number of Observations = " N;
20810     +         %end;
20812     +         %if &numpred gt 0 %then %do;
20813     +           %do i=1 %to &numpred;
20814     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
20815     +           %end;
20816     +         %end;
20818     +         put " ";
20819     +         if ^missing(varname) then origvar = varname;
20820     +         oldnode=node;
20821     +      end;
20823     +  run;
20825     +  proc datasets lib=work nolist;
20826     +    delete tempoutpath outnodes;
20827     +  run;
20829     +  %doendm:
20830     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: EXPLOREOBS EMWS1.Part_TRAIN : vars= 18 : recl= 136 : max=20000 : def= 2000

NOTE: There were 1125 observations read from the data set EMWS1.TREE_EMTREE.
NOTE: The data set EMWS1.TREE_BROWSETREE has 1125 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

20832      
20833      *------------------------------------------------------------*;
20834      * End OPENINT: Tree;
20835      *------------------------------------------------------------*;

20836      proc printto;
20837      run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16464      filename newout "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMINTOUT.out" encoding="UTF-8" NOBOM;
16465      data _null_;
16466      call symput('NLDATE', strip(put(date(), NLDATE.)));
16467      call symput('NLTIME', strip(put(datetime(), NLTIME.)));
16468      run;

NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

16469      data _null_;
16470      nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "&nldate" );
16471      nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "&nltime" );
16472      file newout;
16473      put "*------------------------------------------------------------*";
16474      put "%sysfunc(sasmsg(sashelp.dmine, log_user_note,      NOQUOTE, %nrbquote(&sysuserid)))";
16475      put nldate;
16476      put nltime;
16477      put "*------------------------------------------------------------*";
16478      put ' ';
16479      run;

NOTE: The file NEWOUT is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMINTOUT.out,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=30 November 2021 13:36:51,
      Create Time=30 November 2021 13:36:51

NOTE: 6 records were written to the file NEWOUT.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

16480      proc printto print=newout;
16481      run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

PERFORMANCE  DETAILS
16993      data EM_TARGETDECINFO;
16994      length TARGET $32 DECDATA DECMETA $43;
16995      TARGET="ORGYN";
16996      DECDATA="EMWS1.Tree_ORGYN_DD";
16997      DECMETA="EMWS1.Tree_ORGYN_DM";
16998      output;
16999      run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

17000      %let emexceptionString =;
17001      %let EMEXCEPTIONSTRING=;
17002      *------------------------------------------------------------*;
17003      * CLOSEINT: Tree;
17004      *------------------------------------------------------------*;
17005      %let EM_ACTION = CLOSEINT;
17006      %let syscc = 0;
17007      %macro main;
17008      
17009        %if %upcase(&EM_ACTION) = CREATE %then %do;
17010          filename temp catalog 'sashelp.emmodl.tree_create.source';
17011          %include temp;
17012          filename temp;
17013      
17014          %em_tree_create;
17015        %end;
17016      
17017         %else
17018         %if %upcase(&EM_ACTION) = TRAIN %then %do;
17019      
17020             filename temp catalog 'sashelp.emmodl.tree_train.source';
17021             %include temp;
17022             filename temp;
17023             %em_tree_train;
17024         %end;
17025      
17026        %else
17027        %if %upcase(&EM_ACTION) = SCORE %then %do;
17028          filename temp catalog 'sashelp.emmodl.tree_score.source';
17029          %include temp;
17030          filename temp;
17031      
17032          %em_tree_score;
17033      
17034        %end;
17035      
17036        %else
17037        %if %upcase(&EM_ACTION) = REPORT %then %do;
17038      
17039             filename temp catalog 'sashelp.emmodl.tree_report.source';
17040             %include temp;
17041             filename temp;
17042      
17043             %em_tree_report;
17044         %end;
17045      
17046        %else
17047        %if %upcase(&EM_ACTION) = OPENINT %then %do;
17048      
17049             filename temp catalog 'sashelp.emmodl.tree_actions.source';
17050             %include temp;
17051             filename temp;
17052             %EM_TREE_OPENTREEVIEWER;
17053      
17054         %end;
17055      
17056        %else
17057        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17058      
17059             filename temp catalog 'sashelp.emmodl.tree_actions.source';
17060             %include temp;
17061             filename temp;
17062             %EM_TREE_CLOSETREEVIEWER;
17063      
17064         %end;
17065      
17066      
17067         %doendm:
17068      %mend main;
17069      
17070      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_ACTIONS.SOURCE.
17072     +%macro EM_TREE_OPENTREEVIEWER;
17074     +  options validvarname = v7;
17076     +  /* retrieve table names */
17077     +  %EM_GETNAME(key=EMTREE, type=DATA);
17078     +  %EM_GETNAME(key=BROWSETREE, type=DATA);
17080     +  /* check if the path needs to be updated; if so, delete datasets and force user to update */
17081     +  %em_getActionStatus(emlib=&EM_LIB, nodeid=&EM_NODEID);
17083     +  /* load trainmacros */
17084     +  filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
17085     +  %include temp;
17086     +  filename temp;
17088     +  %em_checkmacro(name=EM_PROPERTY_IMPORTMODEL,value=N,global=Y);
17090     +    %if "&EM_IMPORT_DATA"="" %then %do;
17091     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17092     +       %goto doendm;
17093     +   %end;
17094     +   %if ((%sysfunc(exist(&EM_IMPORT_DATA)) ne 1) AND (%sysfunc(exist(&EM_IMPORT_DATA, VIEW)) ne 1)) %then %do;
17095     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.PATHNEEDSTORUN;
17096     +       %goto doendm;
17097     +   %end;
17099     +   /* if node needs to run or tree data doesn't exist, create a root node for interactive training */
17100     +   %if ( (%sysfunc(exist(&EM_USER_EMTREE)) ne 1 ) OR (&EM_TRAIN eq Y) ) %then %do;
17102     +       /* determine if multiple targets will be processed */
17103     +       %let em_tree_multipleTargets=N;
17104     +       %let em_tree_numTarget=1;
17105     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17106     +         /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17107     +         %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17108     +            %let em_tree_multipleTargets=N;
17109     +         %end;
17110     +         %else %do;
17111     +            /* create macro array of targets  */
17112     +            data _null_;
17113     +              set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17114     +              call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17115     +              if eof then
17116     +                call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17117     +           run;
17119     +           %if &em_tree_numTarget gt 1 %then %do;
17120     +            %let em_tree_multipleTargets=Y;
17121     +           %end;
17122     +         %end;
17123     +       %end;
17125     +       %em_tree_runTreeProcedure(indata=&EM_IMPORT_DATA, multipleTar=&em_tree_multipleTargets, intFlag=Y);
17127     +       /* Check return code and throw exception if error is detected */
17128     +       %if &SYSERR > 0 %then %do;
17129     +          %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
17130     +          %goto doendm;
17131     +       %end;
17133     +  %end;
17135     +  /* set default values for sampling macros if they don't exist; this would happen on diagrams imported from release prior to 12.3 */
17136     +  %if "&EM_PROPERTY_CREATESAMPLE" eq "" %then %let EM_PROPERTY_CREATESAMPLE=DEFAULT;
17137     +  %if "&EM_PROPERTY_SAMPLEMETHOD" eq "" %then %let EM_PROPERTY_SAMPLEMETHOD=RANDOM;
17138     +  %if "&EM_PROPERTY_SAMPLESIZE" eq "." %then %let EM_PROPERTY_SAMPLESIZE=10000;
17139     +  %if "&EM_PROPERTY_SAMPLESEED" eq "." %then %let EM_PROPERTY_SAMPLESEED=12345;
17141     +  /* determine if sample should be used within interactive training */
17142     +  %EM_GETNAME(key=TRAINSAMPLE, type=DATA);
17143     +  %if "&EM_PROPERTY_CREATESAMPLE" ne "NONE" %then %do;
17145     +     /* determine number of obs in training table */
17146     +     %let trainobs = ;
17147     +     proc sql noprint;
17148     +       select count(*) into: trainobs from &EM_IMPORT_DATA;
17149     +     quit;
17151     +     /* retrieve appropriate sample size */
17152     +     %let maxobs = ;
17153     +     %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
17154     +       %exploreObs(data=&EM_IMPORT_DATA);
17155     +       %let maxobs = &_EXPLOREOBS_MAX;
17156     +     %end;
17157     +     %else %do;
17158     +       %let maxobs = &EM_PROPERTY_SAMPLESIZE;
17159     +     %end;
17161     +     /* create sample based on maxobs */
17162     +     %if &trainobs gt &maxobs %then %do;
17163     +        %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
17164     +          %exploreSample(data=&EM_IMPORT_DATA, seed=12345, output=&EM_USER_TRAINSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
17165     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
17166     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
17167     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=12345, output=&EM_USER_VALIDSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
17168     +          %end;
17169     +        %end;
17170     +        %else %if "&EM_PROPERTY_CREATESAMPLE" eq "USER" %then %do;
17171     +          %if "&EM_PROPERTY_SAMPLEMETHOD" eq "STRATIFY" %then %do;
17172     +            %if &EM_NUM_INTERVAL_TARGET %then %do;
17173     +              %let em_tree_tempmethod = RANDOM;
17174     +            %end;
17175     +            %else %do;
17176     +              %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
17177     +            %end;
17178     +          %end;
17179     +          %else %do;
17180     +            %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
17181     +          %end;
17183     +          %exploreSample(data=&EM_IMPORT_DATA, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_TRAINSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
17184     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
17185     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
17186     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_VALIDSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
17187     +          %end;
17188     +        %end;
17190     +        proc arbor data=&EM_USER_TRAINSAMPLE inmodel=&EM_USER_EMTREE refreshtrain;
17191     +          interact;
17192     +          subtree largest;
17193     +           /********** do i need CV options here? *********/
17194     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
17195     +            assess validata=&&EM_USER_VALIDSAMPLE;
17196     +          %end;
17197     +          save model=&EM_USER_EMTREE;
17198     +        run;
17199     +        quit;
17200     +     %end;
17201     +  %end;
17203     +  /* create browsetree table as a copy of EMTREE to process within interactive training */
17204     +  %EM_GETNAME(key=BROWSETREE,  type=DATA);
17205     +  data &EM_USER_BROWSETREE;
17206     +    set &EM_USER_EMTREE;
17207     +  run;
17209     +  /* reset validvarname options
17210     +  %let vvarname = %sysfunc(optgetc('VALIDVARNAME'));
17211     +  options validvarname=&vvarname;  */
17212     +  %doendm:
17214     +%mend EM_TREE_OPENTREEVIEWER;
17218     +%macro EM_TREE_CLOSETREEVIEWER;
17220     +    /* clear syscc prior to running close Method */
17221     +    %let SYSCC = 0;
17222     +    options validvarname=V7;
17224     +    /* retrieve table names */
17225     +    %EM_GETNAME(key=BROWSETREE,  type=DATA);
17226     +    %EM_GETNAME(key=EMTREE,  type=DATA);
17227     +    %EM_GETNAME(key=OUTSEQ,  type=DATA);
17228     +    %EM_GETNAME(key=OUTIMPORT,  type=DATA);
17229     +    %EM_GETNAME(key=OUTNODES,  type=DATA);
17230     +    %EM_GETNAME(key=OUTSUMMARY,  type=DATA);
17231     +    %EM_GETNAME(key=OUTSTATS,  type=DATA);
17232     +    %EM_GETNAME(key=OUTTOPOLOGY,  type=DATA);
17233     +    %EM_GETNAME(key=OUTPATH,  type=DATA);
17234     +    %EM_GETNAME(key=OUTRULES,  type=DATA);
17236     +    %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17237     +    %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17239     +    /* load trainmacros */
17240     +    filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
17241     +    %include temp;
17242     +    filename temp;
17244     +    /* send output to node output window ; this will replace */
17245     +    /* old print with the new  print                         */
17246     +    options validvarname = v7;
17248     +    /* determine if multiple targets will be processed */
17249     +    %let em_tree_multipleTargets=N;
17250     +    %let em_tree_numTarget=1;
17251     +    %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17252     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17253     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17254     +         %let em_tree_multipleTargets=N;
17255     +      %end;
17256     +      %else %do;
17257     +         /* create macro array of targets  */
17258     +         data _null_;
17259     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17260     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17261     +           if eof then
17262     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17263     +        run;
17265     +        %if &em_tree_numTarget gt 1 %then %do;
17266     +           %let em_tree_multipleTargets=Y;
17267     +        %end;
17268     +      %end;
17269     +    %end;
17272     + /* turn on pmml if requested */
17273     + %let nnpmml=0;
17274     + %if %symexist(EM_PMML) %then %do;
17275     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
17276     +       %let nnpmml=1;
17278     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
17279     +   %end;
17280     + %end;
17282     + %if &nnpmml %then %do;
17284     +    /* create dmdb needed for pmml generation */
17285     +    %let tree_maxlevel = 512;
17286     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
17287     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
17288     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
17289     +      %end;
17290     +    %end;
17291     +    %if &tree_maxlevel gt 0 %then %do;
17292     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
17293     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
17294     +    %end;
17296     +    %let targetOrderString =;
17297     +    %let targetString = ;
17298     +    data _null_;
17299     +       length orderString nameString $10000;
17300     +       retain orderString nameString;
17301     +       set &em_data_variableset end=eof;
17302     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
17303     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
17304     +       %end;
17305     +       %else %do;
17306     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
17307     +       %end;          select(order);
17308     +         when('')        order ='DESC';
17309     +         when('FMTASC')  order='ASCFMT';
17310     +         when('FMTDESC') order='DESFMT';
17311     +         otherwise;
17312     +       end;
17313     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
17314     +       nameString = trim(nameString)!!' '!!trim(NAME);
17316     +       if eof then do;
17317     +          call symput('targetOrderString', trim(orderString));
17318     +          call symput('targetString', trim(nameString));
17319     +       end;
17320     +    run;
17322     +    %let arborkluge= "work._treeDMDB";
17324     +    proc dmdb batch data=&EM_IMPORT_DATA
17325     +    %if &nnpmml %then %do;
17326     +        PMML
17327     +    %end;
17328     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
17330     +     %if "%EM_ID" ne "" %then %do;
17331     +       id %EM_ID;
17332     +     %end;
17333     +     %if &EM_NUM_CLASS gt 0 %then %do;
17334     +       class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17335     +            %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17336     +            &targetOrderString;
17337     +     %end;
17338     +     %if &EM_NUM_INTERVAL gt 0 %then %do;
17339     +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
17340     +     %end;
17341     +     target &targetString %EM_INTERVAL_TARGET;
17342     +     %if "%EM_FREQ" ne "" %then %do;
17343     +       freq %EM_FREQ;
17344     +     %end;
17345     +    run;
17346     +    quit;
17348     +    proc datasets lib=work nolist;
17349     +       delete classout varout;
17350     +    run;
17351     +    quit;
17353     + %end;
17356     +    /* run arbor to generate new results and scoring code */
17357     +    proc arbor data=&EM_IMPORT_DATA inmodel=&EM_USER_BROWSETREE refreshtrain;
17358     +       Performance &EM_PROPERTY_PERFORMANCE
17359     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
17360     +         nodesize=&EM_PROPERTY_NODESAMPLE
17361     +       %end;
17362     +       ;
17363     +      interact;
17364     +      *subtree largest;
17367     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
17368     +         Assess
17369     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
17370     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
17371     +              %put &em_codebar;
17372     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
17373     +              %put &errormsg;
17374     +              %put &em_codebar;
17375     +            %end;
17376     +            %else %do;
17377     +               Validata=&EM_IMPORT_VALIDATE;
17378     +            %end;
17379     +         %end;
17380     +         %else %do;
17381     +           NoValidata
17382     +         %end;
17383     +       %end;
17384     +      ;
17385     +      makemacro nleaves=nleaves;
17386     +      save
17387     +      %if "&EM_USER_EMTREE" ne "" %then %do;
17388     +         MODEL=&EM_USER_EMTREE
17389     +      %end;
17390     +      %if "&EM_USER_OUTSEQ" ne "" %then %do;
17391     +        SEQUENCE=&EM_USER_OUTSEQ
17392     +      %end;
17393     +      %if "&EM_USER_OUTIMPORT" ne "" %then %do;
17394     +        IMPORTANCE=&EM_USER_OUTIMPORT
17395     +      %end;
17396     +      %if "&EM_USER_OUTNODES" ne "" %then %do;
17397     +         NODESTAT=&EM_USER_OUTNODES
17398     +      %end;
17399     +      %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
17400     +         SUMMARY=&EM_USER_OUTSUMMARY
17401     +      %end;
17402     +      %if "&EM_USER_OUTSTATS" ne "" %then %do;
17403     +         STATSBYNODE=&EM_USER_OUTSTATS
17404     +      %end;
17405     +      %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
17406     +         TOPOLOGY=&EM_USER_OUTTOPOLOGY
17407     +      %end;
17408     +      %if "&EM_USER_OUTPATH" ne "" %then %do;
17409     +         Pathlistnonmissing=&EM_USER_OUTPATH
17410     +      %end;
17411     +      %if "&EM_USER_OUTRULES" ne "" %then %do;
17412     +         RULES = &EM_USER_OUTRULES
17413     +      %end;
17414     +      ;
17416     +      %let codetext=;
17417     +      %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
17418     +        %let codetext=&codetext DUMMY;
17419     +      %end;
17420     +      %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
17421     +        %let codetext=&codetext NOLEAFID;
17422     +      %end;
17424     +      %let norescodetxt=;
17425     +      %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
17426     +        %let norescodetxt=&codetext NOPRED;
17427     +      %end;
17429     +      %let lookupString = ;
17430     +      %if ^%symexist(EM_OPTION) %then
17431     +         %let EM_OPTION=;
17433     +      %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
17434     +         %let lookupString = LOOKUP=SELECT;
17435     +      %end;
17437     +      code file="&EM_USER_TREEFLOW" res &codetext &lookupString;
17438     +      code file="&EM_USER_TREEPUBLISH" nores &norescodetxt &lookupString;
17440     +      %if &nnpmml %then %do;
17441     +        code pmml;
17442     +      %end;
17444     +      score data=&EM_IMPORT_DATA out=_NULL_ outfit=work.fit_train role=TRAIN;
17445     +      %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
17446     +        score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
17447     +      %end;
17448     +      %if (("&EM_IMPORT_TEST" ne "") AND (%sysfunc(exist(&EM_IMPORT_TEST)) or %sysfunc(exist(&EM_IMPORT_TEST,VIEW)) )) %then %do;
17449     +        score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
17450     +      %end;
17451     +    run;
17453     +    quit;
17455     +    %if &nnpmml %then %do;
17456     +       ods pmml close;
17457     +    %end;
17459     +   /* Check return code and throw exception if error is detected */
17460     +   %if &SYSERR > 0 %then %do;
17461     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
17462     +     %goto doendm;
17463     +   %end;
17465     +   /* create outfit dataset if multiple score statements have been executed */
17466     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
17468     +   /* print variable importance listing */
17469     +   %let em_tree_surrexists=.;
17470     +   data _null_;
17471     +    set &EM_USER_OUTIMPORT (obs=2) end=eof;
17472     +    if eof then do ;
17473     +      call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17474     +      call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17475     +    end;
17476     +   run;
17478     +   /* create English Rules */
17479     +   %EM_GETNAME(key=ENGLISHRULES, type=FILE, extension=txt);
17480     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
17481     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
17482     +       %em_tree_makeEnglishRules;
17484     +      /* English Rules */
17485     +      %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
17487     +     %end;
17488     +   filename x;
17490     +   %doendm:
17492     +   %EM_REPORT(key=EMINTLOG, viewtype=LOG, block=Interactive, description=Log, autodisplay=N);
17493     +   %EM_REPORT(key=EMINTOUT, viewtype=OUTPUT, block=Interactive, description=Output, autodisplay=N);
17495     +%mend EM_TREE_CLOSETREEVIEWER;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
17498     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
17499     +  %global &nLevel;
17500     +  proc dmdb batch data=&indata
17501     +    classout=_tmp_dmdbout;
17502     +    class &target;
17503     +  run;
17504     +  data _tmp_dmdbout;
17505     +    set _tmp_dmdbout;
17506     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
17507     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
17508     +  run;
17509     +  data _null_;
17510     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
17511     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
17512     +    %let dsid = %sysfunc(close(&dsid));
17513     +     call symput("&nLevel", put(&_obs, Best12.));
17514     +  run;
17516     +  proc datasets lib=work nolist;
17517     +     delete _tmp_dmdbout;
17518     +  run;
17519     +  quit;
17520     +%Mend EM_CheckBinaryTargetLevel;
17523     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
17525     +  /* determine the number of obs in training data */
17526     +  proc sql;
17527     +    reset noprint;
17528     +    select count(*) into :em_nobs from &indata;
17529     +  quit;
17531     +  /* determine the number of input variables */
17532     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
17533     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
17535     +  /* retrieve targetEvent from decmeta */
17536     +  %let targetEvent=;
17537     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
17538     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17539     +      data _null_;
17540     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
17541     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
17542     +      run;
17543     +    %end;
17544     +  %end;
17546     +  /* create targetTable if multipleTar eq Y */
17547     +  data temptarget;
17548     +    set &EM_DATA_VARIABLESET;
17549     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
17550     +  run;
17552     + /* data sets */
17553     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
17554     + %EM_GETNAME(key=EMTREE,        type=DATA);
17555     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
17556     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
17557     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
17558     + %EM_GETNAME(key=OUTNODES,      type=DATA);
17559     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
17560     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
17561     + %EM_GETNAME(key=OUTPATH,       type=DATA);
17562     + %EM_GETNAME(key=OUTRULES,      type=DATA);
17564     + /* files */
17565     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17566     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17568     + /* turn on pmml if requested */
17569     + %let nnpmml=0;
17570     + %if %symexist(EM_PMML) %then %do;
17571     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
17572     +       %let nnpmml=1;
17574     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
17575     +   %end;
17576     +%end;
17578     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
17580     +%if &nnpmml or &numClassTarget %then %do;
17582     +    /* create dmdb needed for pmml generation */
17583     +    %let tree_maxlevel = 512;
17584     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
17585     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
17586     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
17587     +      %end;
17588     +    %end;
17589     +    %if &tree_maxlevel gt 0 %then %do;
17590     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
17591     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
17592     +    %end;
17594     +    %let targetOrderString =;
17595     +    %let targetString = ;
17596     +    data _null_;
17597     +       length orderString nameString $10000;
17598     +       retain orderString nameString;
17599     +       set &em_data_variableset end=eof;
17600     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
17601     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
17602     +       %end;
17603     +       %else %do;
17604     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
17605     +       %end;          select(order);
17606     +         when('')        order ='DESC';
17607     +         when('FMTASC')  order='ASCFMT';
17608     +         when('FMTDESC') order='DESFMT';
17609     +         otherwise;
17610     +       end;
17611     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
17612     +       nameString = trim(nameString)!!' '!!trim(NAME);
17614     +       if eof then do;
17615     +          call symput('targetOrderString', trim(orderString));
17616     +          call symput('targetString', trim(nameString));
17617     +       end;
17618     +    run;
17620     +    %let arborkluge= "work._treeDMDB";
17622     +    proc dmdb batch data=&indata
17623     +    %if &nnpmml %then %do;
17624     +        PMML
17625     +    %end;
17626     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
17628     +      %if &nnpmml %then %do;
17629     +           %if "%EM_ID" ne "" %then %do;
17630     +             id %EM_ID;
17631     +           %end;
17632     +           %if &EM_NUM_CLASS gt 0 %then %do;
17633     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17634     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17635     +                  &targetOrderString;
17636     +           %end;
17637     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
17638     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
17639     +           %end;
17640     +           target &targetString %EM_INTERVAL_TARGET;
17641     +           %if "%EM_FREQ" ne "" %then %do;
17642     +             freq %EM_FREQ;
17643     +           %end;
17644     +      %end;
17645     +      %else %do;
17646     +         class  &targetOrderString;
17647     +         target &targetString %EM_INTERVAL_TARGET;
17648     +      %end;
17649     +    run;
17650     +    quit;
17652     +    proc datasets lib=work nolist;
17653     +       delete classout varout;
17654     +    run;
17655     +    quit;
17657     + %end;
17660     + /* run Arbor procedure */
17661     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
17662     +  proc arbor data=&INDATA
17664     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
17665     +    Leafsize = &EM_PROPERTY_LEAFSIZE
17666     +  %end;
17668     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
17669     +    Splitsize = &EM_PROPERTY_SPLITSIZE
17670     +  %end;
17672     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
17673     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
17674     +  %end;
17676     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
17677     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
17678     +  %end;
17680     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
17681     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
17682     +  %end;
17684     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
17685     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
17686     +  %end;
17687     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
17688     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
17689     +  %end;
17690     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
17691     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
17692     +  %end;
17694     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
17695     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
17696     +      alpha = &EM_PROPERTY_SIGLEVEL
17697     +    %end;
17698     +  %end;
17700     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
17701     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
17702     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
17703     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
17704     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
17706     +        padjust =
17707     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
17708     +          &chaid
17709     +        %end;
17710     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
17711     +          DEPTH
17712     +        %end;
17713     +      %end;
17714     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
17715     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
17716     +         pvars = &num_inputs
17717     +      %end;
17718     +    %end;
17719     +  %end;
17720     +  %else %do;
17721     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
17722     +         padjust = NONE
17723     +      %end;
17724     +  %end;
17726     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
17727     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
17728     +    Maxrules = &num_nrules
17729     +  %end;
17731     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
17732     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
17733     +    Maxsurrs = &num_nsurrs
17734     +  %end;
17736     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
17737     +     Missing=&EM_PROPERTY_MISSINGVALUE
17738     +  %end;
17740     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
17741     +     USEVARONCE
17742     +  %end;
17744     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
17745     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
17746     +  %end;
17749     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
17750     +    event = "&targetEvent"
17751     +  %end;
17753     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
17754     +     DECSEARCH
17755     +  %end;
17757     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
17758     +     PRIORSSEARCH
17759     +  %end;
17761     +  %if &arbor_1 ne %then %do;
17762     +    &arbor_1
17763     +  %end;
17765     +  %if &em_arbor ne %then %do;
17766     +     &em_arbor
17767     +  %end;
17768     +  ;
17769     + %end;
17770     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
17771     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
17772     +       Performance &EM_PROPERTY_PERFORMANCE
17773     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
17774     +         nodesize=&EM_PROPERTY_NODESAMPLE
17775     +       %end;
17776     +       ;
17777     +       interact;
17778     + %end;
17779     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
17780     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
17781     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
17782     +    %put &em_codebar;
17783     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
17784     +    %put &errormsg;
17785     +    %put &em_codebar;
17786     +    %goto doendm;
17787     +   %end;
17788     +   %else %do;
17789     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
17790     +       Performance &EM_PROPERTY_PERFORMANCE
17791     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
17792     +         nodesize=&EM_PROPERTY_NODESAMPLE
17793     +       %end;
17794     +       ;
17795     +       interact;
17796     +   %end;
17797     + %end;
17799     + %else %do;
17800     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
17801     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
17802     +    %put &em_codebar;
17803     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
17804     +    %put &errormsg;
17805     +    %put &em_codebar;
17806     +    %goto doendm;
17807     +   %end;
17808     +   %else %do;
17809     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
17810     +       Performance &EM_PROPERTY_PERFORMANCE
17811     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
17812     +         nodesize=&EM_PROPERTY_NODESAMPLE
17813     +       %end;
17814     +       ;
17815     +        interact;
17816     +   %end;
17817     + %end;
17819     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
17820     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
17821     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
17822     +    %end;
17824     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
17825     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
17826     +    %end;
17828     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
17829     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
17830     +    %end;
17832     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
17833     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
17834     +    %end;
17836     +    %if "%EM_FREQ" ne "" %then %do;
17837     +       freq %EM_FREQ;
17838     +    %end;
17840     +    %if "&multipleTar" eq "Y" %then %do;
17841     +       /* cycle through all target vars in variableset */
17842     +       %let tdsid = %sysfunc(open(temptarget));
17843     +       %if &tdsid %then %do;
17844     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
17845     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
17846     +          %do %while(^ %sysfunc(fetch(&tdsid)));
17847     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
17848     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
17849     +             target &var / level = &lvl
17850     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
17851     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
17852     +             %end;
17853     +             %else %if "&lvl" eq "INTERVAL" %then %do;
17854     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
17855     +             %end;
17856     +             %else %if "&lvl" eq "ORDINAL" %then %do;
17857     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
17858     +             %end;
17859     +          %end;
17860     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
17861     +       %end;
17862     +       useTarget variable = %EM_TARGET;
17863     +    %end;
17864     +    %else %do;
17865     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
17866     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
17867     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
17868     +      %end;
17869     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
17870     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
17871     +      %end;
17872     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
17873     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
17874     +      %end;
17875     +    %end;
17877     +    %if "&multipleTar" eq "N" %then %do;
17878     +      &EM_DEC_STATEMENT;
17879     +    %end;
17881     +    Performance &EM_PROPERTY_PERFORMANCE
17882     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
17883     +      nodesize=&EM_PROPERTY_NODESAMPLE
17884     +    %end;
17885     +    ;
17887     +    %if "&intFlag" eq "Y" %then %do;
17888     +       INTERACT Largest;
17889     +       Train maxnewdepth=0;
17890     +    %end;
17892     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
17893     +         Assess
17894     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
17895     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
17896     +              %put &em_codebar;
17897     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
17898     +              %put &errormsg;
17899     +              %put &em_codebar;
17900     +            %end;
17901     +            %else %do;
17902     +               Validata=&EM_IMPORT_VALIDATE
17903     +            %end;
17904     +         %end;
17905     +         %else %do;
17906     +           NoValidata
17907     +         %end;
17908     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
17909     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
17910     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
17911     +               %if &dsid %then %do;
17912     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
17913     +                 %do %while(^ %sysfunc(fetch(&dsid)));
17914     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
17915     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
17916     +                   %else %do;
17917     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
17918     +                      %else %let measure= MISC;
17919     +                   %end;
17920     +                 %end;
17921     +               %end;
17922     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
17923     +            %end;
17924     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
17925     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
17926     +                 %let measure=ASE;
17927     +              %end;
17928     +              %else %do;
17929     +                 %let measure=MISC;
17930     +              %end;
17931     +            %end;
17932     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
17933     +              %let measure=ASE;
17934     +            %end;
17935     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
17936     +               %let measure = LIFT;
17937     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
17938     +               %if &dsid %then %do;
17939     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
17940     +                 %do %while(^ %sysfunc(fetch(&dsid)));
17941     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
17942     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
17943     +                 %end;
17944     +               %end;
17945     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
17946     +            %end;
17947     +            measure=&measure
17948     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
17949     +               event = "&targetEvent"
17950     +            %end;
17951     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
17952     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
17953     +            %end;
17954     +         %end;
17955     +         %if "&multipleTar" eq "N" %then %do;
17956     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
17957     +               CV
17958     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
17959     +                 CVNITer = &EM_PROPERTY_CVNITER
17960     +               %end;
17961     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
17962     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
17963     +               %end;
17964     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
17965     +                 CVSeed = &EM_PROPERTY_CVSEED
17966     +               %end;
17967     +            %end;
17968     +         %end;
17969     +       %end;
17970     +      ;
17972     +      %if "&intFlag" ne "Y" %then %do;
17973     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
17974     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
17975     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
17976     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
17978     +          SUBTREE &subtree
17979     +          %if "&subtree" eq "NLEAVES" %then %do;
17980     +            =&EM_PROPERTY_NSUBTREE
17981     +          %end;
17982     +          ;
17983     +        %end;
17985     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
17986     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
17987     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
17988     +          %end;
17989     +       %end;
17990     +      %end;
17991     + %end;
17994     + MakeMacro nleaves = nleaves;
17995     + save
17996     + %if "&EM_USER_EMTREE" ne "" %then %do;
17997     +   MODEL=&EM_USER_EMTREE
17998     + %end;
17999     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
18000     +   SEQUENCE=&EM_USER_OUTSEQ
18001     + %end;
18002     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
18003     +   IMPORTANCE=&EM_USER_OUTIMPORT
18004     + %end;
18005     + %if "&EM_USER_OUTNODES" ne "" %then %do;
18006     +   NODESTAT=&EM_USER_OUTNODES
18007     + %end;
18008     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
18009     +   SUMMARY=&EM_USER_OUTSUMMARY
18010     + %end;
18011     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
18012     +   STATSBYNODE=&EM_USER_OUTSTATS
18013     + %end;
18014     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
18015     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
18016     + %end;
18017     + %if "&EM_USER_OUTPATH" ne "" %then %do;
18018     +   Pathlistnonmissing=&EM_USER_OUTPATH
18019     + %end;
18020     + %if "&EM_USER_OUTRULES" ne "" %then %do;
18021     +   RULES = &EM_USER_OUTRULES
18022     + %end;
18023     + ;
18025     + %if "&intFlag" ne "Y" %then %do;
18027     +   %let lookupString = ;
18028     +   %if ^%symexist(EM_OPTION) %then
18029     +      %let EM_OPTION=;
18031     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
18032     +      %let lookupString = LOOKUP=SELECT;
18033     +   %end;
18035     +   %let codetext=;
18036     +   %let norescodetxt=;
18038     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
18039     +     %let codetext=&codetext DUMMY;
18040     +     %let norescodetxt=&norescodetxt DUMMY;
18041     +   %end;
18042     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
18043     +     %let codetext=&codetext NOLEAFID;
18044     +     %let norescodetxt=&norescodetxt NOLEAFID;
18045     +   %end;
18046     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
18047     +     %let norescodetxt=&norescodetxt NOPRED;
18048     +   %end;
18050     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
18051     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
18053     +   %if &nnpmml %then %do;
18054     +     code pmml;
18055     +   %end;
18057     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
18058     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
18059     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
18060     +   %end;
18061     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
18062     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
18063     +   %end;
18064     + %end;
18066     + run;
18067     + quit;
18069     + /*%em_checkerror(); */
18070     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
18071     +   /* Delete DMDB catalog */
18072     +   proc datasets lib=work nolist;
18073     +       delete _treeDMDB / mt=cat;
18074     +  run;
18075     +  %end;
18077     + %if &nnpmml %then %do;
18078     +    ods pmml close;
18079     + %end;
18081     +  %doendm:
18083     +%mend em_tree_runTreeProcedure;
18085     +%macro em_tree_createFitStats( multipleTar= );
18088     +  /* create targetTable is multipleTar eq Y */
18089     +  data temptarget;
18090     +    set &EM_DATA_VARIABLESET;
18091     +    where ROLE="TARGET";
18092     +  run;
18094     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
18095     +   data &EM_USER_EMOUTFIT;
18096     +     length target $32;
18097     +     merge work.fit_train
18098     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
18099     +       work.fit_valid
18100     +     %end;
18101     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
18102     +       work.fit_test
18103     +     %end;
18104     +     ;
18105     +     %if "&multipleTar" eq "N" %then %do;
18106     +       target="%EM_TARGET";
18107     +     %end;
18108     +     %else %do;
18109     +       target = _TARGET_;
18110     +     %end;
18111     +     drop _NW_ _SUMW_
18112     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
18113     +        _VSUMW_
18114     +     %end;
18115     +     ;
18116     +   run;
18118     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
18119     +     proc datasets library=work nolist;
18120     +       delete fit_valid;
18121     +     run;
18122     +   %end;
18123     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
18124     +     proc datasets library=work nolist;
18125     +       delete fit_test;
18126     +     run;
18127     +   %end;
18129     +%mend em_tree_createFitStats;
18132     +%macro em_tree_makeEnglishRules;
18134     +  %EM_GETNAME(key=OUTNODES, type=DATA);
18135     +  %EM_GETNAME(key=OUTPATH, type=DATA);
18137     +  /* verify that necessary tables exist and if not, skip processing */
18138     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
18139     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
18140     +    %goto doendm;
18141     +  %end;
18142     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
18143     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
18144     +    %goto doendm;
18145     +  %end;
18147     +  /* determine length of variable in outpath dataset */
18148     +  %let vlength= ;
18149     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
18150     +  %if &dsid ne %then %do;
18151     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
18152     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
18153     +  %end;
18154     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
18156     +  data tempoutpath;
18157     +    length varname $&vlength;
18158     +    retain varname;
18159     +    set &EM_USER_OUTPATH;
18161     +    if ^missing(variable) then varname=variable;
18162     +    else if ^missing(var_name) then varname=var_name;
18163     +    output;
18164     +  run;
18166     +  /* create an array of generated predicted variable names */
18167     +  %let tree_pred_vars = ;
18168     +  %let tree_pred_label = ;
18169     +  %let numpred= 0;
18170     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
18172     +    data _null_;
18173     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
18174     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
18175     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
18176     +     if eof then
18177     +       call symput('numpred', strip(put(_N_, BEST.)));
18178     +    run;
18179     +  %end;
18181     +  /* determine if NPRIORS exists in outnodes  */
18182     +  %local nprior_flag;
18183     +  data _null_;
18184     +    set &EM_USER_OUTNODES(obs=2) end=eof;
18185     +    if eof then do;
18186     +      call symput('nprior_flag', strip(put(npriors, best.)));
18187     +    end;
18188     +  run;
18190     +  proc sort data=tempoutpath; by node; run;
18191     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
18193     +  data tempoutpath;
18194     +    merge tempoutpath(in=_a) outnodes(keep= node
18195     +    %if "&nprior_flag" ne "." %then %do;
18196     +      NPRIORS
18197     +    %end;
18198     +    %else %do;
18199     +      N
18200     +    %end;
18201     +    %if &numpred gt 0 %then %do;
18202     +      %do i=1 %to &numpred;
18203     +        &&tree_pred_vars&i
18204     +      %end;
18205     +    %end;
18206     +    );
18207     +    by node;
18208     +    if _a;
18209     +  run;
18211     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
18213     +  data _null_;
18214     +    file x;
18215     +    set tempoutpath;
18216     +    by node descending varname;
18217     +    retain origvar oldnode string;
18218     +    length origvar $32 oldnode 8 string $5000;
18220     +    if _N_ = 1 then do;
18221     +      origvar = varname;
18222     +      oldnode = node;
18223     +    end;
18225     +    if first.node then do;
18226     +       put "&EM_CODEBAR";
18227     +       put " Node = " node;
18228     +       put "&EM_CODEBAR";
18229     +    end;
18231     +      if first.varname then do;
18232     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
18233     +            if MISSING(CHARACTER_VALUE) then do;
18234     +             if NUMERIC_VALUE ne .  then do;
18235     +              if ^first.node then do;
18236     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
18237     +              end;
18238     +              else do;
18239     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
18240     +              end;
18241     +             end;
18242     +            end;
18243     +            else do;
18244     +              if ^first.node then do;
18245     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
18246     +              end;
18247     +              else do;
18248     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
18249     +              end;
18250     +             end;
18251     +         end;
18252     +         else if RELATION in ("=") then do;
18253     +            if ^first.node then do;
18254     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
18255     +            end;
18256     +            else do;
18257     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
18258     +            end;
18259     +         end;
18260     +         else if RELATION in ("ISMISSING") then do;
18261     +            if ^first.node then do;
18262     +              string = " AND "|| strip(varname) || " equals Missing";
18263     +            end;
18264     +            else do;
18265     +              string = "if "|| strip(varname) ||" equals Missing";
18266     +            end;
18267     +         end;
18268     +         else if RELATION in ("ISNOTMISSING") then do;
18269     +            if ^first.node then do;
18270     +              string = " AND "|| strip(varname) || " equals All Values";
18271     +            end;
18272     +            else do;
18273     +              string = "if "|| strip(varname) ||" equals All Values";
18274     +            end;
18275     +         end;
18276     +         if ^missing(varname) then origvar = varname;
18277     +         oldnode=node;
18279     +      end;
18280     +      else do;
18281     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
18282     +          if MISSING(CHARACTER_VALUE) then do;
18283     +           if  NUMERIC_VALUE ne .  then do;
18284     +            if ^MISSING(string) then
18285     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
18286     +            else
18287     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
18288     +           end;
18289     +          end;
18290     +          else do;
18291     +            if ^MISSING(string) then
18292     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
18293     +            else
18294     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
18295     +          end;
18297     +         end;
18298     +         else if RELATION in ("=") then do;
18299     +           string = strip(string)||", "||strip(character_value);
18300     +         end;
18301     +         else if RELATION in ("ISMISSING") then do;
18303     +         end;
18304     +         if ^missing(varname) then origvar = varname;
18305     +         oldnode=node;
18306     +      end;
18307     +      if last.varname then do;
18308     +         if RELATION in ("ISMISSING") then do;
18309     +           if ^first.varname then do;
18310     +             string = strip(string) || " or MISSING";
18311     +           end;
18312     +         end;
18313     +         put string;
18314     +         if ^missing(varname) then origvar = varname;
18315     +         oldnode=node;
18316     +      end;
18318     +      if last.node then do;
18319     +         put "then ";
18320     +         put " Tree Node Identifier   = " node;
18322     +         %if "&nprior_flag" ne "." %then %do;
18323     +           put " Number of Observations = " NPRIORS;
18324     +         %end;
18325     +         %else %do;
18326     +           put " Number of Observations = " N;
18327     +         %end;
18329     +         %if &numpred gt 0 %then %do;
18330     +           %do i=1 %to &numpred;
18331     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
18332     +           %end;
18333     +         %end;
18335     +         put " ";
18336     +         if ^missing(varname) then origvar = varname;
18337     +         oldnode=node;
18338     +      end;
18340     +  run;
18342     +  proc datasets lib=work nolist;
18343     +    delete tempoutpath outnodes;
18344     +  run;
18346     +  %doendm:
18347     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: 1582316 kilobytes of physical memory.
NOTE: The subtree sequence contains 13 subtrees. The largest has 25 nodes and 13 leaves.
NOTE: Will use 4000 out of 4000 training cases.
NOTE: Using memory pool with 152157184 bytes.
NOTE: The subtree sequence contains 13 subtrees. The largest has 25 nodes and 13 leaves.
NOTE: Using subtree with 25 nodes and 13 leaves.
NOTE: Created macro variable NLEAVES equal to 13.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 14 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 937 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 25 observations and 24 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 96 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 281 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 13 observations and 20 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 175 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 25 observations and 5 variables.
NOTE: External file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.


NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.99 seconds
      cpu time            0.10 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.FIT_TEST (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 96 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 96 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS1.TREE_ORGYN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 96 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 96 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 25 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 25 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 96 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 25 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 96 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 96 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 96 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195   
NOTE: The file X is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=30 November 2021 13:36:54,
      Create Time=29 November 2021 16:10:17

NOTE: 157 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 96 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: Fileref X has been deassigned.

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

18349      
18350      *------------------------------------------------------------*;
18351      * End CLOSEINT: Tree;
18352      *------------------------------------------------------------*;

18353      proc sort data=WORK.EM_USER_REPORT;
18354      by ID VIEW;
18355      run;

NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18356      %let EMEXCEPTIONSTRING=;
18357      *------------------------------------------------------------*;
18358      * SCORE: Tree;
18359      *------------------------------------------------------------*;
18360      %let EM_ACTION = SCORE;
18361      %let syscc = 0;
18362      %macro main;
18363      
18364        %if %upcase(&EM_ACTION) = CREATE %then %do;
18365          filename temp catalog 'sashelp.emmodl.tree_create.source';
18366          %include temp;
18367          filename temp;
18368      
18369          %em_tree_create;
18370        %end;
18371      
18372         %else
18373         %if %upcase(&EM_ACTION) = TRAIN %then %do;
18374      
18375             filename temp catalog 'sashelp.emmodl.tree_train.source';
18376             %include temp;
18377             filename temp;
18378             %em_tree_train;
18379         %end;
18380      
18381        %else
18382        %if %upcase(&EM_ACTION) = SCORE %then %do;
18383          filename temp catalog 'sashelp.emmodl.tree_score.source';
18384          %include temp;
18385          filename temp;
18386      
18387          %em_tree_score;
18388      
18389        %end;
18390      
18391        %else
18392        %if %upcase(&EM_ACTION) = REPORT %then %do;
18393      
18394             filename temp catalog 'sashelp.emmodl.tree_report.source';
18395             %include temp;
18396             filename temp;
18397      
18398             %em_tree_report;
18399         %end;
18400      
18401        %else
18402        %if %upcase(&EM_ACTION) = OPENINT %then %do;
18403      
18404             filename temp catalog 'sashelp.emmodl.tree_actions.source';
18405             %include temp;
18406             filename temp;
18407             %EM_TREE_OPENTREEVIEWER;
18408      
18409         %end;
18410      
18411        %else
18412        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18413      
18414             filename temp catalog 'sashelp.emmodl.tree_actions.source';
18415             %include temp;
18416             filename temp;
18417             %EM_TREE_CLOSETREEVIEWER;
18418      
18419         %end;
18420      
18421      
18422         %doendm:
18423      %mend main;
18424      
18425      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
18427     +%macro em_tree_score;
18429     +   /* determine if multiple targets will be processed */
18430     +   %let em_tree_multipleTargets=N;
18431     +   %let em_tree_numTarget=1;
18432     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
18433     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
18434     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
18435     +         %let em_tree_multipleTargets=N;
18436     +      %end;
18437     +      %else %do;
18438     +         /* create macro array of targets  */
18439     +         data _null_;
18440     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
18441     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
18442     +           if eof then
18443     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
18444     +        run;
18446     +        %if &em_tree_numTarget gt 1 %then %do;
18447     +           %let em_tree_multipleTargets=Y;
18448     +        %end;
18449     +      %end;
18450     +   %end;
18452     +   /* build flow and publish scoring code */
18453     +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
18454     +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
18456     +   filename treeflow "&EM_USER_TREEFLOW";
18457     +   filename treepub "&EM_USER_TREEPUBLISH";
18459     +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
18460     +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
18462     +   %em_copyfile(infref=treeflow, outfref=flowref);
18463     +   %em_copyfile(infref=treepub, outfref=pubref);
18465     +   filename treeflow;
18466     +   filename treepub;
18468     +   /* if priors are used, add code to generate unadjusted residuals in export */
18469     +   %let useAdjPriors = N;
18470     +   data _null_;
18471     +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
18472     +     if USE="Y" then call symput('useAdjPriors', 'Y');
18473     +   run;
18474     +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
18475     +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
18476     +      %include temp;
18477     +      filename temp;
18479     +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
18480     +      filename adjref "&EM_USER_adjResidualCode";
18481     +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
18483     +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
18485     +      filename adjref;
18486     +   %end;
18488     +   /* LEAF */
18489     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
18490     +      data _null_;
18491     +        file flowref mod;
18492     +        put 'drop _LEAF_;';
18493     +      run;
18495     +      data _null_;
18496     +        file pubref mod;
18497     +        put 'drop _LEAF_;';
18498     +      run;
18500     +   %end;
18502     +   filename flowref;
18503     +   filename pubref;
18505     +   /* em_metachange code */
18506     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
18507     +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
18508     +   %end;
18510     +   /* variable selection based on importance stat    */
18511     +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
18512     +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
18513     +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
18514     +     %let varnum = %sysfunc(varnum(&dsid, NAME));
18515     +     %let obs = %sysfunc(fetch(&dsid));
18516     +     %do %while(&obs=0);
18517     +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
18518     +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
18519     +       %EM_METACHANGE(name=&varname, role=REJECTED);
18520     +       %let obs = %sysfunc(fetch(&dsid));
18521     +     %end;
18522     +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
18523     +   %end;
18525     +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
18526     +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
18527     +    %let tree_pred_vars = ;
18528     +    %let tree_pred_lvl =;
18529     +    %let numpred= 0;
18531     +    data _null_;
18532     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
18533     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
18534     +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
18535     +     if eof then
18536     +       call symput('numpred', strip(put(_N_, BEST.)));
18537     +    run;
18538     +   %end;
18540     +   %if &numpred ne 0 %then %do;
18541     +    %do i=1 %to &numpred;
18542     +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
18543     +      %EM_METACHANGE(name=&qpred, role=ASSESS);
18544     +    %end;
18545     +   %end;
18547     +   /* determine if multiple targets will be processed */
18548     +   %let em_tree_multipleTargets=N;
18549     +   %let em_tree_numTarget=1;
18550     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
18551     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
18552     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
18553     +         %let em_tree_multipleTargets=N;
18554     +      %end;
18555     +      %else %do;
18556     +        data _null_;
18557     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
18558     +          if eof then
18559     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
18560     +        run;
18562     +        %if &em_tree_numTarget gt 1 %then %do;
18563     +           %let em_tree_multipleTargets=Y;
18564     +        %end;
18565     +     %end;
18566     +   %end;
18568     +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
18569     +   %if "&em_tree_multipleTargets" eq "N" %then %do;
18571     +      /* variable importance */
18572     +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
18573     +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
18575     +         %let validexist=0;
18576     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
18577     +           %let validexist=1;
18578     +         %end;
18580     +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
18581     +         /* and the columns may not be generated                                                                                 */
18582     +         %let em_tree_cvexists=;
18583     +         %let em_tree_surrexists=.;
18584     +         data _null_;
18585     +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
18586     +            if eof then do ;
18587     +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
18588     +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
18589     +            end;
18590     +         run;
18592     +         data &EM_USER_OUTIMPORT;
18593     +            set &EM_USER_OUTIMPORT;
18595     +            /* format columns based on Precison value specified */
18596     +            format importance 15.&EM_PROPERTY_PRECISION
18597     +                 %if &validexist %then %do;
18598     +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
18599     +                 %end;
18600     +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
18601     +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
18602     +                 %end;
18603     +            ;
18604     +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
18605     +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
18606     +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
18607     +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
18608     +                 %if "&em_tree_surrexists" ne "" %then %do;
18609     +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
18610     +                 %end;
18611     +                 %if &validexist %then %do;
18612     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
18613     +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
18614     +                 %end;
18615     +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
18616     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
18617     +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
18618     +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
18619     +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
18620     +                 %end;
18621     +            ;
18622     +         run;
18624     +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
18625     +      %end;
18626     +   %end;
18628     +   %doendm:
18629     +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The file FLOWREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=30 November 2021 13:36:54,
      Create Time=29 November 2021 16:10:18

NOTE: 249 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: The file PUBREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=30 November 2021 13:36:54,
      Create Time=29 November 2021 16:10:18

NOTE: 227 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.

NOTE: There were 1 observations read from the data set EMWS1.TREE_ORGYN_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The file FLOWREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=8809,
      Last Modified=30 November 2021 13:36:54,
      Create Time=29 November 2021 16:10:18

NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: The file PUBREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=8224,
      Last Modified=30 November 2021 13:36:54,
      Create Time=29 November 2021 16:10:18

NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.

NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set EMWS1.TREE_ORGYN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 14 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

18630      
18631      *------------------------------------------------------------*;
18632      * End SCORE: Tree;
18633      *------------------------------------------------------------*;

18634      proc sort data=WORK.EM_METACHANGE;
18635      by key uname;
18636      run;

NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

18637      filename x "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
18638      data _null_;
18639      file x;
18640      put 'if upcase(NAME) = "BILL" then do;';
18641      put 'ROLE = "REJECTED";';
18642      put 'end;';
18643      put 'else ';
18644      put 'if upcase(NAME) = "CLASS" then do;';
18645      put 'ROLE = "REJECTED";';
18646      put 'end;';
18647      put 'else ';
18648      put 'if upcase(NAME) = "LTIME" then do;';
18649      put 'ROLE = "REJECTED";';
18650      put 'end;';
18651      put 'else ';
18652      put 'if upcase(NAME) = "NGROUP" then do;';
18653      put 'ROLE = "REJECTED";';
18654      put 'end;';
18655      put 'else ';
18656      put 'if upcase(NAME) = "OAC" then do;';
18657      put 'ROLE = "REJECTED";';
18658      put 'end;';
18659      put 'else ';
18660      put 'if upcase(NAME) = "Q_ORGYN0" then do;';
18661      put 'ROLE = "ASSESS";';
18662      put 'end;';
18663      put 'else ';
18664      put 'if upcase(NAME) = "Q_ORGYN1" then do;';
18665      put 'ROLE = "ASSESS";';
18666      put 'end;';
18667      put 'else ';
18668      put 'if upcase(NAME) = "REGION" then do;';
18669      put 'ROLE = "REJECTED";';
18670      put 'end;';
18671      put 'else ';
18672      put 'if upcase(NAME) = "S_FVEG" then do;';
18673      put 'ROLE = "REJECTED";';
18674      put 'end;';
18675      put 'else ';
18676      put 'if upcase(NAME) = "S_MT" then do;';
18677      put 'ROLE = "REJECTED";';
18678      put 'end;';
18679      put 'else ';
18680      put 'if upcase(NAME) = "TV_REG" then do;';
18681      put 'ROLE = "REJECTED";';
18682      put 'end;';
18683      put 'else ';
18684      put 'if upcase(NAME) = "_NODE_" then do;';
18685      put 'ROLE = "SEGMENT";';
18686      put 'LEVEL = "NOMINAL";';
18687      put 'end;';
18688      run;

NOTE: The file X is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=30 November 2021 13:36:54,
      Create Time=19 November 2021 12:40:51

NOTE: 48 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 37.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

18689      filename x;
NOTE: Fileref X has been deassigned.
18690      filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
18691      *------------------------------------------------------------*;
18692      * Tree: Scoring DATA data;
18693      *------------------------------------------------------------*;
18694      data EMWS1.Tree_TRAIN
18695      / view=EMWS1.Tree_TRAIN
18696      ;
18697      set EMWS1.Part_TRAIN
18698      ;
18699      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
18700     +****************************************************************;
18701     +******             DECISION TREE SCORING CODE             ******;
18702     +****************************************************************;
18703     +
18704     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
18705     +LENGTH F_ORGYN  $   12;
18706     +LENGTH I_ORGYN  $   12;
18707     +LENGTH _WARN_  $    4;
18708     +
18709     +******              LABELS FOR NEW VARIABLES              ******;
18710     +label _NODE_ = 'Node' ;
18711     +label _LEAF_ = 'Leaf' ;
18712     +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
18713     +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
18714     +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
18715     +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
18716     +label V_ORGYN1 = 'Validated: ORGYN=1' ;
18717     +label V_ORGYN0 = 'Validated: ORGYN=0' ;
18718     +label R_ORGYN1 = 'Residual: ORGYN=1' ;
18719     +label R_ORGYN0 = 'Residual: ORGYN=0' ;
18720     +label F_ORGYN = 'From: ORGYN' ;
18721     +label I_ORGYN = 'Into: ORGYN' ;
18722     +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
18723     +label _WARN_ = 'Warnings' ;
18724     +
18725     +
18726     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
18727     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
18728     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
18729     +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
18730     +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
18731     +
18732     +
18733     +_ARBFMT_12 = PUT( ORGYN , BEST12.);
18734     + %DMNORMCP( _ARBFMT_12, F_ORGYN );
18735     +
18736     +******             ASSIGN OBSERVATION TO NODE             ******;
18737     +IF  NOT MISSING(AGE ) AND
18738     +  AGE  <                 44.5 THEN DO;
18739     +  IF  NOT MISSING(AFFL ) AND
18740     +    AFFL  <                 10.5 THEN DO;
18741     +    _ARBFMT_1 = PUT( GENDER , $1.);
18742     +     %DMNORMIP( _ARBFMT_1);
18743     +    IF _ARBFMT_1 IN ('F' ) THEN DO;
18744     +      IF  NOT MISSING(AFFL ) AND
18745     +        AFFL  <                  5.5 THEN DO;
18746     +        _NODE_  =                   45;
18747     +        _LEAF_  =                    1;
18748     +        P_ORGYN1  =             0.265625;
18749     +        P_ORGYN0  =             0.734375;
18750     +        Q_ORGYN1  =             0.265625;
18751     +        Q_ORGYN0  =             0.734375;
18752     +        V_ORGYN1  =     0.31914893617021;
18753     +        V_ORGYN0  =     0.68085106382978;
18754     +        I_ORGYN  = '0' ;
18755     +        U_ORGYN  =                    0;
18756     +        END;
18757     +      ELSE DO;
18758     +        _NODE_  =                   46;
18759     +        _LEAF_  =                    2;
18760     +        P_ORGYN1  =     0.54601226993865;
18761     +        P_ORGYN0  =     0.45398773006134;
18762     +        Q_ORGYN1  =     0.54601226993865;
18763     +        Q_ORGYN0  =     0.45398773006134;
18764     +        V_ORGYN1  =     0.60829493087557;
18765     +        V_ORGYN0  =     0.39170506912442;
18766     +        I_ORGYN  = '1' ;
18767     +        U_ORGYN  =                    1;
18768     +        END;
18769     +      END;
18770     +    ELSE DO;
18771     +      _NODE_  =                   44;
18772     +      _LEAF_  =                    3;
18773     +      P_ORGYN1  =     0.21186440677966;
18774     +      P_ORGYN0  =     0.78813559322033;
18775     +      Q_ORGYN1  =     0.21186440677966;
18776     +      Q_ORGYN0  =     0.78813559322033;
18777     +      V_ORGYN1  =     0.22110552763819;
18778     +      V_ORGYN0  =      0.7788944723618;
18779     +      I_ORGYN  = '0' ;
18780     +      U_ORGYN  =                    0;
18781     +      END;
18782     +    END;
18783     +  ELSE DO;
18784     +    _NODE_  =                   42;
18785     +    _LEAF_  =                    4;
18786     +    P_ORGYN1  =     0.72849462365591;
18787     +    P_ORGYN0  =     0.27150537634408;
18788     +    Q_ORGYN1  =     0.72849462365591;
18789     +    Q_ORGYN0  =     0.27150537634408;
18790     +    V_ORGYN1  =     0.75686274509803;
18791     +    V_ORGYN0  =     0.24313725490196;
18792     +    I_ORGYN  = '1' ;
18793     +    U_ORGYN  =                    1;
18794     +    END;
18795     +  END;
18796     +ELSE DO;
18797     +  IF  NOT MISSING(AFFL ) AND
18798     +                    12.5 <= AFFL  THEN DO;
18799     +    IF  NOT MISSING(AFFL ) AND
18800     +                      17.5 <= AFFL  THEN DO;
18801     +      _NODE_  =                   50;
18802     +      _LEAF_  =                   13;
18803     +      P_ORGYN1  =      0.9090909090909;
18804     +      P_ORGYN0  =     0.09090909090909;
18805     +      Q_ORGYN1  =      0.9090909090909;
18806     +      Q_ORGYN0  =     0.09090909090909;
18807     +      V_ORGYN1  =                 0.95;
18808     +      V_ORGYN0  =                 0.05;
18809     +      I_ORGYN  = '1' ;
18810     +      U_ORGYN  =                    1;
18811     +      END;
18812     +    ELSE DO;
18813     +      _NODE_  =                   49;
18814     +      _LEAF_  =                   12;
18815     +      P_ORGYN1  =     0.42322097378277;
18816     +      P_ORGYN0  =     0.57677902621722;
18817     +      Q_ORGYN1  =     0.42322097378277;
18818     +      Q_ORGYN0  =     0.57677902621722;
18819     +      V_ORGYN1  =                  0.4;
18820     +      V_ORGYN0  =                  0.6;
18821     +      I_ORGYN  = '0' ;
18822     +      U_ORGYN  =                    0;
18823     +      END;
18824     +    END;
18825     +  ELSE DO;
18826     +    _ARBFMT_1 = PUT( GENDER , $1.);
18827     +     %DMNORMIP( _ARBFMT_1);
18828     +    IF _ARBFMT_1 IN ('F' ) THEN DO;
18829     +      IF  NOT MISSING(AFFL ) AND
18830     +        AFFL  <                  8.5 THEN DO;
18831     +        _NODE_  =                   55;
18832     +        _LEAF_  =                    5;
18833     +        P_ORGYN1  =     0.10831234256926;
18834     +        P_ORGYN0  =     0.89168765743073;
18835     +        Q_ORGYN1  =     0.10831234256926;
18836     +        Q_ORGYN0  =     0.89168765743073;
18837     +        V_ORGYN1  =      0.1326352530541;
18838     +        V_ORGYN0  =     0.86736474694589;
18839     +        I_ORGYN  = '0' ;
18840     +        U_ORGYN  =                    0;
18841     +        END;
18842     +      ELSE DO;
18843     +        _NODE_  =                   56;
18844     +        _LEAF_  =                    6;
18845     +        P_ORGYN1  =     0.26825127334465;
18846     +        P_ORGYN0  =     0.73174872665534;
18847     +        Q_ORGYN1  =     0.26825127334465;
18848     +        Q_ORGYN0  =     0.73174872665534;
18849     +        V_ORGYN1  =     0.23747276688453;
18850     +        V_ORGYN0  =     0.76252723311546;
18851     +        I_ORGYN  = '0' ;
18852     +        U_ORGYN  =                    0;
18853     +        END;
18854     +      END;
18855     +    ELSE DO;
18856     +      IF  NOT MISSING(AGE ) AND
18857     +        AGE  <                 76.5 THEN DO;
18858     +        IF  NOT MISSING(AFFL ) AND
18859     +                           7.5 <= AFFL  THEN DO;
18860     +          IF  NOT MISSING(S_CONV ) AND
18861     +            S_CONV  <                6.865 THEN DO;
18862     +            _NODE_  =                   61;
18863     +            _LEAF_  =                    9;
18864     +            P_ORGYN1  =     0.13736263736263;
18865     +            P_ORGYN0  =     0.86263736263736;
18866     +            Q_ORGYN1  =     0.13736263736263;
18867     +            Q_ORGYN0  =     0.86263736263736;
18868     +            V_ORGYN1  =     0.08823529411764;
18869     +            V_ORGYN0  =     0.91176470588235;
18870     +            I_ORGYN  = '0' ;
18871     +            U_ORGYN  =                    0;
18872     +            END;
18873     +          ELSE DO;
18874     +            _NODE_  =                   62;
18875     +            _LEAF_  =                   10;
18876     +            P_ORGYN1  =     0.04545454545454;
18877     +            P_ORGYN0  =     0.95454545454545;
18878     +            Q_ORGYN1  =     0.04545454545454;
18879     +            Q_ORGYN0  =     0.95454545454545;
18880     +            V_ORGYN1  =     0.08360128617363;
18881     +            V_ORGYN0  =     0.91639871382636;
18882     +            I_ORGYN  = '0' ;
18883     +            U_ORGYN  =                    0;
18884     +            END;
18885     +          END;
18886     +        ELSE DO;
18887     +          IF  NOT MISSING(S_TOIL ) AND
18888     +                           42.04 <= S_TOIL  THEN DO;
18889     +            _NODE_  =                   60;
18890     +            _LEAF_  =                    8;
18891     +            P_ORGYN1  =                 0.25;
18892     +            P_ORGYN0  =                 0.75;
18893     +            Q_ORGYN1  =                 0.25;
18894     +            Q_ORGYN0  =                 0.75;
18895     +            V_ORGYN1  =                    0;
18896     +            V_ORGYN0  =                    1;
18897     +            I_ORGYN  = '0' ;
18898     +            U_ORGYN  =                    0;
18899     +            END;
18900     +          ELSE DO;
18901     +            _NODE_  =                   59;
18902     +            _LEAF_  =                    7;
18903     +            P_ORGYN1  =      0.0204081632653;
18904     +            P_ORGYN0  =     0.97959183673469;
18905     +            Q_ORGYN1  =      0.0204081632653;
18906     +            Q_ORGYN0  =     0.97959183673469;
18907     +            V_ORGYN1  =     0.03181818181818;
18908     +            V_ORGYN0  =     0.96818181818181;
18909     +            I_ORGYN  = '0' ;
18910     +            U_ORGYN  =                    0;
18911     +            END;
18912     +          END;
18913     +        END;
18914     +      ELSE DO;
18915     +        _NODE_  =                   54;
18916     +        _LEAF_  =                   11;
18917     +        P_ORGYN1  =     0.15384615384615;
18918     +        P_ORGYN0  =     0.84615384615384;
18919     +        Q_ORGYN1  =     0.15384615384615;
18920     +        Q_ORGYN0  =     0.84615384615384;
18921     +        V_ORGYN1  =     0.08450704225352;
18922     +        V_ORGYN0  =     0.91549295774647;
18923     +        I_ORGYN  = '0' ;
18924     +        U_ORGYN  =                    0;
18925     +        END;
18926     +      END;
18927     +    END;
18928     +  END;
18929     +
18930     +*****  RESIDUALS R_ *************;
18931     +IF  F_ORGYN  NE '1'
18932     +AND F_ORGYN  NE '0'  THEN DO;
18933     +        R_ORGYN1  = .;
18934     +        R_ORGYN0  = .;
18935     + END;
18936     + ELSE DO;
18937     +       R_ORGYN1  =  -P_ORGYN1 ;
18938     +       R_ORGYN0  =  -P_ORGYN0 ;
18939     +       SELECT( F_ORGYN  );
18940     +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
18941     +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
18942     +       END;
18943     + END;
18944     +
18945     +****************************************************************;
18946     +******          END OF DECISION TREE SCORING CODE         ******;
18947     +****************************************************************;
18948     +
18949     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18950      run;

NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

18951      quit;
18952      filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
18953      filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
18954      *------------------------------------------------------------*;
18955      * Tree: Scoring VALIDATE data;
18956      *------------------------------------------------------------*;
18957      data EMWS1.Tree_VALIDATE
18958      / view=EMWS1.Tree_VALIDATE
18959      ;
18960      set EMWS1.Part_VALIDATE
18961      ;
18962      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
18963     +****************************************************************;
18964     +******             DECISION TREE SCORING CODE             ******;
18965     +****************************************************************;
18966     +
18967     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
18968     +LENGTH F_ORGYN  $   12;
18969     +LENGTH I_ORGYN  $   12;
18970     +LENGTH _WARN_  $    4;
18971     +
18972     +******              LABELS FOR NEW VARIABLES              ******;
18973     +label _NODE_ = 'Node' ;
18974     +label _LEAF_ = 'Leaf' ;
18975     +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
18976     +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
18977     +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
18978     +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
18979     +label V_ORGYN1 = 'Validated: ORGYN=1' ;
18980     +label V_ORGYN0 = 'Validated: ORGYN=0' ;
18981     +label R_ORGYN1 = 'Residual: ORGYN=1' ;
18982     +label R_ORGYN0 = 'Residual: ORGYN=0' ;
18983     +label F_ORGYN = 'From: ORGYN' ;
18984     +label I_ORGYN = 'Into: ORGYN' ;
18985     +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
18986     +label _WARN_ = 'Warnings' ;
18987     +
18988     +
18989     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
18990     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
18991     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
18992     +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
18993     +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
18994     +
18995     +
18996     +_ARBFMT_12 = PUT( ORGYN , BEST12.);
18997     + %DMNORMCP( _ARBFMT_12, F_ORGYN );
18998     +
18999     +******             ASSIGN OBSERVATION TO NODE             ******;
19000     +IF  NOT MISSING(AGE ) AND
19001     +  AGE  <                 44.5 THEN DO;
19002     +  IF  NOT MISSING(AFFL ) AND
19003     +    AFFL  <                 10.5 THEN DO;
19004     +    _ARBFMT_1 = PUT( GENDER , $1.);
19005     +     %DMNORMIP( _ARBFMT_1);
19006     +    IF _ARBFMT_1 IN ('F' ) THEN DO;
19007     +      IF  NOT MISSING(AFFL ) AND
19008     +        AFFL  <                  5.5 THEN DO;
19009     +        _NODE_  =                   45;
19010     +        _LEAF_  =                    1;
19011     +        P_ORGYN1  =             0.265625;
19012     +        P_ORGYN0  =             0.734375;
19013     +        Q_ORGYN1  =             0.265625;
19014     +        Q_ORGYN0  =             0.734375;
19015     +        V_ORGYN1  =     0.31914893617021;
19016     +        V_ORGYN0  =     0.68085106382978;
19017     +        I_ORGYN  = '0' ;
19018     +        U_ORGYN  =                    0;
19019     +        END;
19020     +      ELSE DO;
19021     +        _NODE_  =                   46;
19022     +        _LEAF_  =                    2;
19023     +        P_ORGYN1  =     0.54601226993865;
19024     +        P_ORGYN0  =     0.45398773006134;
19025     +        Q_ORGYN1  =     0.54601226993865;
19026     +        Q_ORGYN0  =     0.45398773006134;
19027     +        V_ORGYN1  =     0.60829493087557;
19028     +        V_ORGYN0  =     0.39170506912442;
19029     +        I_ORGYN  = '1' ;
19030     +        U_ORGYN  =                    1;
19031     +        END;
19032     +      END;
19033     +    ELSE DO;
19034     +      _NODE_  =                   44;
19035     +      _LEAF_  =                    3;
19036     +      P_ORGYN1  =     0.21186440677966;
19037     +      P_ORGYN0  =     0.78813559322033;
19038     +      Q_ORGYN1  =     0.21186440677966;
19039     +      Q_ORGYN0  =     0.78813559322033;
19040     +      V_ORGYN1  =     0.22110552763819;
19041     +      V_ORGYN0  =      0.7788944723618;
19042     +      I_ORGYN  = '0' ;
19043     +      U_ORGYN  =                    0;
19044     +      END;
19045     +    END;
19046     +  ELSE DO;
19047     +    _NODE_  =                   42;
19048     +    _LEAF_  =                    4;
19049     +    P_ORGYN1  =     0.72849462365591;
19050     +    P_ORGYN0  =     0.27150537634408;
19051     +    Q_ORGYN1  =     0.72849462365591;
19052     +    Q_ORGYN0  =     0.27150537634408;
19053     +    V_ORGYN1  =     0.75686274509803;
19054     +    V_ORGYN0  =     0.24313725490196;
19055     +    I_ORGYN  = '1' ;
19056     +    U_ORGYN  =                    1;
19057     +    END;
19058     +  END;
19059     +ELSE DO;
19060     +  IF  NOT MISSING(AFFL ) AND
19061     +                    12.5 <= AFFL  THEN DO;
19062     +    IF  NOT MISSING(AFFL ) AND
19063     +                      17.5 <= AFFL  THEN DO;
19064     +      _NODE_  =                   50;
19065     +      _LEAF_  =                   13;
19066     +      P_ORGYN1  =      0.9090909090909;
19067     +      P_ORGYN0  =     0.09090909090909;
19068     +      Q_ORGYN1  =      0.9090909090909;
19069     +      Q_ORGYN0  =     0.09090909090909;
19070     +      V_ORGYN1  =                 0.95;
19071     +      V_ORGYN0  =                 0.05;
19072     +      I_ORGYN  = '1' ;
19073     +      U_ORGYN  =                    1;
19074     +      END;
19075     +    ELSE DO;
19076     +      _NODE_  =                   49;
19077     +      _LEAF_  =                   12;
19078     +      P_ORGYN1  =     0.42322097378277;
19079     +      P_ORGYN0  =     0.57677902621722;
19080     +      Q_ORGYN1  =     0.42322097378277;
19081     +      Q_ORGYN0  =     0.57677902621722;
19082     +      V_ORGYN1  =                  0.4;
19083     +      V_ORGYN0  =                  0.6;
19084     +      I_ORGYN  = '0' ;
19085     +      U_ORGYN  =                    0;
19086     +      END;
19087     +    END;
19088     +  ELSE DO;
19089     +    _ARBFMT_1 = PUT( GENDER , $1.);
19090     +     %DMNORMIP( _ARBFMT_1);
19091     +    IF _ARBFMT_1 IN ('F' ) THEN DO;
19092     +      IF  NOT MISSING(AFFL ) AND
19093     +        AFFL  <                  8.5 THEN DO;
19094     +        _NODE_  =                   55;
19095     +        _LEAF_  =                    5;
19096     +        P_ORGYN1  =     0.10831234256926;
19097     +        P_ORGYN0  =     0.89168765743073;
19098     +        Q_ORGYN1  =     0.10831234256926;
19099     +        Q_ORGYN0  =     0.89168765743073;
19100     +        V_ORGYN1  =      0.1326352530541;
19101     +        V_ORGYN0  =     0.86736474694589;
19102     +        I_ORGYN  = '0' ;
19103     +        U_ORGYN  =                    0;
19104     +        END;
19105     +      ELSE DO;
19106     +        _NODE_  =                   56;
19107     +        _LEAF_  =                    6;
19108     +        P_ORGYN1  =     0.26825127334465;
19109     +        P_ORGYN0  =     0.73174872665534;
19110     +        Q_ORGYN1  =     0.26825127334465;
19111     +        Q_ORGYN0  =     0.73174872665534;
19112     +        V_ORGYN1  =     0.23747276688453;
19113     +        V_ORGYN0  =     0.76252723311546;
19114     +        I_ORGYN  = '0' ;
19115     +        U_ORGYN  =                    0;
19116     +        END;
19117     +      END;
19118     +    ELSE DO;
19119     +      IF  NOT MISSING(AGE ) AND
19120     +        AGE  <                 76.5 THEN DO;
19121     +        IF  NOT MISSING(AFFL ) AND
19122     +                           7.5 <= AFFL  THEN DO;
19123     +          IF  NOT MISSING(S_CONV ) AND
19124     +            S_CONV  <                6.865 THEN DO;
19125     +            _NODE_  =                   61;
19126     +            _LEAF_  =                    9;
19127     +            P_ORGYN1  =     0.13736263736263;
19128     +            P_ORGYN0  =     0.86263736263736;
19129     +            Q_ORGYN1  =     0.13736263736263;
19130     +            Q_ORGYN0  =     0.86263736263736;
19131     +            V_ORGYN1  =     0.08823529411764;
19132     +            V_ORGYN0  =     0.91176470588235;
19133     +            I_ORGYN  = '0' ;
19134     +            U_ORGYN  =                    0;
19135     +            END;
19136     +          ELSE DO;
19137     +            _NODE_  =                   62;
19138     +            _LEAF_  =                   10;
19139     +            P_ORGYN1  =     0.04545454545454;
19140     +            P_ORGYN0  =     0.95454545454545;
19141     +            Q_ORGYN1  =     0.04545454545454;
19142     +            Q_ORGYN0  =     0.95454545454545;
19143     +            V_ORGYN1  =     0.08360128617363;
19144     +            V_ORGYN0  =     0.91639871382636;
19145     +            I_ORGYN  = '0' ;
19146     +            U_ORGYN  =                    0;
19147     +            END;
19148     +          END;
19149     +        ELSE DO;
19150     +          IF  NOT MISSING(S_TOIL ) AND
19151     +                           42.04 <= S_TOIL  THEN DO;
19152     +            _NODE_  =                   60;
19153     +            _LEAF_  =                    8;
19154     +            P_ORGYN1  =                 0.25;
19155     +            P_ORGYN0  =                 0.75;
19156     +            Q_ORGYN1  =                 0.25;
19157     +            Q_ORGYN0  =                 0.75;
19158     +            V_ORGYN1  =                    0;
19159     +            V_ORGYN0  =                    1;
19160     +            I_ORGYN  = '0' ;
19161     +            U_ORGYN  =                    0;
19162     +            END;
19163     +          ELSE DO;
19164     +            _NODE_  =                   59;
19165     +            _LEAF_  =                    7;
19166     +            P_ORGYN1  =      0.0204081632653;
19167     +            P_ORGYN0  =     0.97959183673469;
19168     +            Q_ORGYN1  =      0.0204081632653;
19169     +            Q_ORGYN0  =     0.97959183673469;
19170     +            V_ORGYN1  =     0.03181818181818;
19171     +            V_ORGYN0  =     0.96818181818181;
19172     +            I_ORGYN  = '0' ;
19173     +            U_ORGYN  =                    0;
19174     +            END;
19175     +          END;
19176     +        END;
19177     +      ELSE DO;
19178     +        _NODE_  =                   54;
19179     +        _LEAF_  =                   11;
19180     +        P_ORGYN1  =     0.15384615384615;
19181     +        P_ORGYN0  =     0.84615384615384;
19182     +        Q_ORGYN1  =     0.15384615384615;
19183     +        Q_ORGYN0  =     0.84615384615384;
19184     +        V_ORGYN1  =     0.08450704225352;
19185     +        V_ORGYN0  =     0.91549295774647;
19186     +        I_ORGYN  = '0' ;
19187     +        U_ORGYN  =                    0;
19188     +        END;
19189     +      END;
19190     +    END;
19191     +  END;
19192     +
19193     +*****  RESIDUALS R_ *************;
19194     +IF  F_ORGYN  NE '1'
19195     +AND F_ORGYN  NE '0'  THEN DO;
19196     +        R_ORGYN1  = .;
19197     +        R_ORGYN0  = .;
19198     + END;
19199     + ELSE DO;
19200     +       R_ORGYN1  =  -P_ORGYN1 ;
19201     +       R_ORGYN0  =  -P_ORGYN0 ;
19202     +       SELECT( F_ORGYN  );
19203     +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
19204     +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
19205     +       END;
19206     + END;
19207     +
19208     +****************************************************************;
19209     +******          END OF DECISION TREE SCORING CODE         ******;
19210     +****************************************************************;
19211     +
19212     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
19213      run;

NOTE: DATA STEP view saved on file EMWS1.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

19214      quit;
19215      filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
19216      filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
19217      *------------------------------------------------------------*;
19218      * Tree: Scoring TEST data;
19219      *------------------------------------------------------------*;
19220      data EMWS1.Tree_TEST
19221      / view=EMWS1.Tree_TEST
19222      ;
19223      set EMWS1.Part_TEST
19224      ;
19225      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
19226     +****************************************************************;
19227     +******             DECISION TREE SCORING CODE             ******;
19228     +****************************************************************;
19229     +
19230     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
19231     +LENGTH F_ORGYN  $   12;
19232     +LENGTH I_ORGYN  $   12;
19233     +LENGTH _WARN_  $    4;
19234     +
19235     +******              LABELS FOR NEW VARIABLES              ******;
19236     +label _NODE_ = 'Node' ;
19237     +label _LEAF_ = 'Leaf' ;
19238     +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
19239     +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
19240     +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
19241     +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
19242     +label V_ORGYN1 = 'Validated: ORGYN=1' ;
19243     +label V_ORGYN0 = 'Validated: ORGYN=0' ;
19244     +label R_ORGYN1 = 'Residual: ORGYN=1' ;
19245     +label R_ORGYN0 = 'Residual: ORGYN=0' ;
19246     +label F_ORGYN = 'From: ORGYN' ;
19247     +label I_ORGYN = 'Into: ORGYN' ;
19248     +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
19249     +label _WARN_ = 'Warnings' ;
19250     +
19251     +
19252     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
19253     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
19254     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
19255     +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
19256     +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
19257     +
19258     +
19259     +_ARBFMT_12 = PUT( ORGYN , BEST12.);
19260     + %DMNORMCP( _ARBFMT_12, F_ORGYN );
19261     +
19262     +******             ASSIGN OBSERVATION TO NODE             ******;
19263     +IF  NOT MISSING(AGE ) AND
19264     +  AGE  <                 44.5 THEN DO;
19265     +  IF  NOT MISSING(AFFL ) AND
19266     +    AFFL  <                 10.5 THEN DO;
19267     +    _ARBFMT_1 = PUT( GENDER , $1.);
19268     +     %DMNORMIP( _ARBFMT_1);
19269     +    IF _ARBFMT_1 IN ('F' ) THEN DO;
19270     +      IF  NOT MISSING(AFFL ) AND
19271     +        AFFL  <                  5.5 THEN DO;
19272     +        _NODE_  =                   45;
19273     +        _LEAF_  =                    1;
19274     +        P_ORGYN1  =             0.265625;
19275     +        P_ORGYN0  =             0.734375;
19276     +        Q_ORGYN1  =             0.265625;
19277     +        Q_ORGYN0  =             0.734375;
19278     +        V_ORGYN1  =     0.31914893617021;
19279     +        V_ORGYN0  =     0.68085106382978;
19280     +        I_ORGYN  = '0' ;
19281     +        U_ORGYN  =                    0;
19282     +        END;
19283     +      ELSE DO;
19284     +        _NODE_  =                   46;
19285     +        _LEAF_  =                    2;
19286     +        P_ORGYN1  =     0.54601226993865;
19287     +        P_ORGYN0  =     0.45398773006134;
19288     +        Q_ORGYN1  =     0.54601226993865;
19289     +        Q_ORGYN0  =     0.45398773006134;
19290     +        V_ORGYN1  =     0.60829493087557;
19291     +        V_ORGYN0  =     0.39170506912442;
19292     +        I_ORGYN  = '1' ;
19293     +        U_ORGYN  =                    1;
19294     +        END;
19295     +      END;
19296     +    ELSE DO;
19297     +      _NODE_  =                   44;
19298     +      _LEAF_  =                    3;
19299     +      P_ORGYN1  =     0.21186440677966;
19300     +      P_ORGYN0  =     0.78813559322033;
19301     +      Q_ORGYN1  =     0.21186440677966;
19302     +      Q_ORGYN0  =     0.78813559322033;
19303     +      V_ORGYN1  =     0.22110552763819;
19304     +      V_ORGYN0  =      0.7788944723618;
19305     +      I_ORGYN  = '0' ;
19306     +      U_ORGYN  =                    0;
19307     +      END;
19308     +    END;
19309     +  ELSE DO;
19310     +    _NODE_  =                   42;
19311     +    _LEAF_  =                    4;
19312     +    P_ORGYN1  =     0.72849462365591;
19313     +    P_ORGYN0  =     0.27150537634408;
19314     +    Q_ORGYN1  =     0.72849462365591;
19315     +    Q_ORGYN0  =     0.27150537634408;
19316     +    V_ORGYN1  =     0.75686274509803;
19317     +    V_ORGYN0  =     0.24313725490196;
19318     +    I_ORGYN  = '1' ;
19319     +    U_ORGYN  =                    1;
19320     +    END;
19321     +  END;
19322     +ELSE DO;
19323     +  IF  NOT MISSING(AFFL ) AND
19324     +                    12.5 <= AFFL  THEN DO;
19325     +    IF  NOT MISSING(AFFL ) AND
19326     +                      17.5 <= AFFL  THEN DO;
19327     +      _NODE_  =                   50;
19328     +      _LEAF_  =                   13;
19329     +      P_ORGYN1  =      0.9090909090909;
19330     +      P_ORGYN0  =     0.09090909090909;
19331     +      Q_ORGYN1  =      0.9090909090909;
19332     +      Q_ORGYN0  =     0.09090909090909;
19333     +      V_ORGYN1  =                 0.95;
19334     +      V_ORGYN0  =                 0.05;
19335     +      I_ORGYN  = '1' ;
19336     +      U_ORGYN  =                    1;
19337     +      END;
19338     +    ELSE DO;
19339     +      _NODE_  =                   49;
19340     +      _LEAF_  =                   12;
19341     +      P_ORGYN1  =     0.42322097378277;
19342     +      P_ORGYN0  =     0.57677902621722;
19343     +      Q_ORGYN1  =     0.42322097378277;
19344     +      Q_ORGYN0  =     0.57677902621722;
19345     +      V_ORGYN1  =                  0.4;
19346     +      V_ORGYN0  =                  0.6;
19347     +      I_ORGYN  = '0' ;
19348     +      U_ORGYN  =                    0;
19349     +      END;
19350     +    END;
19351     +  ELSE DO;
19352     +    _ARBFMT_1 = PUT( GENDER , $1.);
19353     +     %DMNORMIP( _ARBFMT_1);
19354     +    IF _ARBFMT_1 IN ('F' ) THEN DO;
19355     +      IF  NOT MISSING(AFFL ) AND
19356     +        AFFL  <                  8.5 THEN DO;
19357     +        _NODE_  =                   55;
19358     +        _LEAF_  =                    5;
19359     +        P_ORGYN1  =     0.10831234256926;
19360     +        P_ORGYN0  =     0.89168765743073;
19361     +        Q_ORGYN1  =     0.10831234256926;
19362     +        Q_ORGYN0  =     0.89168765743073;
19363     +        V_ORGYN1  =      0.1326352530541;
19364     +        V_ORGYN0  =     0.86736474694589;
19365     +        I_ORGYN  = '0' ;
19366     +        U_ORGYN  =                    0;
19367     +        END;
19368     +      ELSE DO;
19369     +        _NODE_  =                   56;
19370     +        _LEAF_  =                    6;
19371     +        P_ORGYN1  =     0.26825127334465;
19372     +        P_ORGYN0  =     0.73174872665534;
19373     +        Q_ORGYN1  =     0.26825127334465;
19374     +        Q_ORGYN0  =     0.73174872665534;
19375     +        V_ORGYN1  =     0.23747276688453;
19376     +        V_ORGYN0  =     0.76252723311546;
19377     +        I_ORGYN  = '0' ;
19378     +        U_ORGYN  =                    0;
19379     +        END;
19380     +      END;
19381     +    ELSE DO;
19382     +      IF  NOT MISSING(AGE ) AND
19383     +        AGE  <                 76.5 THEN DO;
19384     +        IF  NOT MISSING(AFFL ) AND
19385     +                           7.5 <= AFFL  THEN DO;
19386     +          IF  NOT MISSING(S_CONV ) AND
19387     +            S_CONV  <                6.865 THEN DO;
19388     +            _NODE_  =                   61;
19389     +            _LEAF_  =                    9;
19390     +            P_ORGYN1  =     0.13736263736263;
19391     +            P_ORGYN0  =     0.86263736263736;
19392     +            Q_ORGYN1  =     0.13736263736263;
19393     +            Q_ORGYN0  =     0.86263736263736;
19394     +            V_ORGYN1  =     0.08823529411764;
19395     +            V_ORGYN0  =     0.91176470588235;
19396     +            I_ORGYN  = '0' ;
19397     +            U_ORGYN  =                    0;
19398     +            END;
19399     +          ELSE DO;
19400     +            _NODE_  =                   62;
19401     +            _LEAF_  =                   10;
19402     +            P_ORGYN1  =     0.04545454545454;
19403     +            P_ORGYN0  =     0.95454545454545;
19404     +            Q_ORGYN1  =     0.04545454545454;
19405     +            Q_ORGYN0  =     0.95454545454545;
19406     +            V_ORGYN1  =     0.08360128617363;
19407     +            V_ORGYN0  =     0.91639871382636;
19408     +            I_ORGYN  = '0' ;
19409     +            U_ORGYN  =                    0;
19410     +            END;
19411     +          END;
19412     +        ELSE DO;
19413     +          IF  NOT MISSING(S_TOIL ) AND
19414     +                           42.04 <= S_TOIL  THEN DO;
19415     +            _NODE_  =                   60;
19416     +            _LEAF_  =                    8;
19417     +            P_ORGYN1  =                 0.25;
19418     +            P_ORGYN0  =                 0.75;
19419     +            Q_ORGYN1  =                 0.25;
19420     +            Q_ORGYN0  =                 0.75;
19421     +            V_ORGYN1  =                    0;
19422     +            V_ORGYN0  =                    1;
19423     +            I_ORGYN  = '0' ;
19424     +            U_ORGYN  =                    0;
19425     +            END;
19426     +          ELSE DO;
19427     +            _NODE_  =                   59;
19428     +            _LEAF_  =                    7;
19429     +            P_ORGYN1  =      0.0204081632653;
19430     +            P_ORGYN0  =     0.97959183673469;
19431     +            Q_ORGYN1  =      0.0204081632653;
19432     +            Q_ORGYN0  =     0.97959183673469;
19433     +            V_ORGYN1  =     0.03181818181818;
19434     +            V_ORGYN0  =     0.96818181818181;
19435     +            I_ORGYN  = '0' ;
19436     +            U_ORGYN  =                    0;
19437     +            END;
19438     +          END;
19439     +        END;
19440     +      ELSE DO;
19441     +        _NODE_  =                   54;
19442     +        _LEAF_  =                   11;
19443     +        P_ORGYN1  =     0.15384615384615;
19444     +        P_ORGYN0  =     0.84615384615384;
19445     +        Q_ORGYN1  =     0.15384615384615;
19446     +        Q_ORGYN0  =     0.84615384615384;
19447     +        V_ORGYN1  =     0.08450704225352;
19448     +        V_ORGYN0  =     0.91549295774647;
19449     +        I_ORGYN  = '0' ;
19450     +        U_ORGYN  =                    0;
19451     +        END;
19452     +      END;
19453     +    END;
19454     +  END;
19455     +
19456     +*****  RESIDUALS R_ *************;
19457     +IF  F_ORGYN  NE '1'
19458     +AND F_ORGYN  NE '0'  THEN DO;
19459     +        R_ORGYN1  = .;
19460     +        R_ORGYN0  = .;
19461     + END;
19462     + ELSE DO;
19463     +       R_ORGYN1  =  -P_ORGYN1 ;
19464     +       R_ORGYN0  =  -P_ORGYN0 ;
19465     +       SELECT( F_ORGYN  );
19466     +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
19467     +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
19468     +       END;
19469     + END;
19470     +
19471     +****************************************************************;
19472     +******          END OF DECISION TREE SCORING CODE         ******;
19473     +****************************************************************;
19474     +
19475     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
19476      run;

NOTE: DATA STEP view saved on file EMWS1.TREE_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

19477      quit;
19478      filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
19480      proc sort data=WORK.EM_USER_REPORT;
19481      by ID VIEW;
19482      run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

19483      *------------------------------------------------------------*;
19484      * Tree: Computing metadata for TRAIN data;
19485      *------------------------------------------------------------*;

19881      data WORK.MODELTEMP_INFO;
19882      set EMWS1.Tree_EMINFO;
19883      where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
19884      run;

NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19885      data EMWS1.Tree_EMINFO;
19886      length TARGET KEY $32 DATA $43;
19887      input TARGET KEY DATA $;
19888      cards;

NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

19892      run;
19893      data EMWS1.Tree_EMINFO;
19894      set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
19895      run;

NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

19896      proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
19897      by TARGET KEY;
19898      run;

NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      

19899      proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
19900      by TARGET KEY;
19901      run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19902      proc sort data = EMWS1.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
19903      by TARGET KEY;
19904      run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

19905      data EMWS1.Tree_EMINFO;
19906      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
19907      by TARGET KEY;
19908      run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

19909      proc datasets lib=work nolist;
19910      delete TEMP_INFO SORTEDEMINFO;
19911      run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
19912      quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19913      data EMWS1.Tree_EMOUTFIT;
19914      set EMWS1.Tree_EMOUTFIT;
19915      length TargetLabel $200;
19916      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
19917      run;

NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

19918      proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
19919      by TARGET;
19920      run;

NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
      

19921      %let _EMwarndup = 0;
19922      %let _EMtargetdup =;
19923      %let _EMASEtargetdup =;
19924      data _null_;
19925      set EMWS1.Tree_EMOUTFIT;
19926      if .<_ASE_<0.000001 then do;
19927      call symput('_EMwarndup', '1');
19928      call symput('_EMtargetdup', target);
19929      call symput('_EMASEtargetdup', put(_ASE_, best.));
19930      end;
19931      run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19932      %let EMEXCEPTIONSTRING=;
19933      *------------------------------------------------------------*;
19934      * REPORT: Tree;
19935      *------------------------------------------------------------*;
19936      %let EM_ACTION = REPORT;
19937      %let syscc = 0;
19938      %macro main;
19939      
19940        %if %upcase(&EM_ACTION) = CREATE %then %do;
19941          filename temp catalog 'sashelp.emmodl.tree_create.source';
19942          %include temp;
19943          filename temp;
19944      
19945          %em_tree_create;
19946        %end;
19947      
19948         %else
19949         %if %upcase(&EM_ACTION) = TRAIN %then %do;
19950      
19951             filename temp catalog 'sashelp.emmodl.tree_train.source';
19952             %include temp;
19953             filename temp;
19954             %em_tree_train;
19955         %end;
19956      
19957        %else
19958        %if %upcase(&EM_ACTION) = SCORE %then %do;
19959          filename temp catalog 'sashelp.emmodl.tree_score.source';
19960          %include temp;
19961          filename temp;
19962      
19963          %em_tree_score;
19964      
19965        %end;
19966      
19967        %else
19968        %if %upcase(&EM_ACTION) = REPORT %then %do;
19969      
19970             filename temp catalog 'sashelp.emmodl.tree_report.source';
19971             %include temp;
19972             filename temp;
19973      
19974             %em_tree_report;
19975         %end;
19976      
19977        %else
19978        %if %upcase(&EM_ACTION) = OPENINT %then %do;
19979      
19980             filename temp catalog 'sashelp.emmodl.tree_actions.source';
19981             %include temp;
19982             filename temp;
19983             %EM_TREE_OPENTREEVIEWER;
19984      
19985         %end;
19986      
19987        %else
19988        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
19989      
19990             filename temp catalog 'sashelp.emmodl.tree_actions.source';
19991             %include temp;
19992             filename temp;
19993             %EM_TREE_CLOSETREEVIEWER;
19994      
19995         %end;
19996      
19997      
19998         %doendm:
19999      %mend main;
20000      
20001      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
20003     +%macro em_tree_makePlotDs( multipleTar= );
20005     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20006     +  %EM_GETNAME(key=OUTNODES, type=DATA);
20007     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20008     +  %EM_GETNAME(key=OUTRULES, type=DATA);
20010     +  /* determine if validation statistics will be displayed */
20011     +  %let validflag=N;
20012     +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
20013     +    /* determine if validation data exists */
20014     +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
20015     +      %let validflag=Y;
20016     +    %end;
20017     +  %end;
20019     +   /* retrieve name of decmeta even in presence of multiple targets */
20020     +   %let decmeta = ;
20021     +   %if &EM_DEC_DECMETA eq %then %do;
20022     +     data _Target;
20023     +       set &em_data_variableset;
20024     +       where ROLE='TARGET' and USE in('D', 'Y');
20025     +       keep NAME;
20026     +     run;
20027     +     proc sort data=_Target;
20028     +       by NAME;
20029     +     run;
20030     +     proc sort data=EM_TARGETDECINFO;
20031     +       by TARGET;
20032     +     run;
20033     +     data _Target;
20034     +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
20035     +       by NAME;
20036     +       if _a then do;
20037     +         call symput('decmeta', trim(DECMETA));
20038     +       end;
20039     +     run;
20040     +     proc delete data=_Target;run;
20041     +   %end;
20042     +   %else %let decmeta = &EM_DEC_DECMETA;
20045     +  /* retrieve targetEvent from decmeta */
20046     +  %let targetEvent=;
20047     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20048     +    %if %sysfunc(exist(&DECMETA)) %then %do;
20049     +      data _null_;
20050     +       set &DECMETA(where=(_TYPE_="TARGET"));
20051     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
20052     +      run;
20053     +    %end;
20054     +  %end;
20056     +  /* retrieve predicted var for targetEvent from decmeta */
20057     +  %let predTarget=;
20058     +  %let predLvl=;
20059     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20060     +    %if %sysfunc(exist(&DECMETA)) %then %do;
20061     +      data _null_;
20062     +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
20063     +       call symput('predTarget', strip(VARIABLE));
20064     +       call symput('predLvl', strip(LEVEL));
20065     +      run;
20066     +    %end;
20067     +  %end;
20068     +  %else %do;
20069     +    %if %sysfunc(exist(&DECMETA)) %then %do;
20070     +      data _null_;
20071     +       set &DECMETA(where=(_TYPE_="PREDICTED"));
20072     +       call symput('predTarget', strip(VARIABLE));
20073     +      run;
20074     +    %end;
20075     +  %end;
20077     +  /* create BelowText value */
20078     +  data belowtext;
20079     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
20080     +    keep node belowtext;
20081     +  run;
20083     +  /* replace belowtext with variable label if it exists */
20084     +  data belowtext2;
20085     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
20086     +    keep node belowtextlbl;
20087     +  run;
20089     +  proc sort data=belowtext; by node; run;
20090     +  proc sort data=belowtext2; by node; run;
20092     +  data belowtext;
20093     +    merge belowtext belowtext2(in=_a);
20094     +    by node;
20095     +    if _a then belowtext=belowtextlbl;
20096     +    keep node belowtext;
20097     +  run;
20099     +  /* create AboveText value */
20100     +  data abovetext;
20101     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
20102     +  run;
20103     +  proc sort data=abovetext; by node numeric_value; run;
20105     +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
20106     +  data abovetext;
20107     +    set abovetext(rename=(node=parent));
20108     +    by parent numeric_value;
20109     +    retain abovetext tempstring flag branch origval origchar ;
20110     +    length abovetext $256;
20111     +    length tempstring origchar $64;
20113     +    if STAT in ("INTERVAL", "ORDINAL") then do;
20114     +      if first.parent then do;
20115     +        if missing(character_value) then do;
20116     +          numeric_value = round(numeric_value, &sp_precision);
20117     +          abovetext = "< "||strip(NUMERIC_VALUE);
20118     +          branch = 1;
20119     +          origval = numeric_value;
20120     +          output;
20121     +        end;
20122     +        else do;
20123     +          abovetext = "< "||strip(CHARACTER_VALUE);
20124     +          branch = 1;
20125     +          origchar = character_value;
20126     +          output;
20127     +        end;
20129     +        if first.parent AND last.parent then do;
20130     +          if missing(character_value) then do;
20131     +            numeric_value = round(numeric_value, &sp_precision);
20132     +            branch = branch + 1;
20133     +            abovetext = ">= "||strip(NUMERIC_VALUE);
20134     +            output;
20135     +          end;
20136     +          else do;
20137     +            branch = branch + 1;
20138     +            abovetext = ">= "||strip(CHARACTER_VALUE);
20139     +            output;
20140     +          end;
20141     +        end;
20142     +      end;
20143     +      else if last.parent then do;
20144     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
20145     +          if missing(character_value) then do;
20146     +            numeric_value = round(numeric_value, &sp_precision);
20147     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
20148     +          end;
20149     +          else do;
20150     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
20151     +          end;
20152     +          branch = branch + 1;
20153     +          output;
20155     +          if missing(character_value) then do;
20156     +            numeric_value = round(numeric_value, &sp_precision);
20157     +            abovetext = ">= "||strip(NUMERIC_VALUE);
20158     +          end;
20159     +          else do;
20160     +            abovetext = ">= "||strip(CHARACTER_VALUE);
20161     +          end;
20162     +          branch = branch + 1;
20163     +          output;
20164     +        end;
20165     +        else do;
20166     +          if missing(character_value) then do;
20167     +            numeric_value = round(numeric_value, &sp_precision);
20168     +            abovetext = ">= "||strip(NUMERIC_VALUE);
20169     +          end;
20170     +          else do;
20171     +            abovetext = ">= "||strip(CHARACTER_VALUE);
20172     +          end;
20173     +          branch = branch + 1;
20174     +          output;
20175     +        end;
20176     +      end;
20177     +      else do;
20178     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
20179     +          if missing(character_value) then do;
20180     +            numeric_value = round(numeric_value,&sp_precision);
20181     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
20182     +            origval = numeric_value;
20183     +          end;
20184     +          else do;
20185     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
20186     +            origchar = character_value;
20187     +          end;
20188     +          branch = branch + 1;
20189     +          output;
20191     +        end;
20192     +        else do;
20193     +          if missing(character_value) then do;
20194     +            numeric_value = round(numeric_value, &sp_precision);
20195     +            abovetext = ">= "||strip(NUMERIC_VALUE);
20196     +            origval = numeric_value;
20197     +          end;
20198     +          else do;
20199     +            abovetext = ">= "||strip(CHARACTER_VALUE);
20200     +            origval = character_value;
20201     +          end;
20202     +          branch = branch + 1;
20203     +          output;
20204     +        end;
20205     +      end;
20206     +    end;
20207     +    else do;
20208     +       if first.numeric_value then do;
20209     +         flag = 0;
20210     +         abovetext = strip(CHARACTER_VALUE);
20211     +         branch = numeric_value;
20212     +         if first.numeric_value AND last.numeric_value then do;
20213     +           output;
20214     +         end;
20215     +       end;
20216     +       else if last.numeric_value then do;
20217     +         if flag=0 then do;
20218     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
20219     +           length = length(strip(tempstring));
20220     +           if length < 32 then do;
20221     +             abovetext = strip(tempstring);
20222     +           end;
20223     +           else do;
20224     +             abovetext = strip(abovetext)||", ...";
20225     +             flag = 1;
20226     +           end;
20227     +         end;
20228     +         branch = numeric_value;
20229     +         output;
20230     +       end;
20231     +       else do;
20232     +         if flag=0 then do;
20233     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
20234     +           length = length(strip(tempstring));
20235     +           if length < 32 then do;
20236     +             abovetext = strip(tempstring);
20237     +           end;
20238     +           else do;
20239     +             abovetext = strip(abovetext)||", ...";
20240     +             flag=1;
20241     +           end;
20242     +         end;
20243     +         branch = numeric_value;
20244     +       end;
20245     +    end;
20246     +    keep parent branch abovetext;
20247     +  run;
20249     +  /* Missing value to abovetext */
20250     +  data tempmissing;
20251     +    set &EM_USER_OUTRULES;
20252     +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
20253     +    rename node=parent numeric_value=branch character_value=misschar;
20254     +  run;
20257     +  proc sort data=abovetext; by parent branch; run;
20258     +  proc sort data=tempmissing; by parent branch; run;
20259     +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
20261     +  data tempoutnodes;
20262     +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
20263     +    by parent branch;
20264     +    length traintotal validtotal 8;
20265     +    retain traintotal validtotal;
20267     +    if _a then do;
20268     +      if ^MISSING(abovetext) then do;
20269     +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
20270     +      end;
20271     +      else do;
20272     +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
20273     +      end;
20274     +    end;
20275     +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
20277     +    if node=1 then do;
20278     +      traintotal = N;
20279     +      validtotal=VN;
20280     +    end;
20282     +    drop role rank stat misschar belowtext;
20283     +  run;
20284     +  proc sort data=tempoutnodes; by node; run;
20285     +  proc sort data=belowtext; by node; run;
20287     +  data tempoutnodes;
20288     +    merge tempoutnodes belowtext;
20289     +    by node;
20291     +  run;
20293     +  /* determine if adjusted counts exists; if so, use these vs true counts */
20294     +  %let adjusted = N;
20295     +  %let npriors = 0;
20296     +  data _null_ ;
20297     +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
20298     +    if eof then do ;
20299     +      call symput("npriors" , strip(put(_N_,best.))) ;
20300     +    end;
20301     +  run;
20302     +  %if &npriors gt 0 %then %let adjusted=Y;
20305     +  /* create a table with targetUsed and targetLevel columns for each node */
20306     +  data temptarmeta;
20307     +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
20308     +    %if &multipleTar eq N %then %do;
20309     +      AND USE in ('D', 'Y')
20310     +    %end;
20311     +    ));
20312     +    length TARGET $32;
20313     +    Target=name;
20314     +    keep target level;
20315     +  run;
20317     +  %if &multipleTar eq Y %then %do;
20318     +    data temptargetused;
20319     +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
20320     +      keep node target;
20321     +    run;
20322     +    proc sort data=temptargetused; by target; run;
20323     +    proc sort data=temptarmeta; by target; run;
20324     +    data temptargetused;
20325     +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
20326     +      by target;
20327     +      if _a and _b;
20328     +    run;
20329     +  %end;
20330     +  %else %do;
20331     +    data temptargetused;
20332     +      set &EM_USER_OUTSTATS;
20333     +      length target $32 tarlevel $10;
20334     +      target="%EM_TARGET";
20335     +      tarlevel="%EM_TARGET_LEVEL";
20336     +      keep node target tarlevel;
20337     +    run;
20338     +    proc sort data=temptargetused nodupkey; by node; run;
20339     +  %end;
20341     +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
20342     +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
20343     +  proc sort data=temptargetused; by node; run;
20346     +  /* create tables for all interval targets as well as all class targets */
20347     +  data tempinterval tempclass;
20348     +    merge tempoutstats temptargetused( rename=(target=targetused));
20349     +    by node;
20350     +    %if "&multipleTar" eq "Y" %then %do;
20351     +      if ((missing(Target)) OR (target=targetused ));
20352     +    %end;
20354     +    if tarlevel="INTERVAL" then output tempinterval;
20355     +    else output tempclass;
20356     +  run;
20358     +  /* initialize intTarget and classTarget flags */
20359     +  %let em_intNobs =0;
20360     +  %let em_classNobs = 0;
20361     +  %let em_intTarget= N;
20362     +  %let em_classTarget= N;
20364     +  proc sql;
20365     +    reset noprint;
20366     +    select count(*) into :em_intNobs from tempinterval;
20367     +  quit;
20368     +  proc sql;
20369     +    reset noprint;
20370     +    select count(*) into :em_classNobs from tempclass;
20371     +  quit;
20373     +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
20374     +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
20376     +  /* retrieve all information for interval targets */
20377     +  %if &em_intTarget eq Y %then %do;
20379     +    /* determine if leaf variable exists */
20380     +    %let dsid=%sysfunc(open(tempinterval,i));
20381     +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
20382     +    %let rc=%sysfunc(close(&dsid));
20384     +    proc transpose data=tempinterval
20385     +      %if &leafexists %then %do;
20386     +        (drop=leaf)
20387     +      %end;
20388     +      %if &validexist %then %do;
20389     +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
20390     +      %end;
20391     +      %else %do;
20392     +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
20393     +      %end;
20394     +      by node;
20395     +      id statname;
20396     +    run;
20397     +    data tempinterval;
20398     +      set tempinterval;
20399     +      if missing(N) then delete;
20400     +    run;
20401     +  %end;
20403     +  /* retrieve all information for class targets */
20404     +  %if &em_classTarget eq Y %then %do;
20405     +    proc sort data=tempclass; by node category; run;
20406     +    %if &validflag eq N %then %do;
20407     +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
20408     +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
20409     +    %end;
20410     +    %else %do;
20411     +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
20412     +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
20413     +    %end;
20414     +      set tempclass;
20416     +      %if &validflag eq N %then %do;
20417     +        %if "&adjusted" eq "N" %then %do;
20418     +          if statname="N" then output tempn;
20419     +        %end;
20420     +        %else %do;
20421     +          if statname="NPRIORS" then output tempn;
20422     +        %end;
20423     +        else if statname="PREDICTION" then output temppredict;
20424     +        else if statname="PROBABILITY" then output tempprob;
20425     +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
20426     +        else if statname="ALTERNATIVE LOSS" then output temploss;
20427     +      %end;
20428     +      %else %do;
20429     +        %if "&adjusted" eq "N" %then %do;
20430     +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
20431     +        %end;
20432     +        %else %do;
20433     +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
20434     +        %end;
20435     +        else if statname="PREDICTION" then output temppredict;
20436     +        else if statname="PROBABILITY" then output tempprob;
20437     +        else if statname="VALID: PROBABILITY" then output tempvprob;
20438     +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
20439     +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
20440     +      %end;
20441     +    run;
20444     +    /* determine if profit/loss exists in tempprofit */
20445     +    %let em_profitflag=0;
20446     +    %let em_lossflag=0;
20447     +    proc sql;
20448     +      reset noprint;
20449     +      select count(*) into :em_profitflag from tempprofit;
20450     +    quit;
20451     +    proc sql;
20452     +      reset noprint;
20453     +      select count(*) into :em_lossflag from temploss;
20454     +    quit;
20456     +    %if &validFlag eq Y %then %do;
20457     +      proc transpose data=tempn
20458     +        %if "&adjusted" eq "N" %then %do;
20459     +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
20460     +        %end;
20461     +        %else %do;
20462     +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
20463     +        %end;
20464     +        by node;
20465     +        id statname;
20466     +      run;
20467     +      %if &em_profitflag ne 0 %then %do;
20468     +        proc transpose data=tempprofit out=tempprofit;
20469     +          by node category;
20470     +          id statname ;
20471     +        run;
20472     +      %end;
20473     +      %if &em_lossflag ne 0 %then %do;
20474     +        proc transpose data=temploss out=temploss;
20475     +          by node category;
20476     +          id statname ;
20477     +        run;
20478     +      %end;
20479     +      data tempprob;
20480     +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
20481     +        by node
20482     +        %if &multipleTar eq Y %then %do;
20483     +          target
20484     +        %end;
20485     +        category;
20486     +      run;
20487     +    %end;
20489     +    /* store percentcorrect value */
20490     +    data temppredict;
20491     +      merge tempprob temppredict(in=_a);
20492     +      by node category;
20493     +      if _a then do;
20494     +        percentCorrect = statvalue;
20495     +        %if &validFlag eq Y %then %do;
20496     +          vpercentCorrect= vstatvalue;
20497     +        %end;
20498     +      end;
20499     +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
20500     +      %if &validFlag eq Y %then %do;
20501     +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
20502     +      %end;
20503     +      ;
20504     +      if missing(percentCorrect) then delete;
20505     +      drop target;
20506     +    run;
20508     +    /* build profittext */
20509     +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20510     +      data tempprofittext(keep= node profittext profitloss);
20511     +        length profittext $800 profitloss 8.;
20512     +        retain profittext profitloss;
20514     +        merge tempprob
20515     +        %if &em_profitflag ne 0 %then %do;
20516     +          tempprofit
20517     +        %end;
20518     +        %else %if &em_lossflag ne 0 %then %do;
20519     +          temploss
20520     +        %end;
20521     +        ;
20522     +        by node category;
20524     +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20525     +        %let profittype = &EM_PROPERTY_PROFITLOSS;
20526     +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
20527     +          %let profittype = ALL;
20528     +        %end;
20530     +        /* create the profitloss variable for nodecolor if selected */
20531     +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
20533     +        %if "&profittype" eq "ALL" %then %do;
20534     +          if strip(CATEGORY)="&targetEvent" then do;
20535     +            profitloss=statvalue;
20536     +          end;
20537     +          if first.node then do;
20538     +            %if &validFlag eq N %then %do;
20539     +             %if &em_profitflag ne 0 %then %do;
20540     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20541     +             %end;
20542     +             %if &em_lossflag ne 0 %then %do;
20543     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20544     +             %end;
20545     +            %end;
20546     +            %else %do;
20547     +             %if &em_profitflag ne 0 %then %do;
20548     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20548    !+14.&EM_PROPERTY_SPLITPRECISION);
20549     +             %end;
20550     +             %if &em_lossflag ne 0 %then %do;
20551     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20552     +             %end;
20553     +            %end;
20554     +          end;
20555     +          else if last.node then do;
20556     +            %if &validFlag eq N %then %do;
20557     +             %if &em_profitflag ne 0 %then %do;
20558     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20559     +             %end;
20560     +             %if &em_lossflag ne 0 %then %do;
20561     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20562     +             %end;
20563     +             /*if CATEGORY="&targetEvent" then do;
20564     +               profitloss=statvalue;
20565     +             end;*/
20566     +            %end;
20567     +            %else %do;
20568     +             %if &em_profitflag ne 0 %then %do;
20569     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20569    !+14.&EM_PROPERTY_SPLITPRECISION);
20570     +                if CATEGORY="&targetEvent" then do;
20571     +                 profitloss=ALTERNATIVE_PROFIT;
20572     +                end;
20573     +             %end;
20574     +             %if &em_lossflag ne 0 %then %do;
20575     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20575    !+14.&EM_PROPERTY_SPLITPRECISION);
20576     +                if CATEGORY="&targetEvent" then do;
20577     +                  profitloss=ALTERNATIVE_LOSS;
20578     +                end;
20579     +             %end;
20580     +            %end;
20581     +            output;
20582     +          end;
20583     +          else do;
20584     +            %if &validFlag eq N %then %do;
20585     +             %if &em_profitflag ne 0 %then %do;
20586     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20587     +             %end;
20588     +             %if &em_lossflag ne 0 %then %do;
20589     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20590     +             %end;
20591     +            %end;
20592     +            %else %do;
20593     +             %if &em_profitflag ne 0 %then %do;
20594     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20594    !+14.&EM_PROPERTY_SPLITPRECISION);
20595     +             %end;
20596     +             %if &em_lossflag ne 0 %then %do;
20597     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20597    !+14.&EM_PROPERTY_SPLITPRECISION);
20598     +             %end;
20599     +            %end;
20600     +          end;
20601     +        %end;
20602     +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20603     +          if strip(CATEGORY) = "&targetevent" then do;
20604     +            %if &validFlag eq N %then %do;
20605     +             %if &em_profitflag ne 0 %then %do;
20606     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20607     +             %end;
20608     +             %if &em_lossflag ne 0 %then %do;
20609     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20610     +             %end;
20611     +             profitloss=statvalue;
20612     +            %end;
20613     +            %else %do;
20614     +             %if &em_profitflag ne 0 %then %do;
20615     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20615    !+14.&EM_PROPERTY_SPLITPRECISION);
20616     +                profitloss=ALTERNATIVE_PROFIT;
20617     +             %end;
20618     +             %if &em_lossflag ne 0 %then %do;
20619     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20620     +                profitloss=ALTERNATIVE_LOSS;
20621     +             %end;
20622     +            %end;
20623     +            output;
20624     +          end;
20625     +        %end;
20626     +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
20627     +          if strip(CATEGORY) = "&targetevent" then do;
20628     +            %if &validFlag eq N %then %do;
20629     +             profitloss=statvalue;
20630     +            %end;
20631     +            %else %do;
20632     +             %if &em_profitflag ne 0 %then %do;
20633     +                profitloss=ALTERNATIVE_PROFIT;
20634     +             %end;
20635     +             %if &em_lossflag ne 0 %then %do;
20636     +                profitloss=ALTERNATIVE_LOSS;
20637     +             %end;
20638     +            %end;
20639     +            output;
20640     +          end;
20641     +        %end;
20642     +      run;
20643     +    %end;
20645     +    data tempprob(keep= node probtext);
20646     +      length probtext $800;
20647     +      retain probtext;
20648     +      set tempprob ;
20649     +      by node;
20651     +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20652     +      %let probtype = &EM_PROPERTY_TARGET;
20653     +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
20654     +        %let probtype = ALL;
20655     +      %end;
20657     +      %if "&probtype" eq "ALL" %then %do;
20658     +        if first.node then do;
20659     +          %if &validFlag eq N %then %do;
20660     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20661     +          %end;
20662     +          %else %do;
20663     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20664     +          %end;
20665     +        end;
20666     +        else if last.node then do;
20667     +          %if &validFlag eq N %then %do;
20668     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20669     +          %end;
20670     +          %else %do;
20671     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20672     +          %end;
20673     +          output;
20674     +        end;
20675     +        else do;
20676     +          %if &validFlag eq N %then %do;
20677     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20678     +          %end;
20679     +          %else %do;
20680     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20681     +          %end;
20682     +        end;
20683     +      %end;
20684     +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20685     +        if strip(CATEGORY) = "&targetevent" then do;
20686     +          %if &validFlag eq N %then %do;
20687     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20688     +          %end;
20689     +          %else %do;
20690     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20691     +          %end;
20692     +          output;
20693     +        end;
20694     +      %end;
20695     +      %else %if "&probtype" eq "NONE" %then %do;
20696     +        if last.node then do;
20697     +          output;
20698     +        end;
20699     +      %end;
20700     +    run;
20701     +  %end;
20703     +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
20705     +  %let oldexists=0;
20706     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
20707     +     data old_tree_plot;
20708     +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
20709     +        rename nodecolor=oldnodecolor;
20710     +     run;
20712     +     proc sort data=old_tree_plot;
20713     +        by node;
20714     +     run;
20716     +     %let oldexists=1;
20717     +  %end;
20719     +  data &EM_USER_TREE_PLOT;
20720     +    length textall $800;
20721     +    merge tempoutnodes temptargetused
20723     +    %if &em_intTarget eq Y %then %do;
20724     +      tempinterval
20725     +    %end;
20727     +    %if &em_classTarget eq Y %then %do;
20729     +      %if &validFlag eq N %then %do;
20730     +        tempn(rename=(statvalue=N))
20731     +      %end;
20732     +      %else %do;
20733     +        tempn
20734     +      %end;
20736     +      temppredict tempprob
20738     +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20739     +        tempprofittext
20740     +      %end;
20741     +    %end;
20742     +    ;
20743     +    by node;
20745     +    /* build nodetext based on user selection */
20746     +    textall="";
20748     +    %if &em_intTarget eq Y %then %do;
20749     +    if tarlevel="INTERVAL" then do;
20750     +      /* Nodeid */
20751     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20752     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20753     +      %end;
20755     +      /* Target identifier if multiple targets are used */
20756     +      %if "&multipleTar" eq "Y" %then %do;
20757     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20758     +      %end;
20760     +      %if &validFlag eq Y %then %do;
20761     +         /* Column labels displayed in validflag eq Y only */
20762     +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20763     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20763    !+ noquote ))";
20764     +         %end;
20766     +         /* Average values */
20767     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20768     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20769     +         %end;
20771     +         /* RASE */
20772     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20773     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
20774     +         %end;
20776     +         /* Count */
20777     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20778     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
20779     +         %end;
20780     +      %end;
20781     +      %else %do;
20782     +         /* Average values */
20783     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20784     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20785     +         %end;
20787     +         /* RASE */
20788     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20789     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
20790     +         %end;
20792     +         /* Count */
20793     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20794     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
20795     +         %end;
20796     +      %end;
20798     +      /* nodecolor */
20799     +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
20800     +        nodecolor=PREDICTION;
20801     +      %end;
20802     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
20803     +        nodecolor=RASE;
20804     +      %end;
20805     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
20806     +        nodecolor=1;
20807     +      %end;
20809     +    end;
20810     +    %end;
20811     +    %if &em_classTarget eq Y %then %do;
20812     +    if tarlevel^="INTERVAL" then  do;
20814     +      /* Nodeid */
20815     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20816     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20817     +      %end;
20818     +      /* Target identifier if multiple targets are used */
20819     +      %if "&multipleTar" eq "Y" %then %do;
20820     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20821     +      %end;
20823     +      /* Predicted values */
20824     +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
20825     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
20826     +      %end;
20828     +      /* Column labels displayed in validflag eq Y only */
20829     +      %if "&ValidFlag" eq "Y" %then %do;
20830     +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20831     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20831    !+ noquote ))";
20832     +        %end;
20833     +      %end;
20835     +      /* Target Values */
20836     +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
20837     +        textall=strip(textall)||"0A"x||strip(probtext);
20838     +      %end;
20840     +      /* include profit or loss for all target levels */
20841     +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
20842     +        textall=strip(textall)||"0A"x||strip(profittext);
20843     +      %end;
20845     +      %if &validFlag eq N %then %do;
20846     +        /* Percent Correct */
20847     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20848     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
20849     +        %end;
20851     +         /* Count */
20852     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20853     +          %if "&adjusted" eq "N" %then %do;
20854     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
20855     +          %end;
20856     +          %else %do;
20857     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
20858     +          %end;
20859     +         %end;
20860     +      %end;
20861     +      %else %do;
20862     +        /* Percent Correct */
20863     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20864     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
20865     +        %end;
20867     +         /* Count */
20868     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20869     +          %if "&adjusted" eq "N" %then %do;
20870     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
20871     +          %end;
20872     +          %else %do;
20873     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
20874     +          %end;
20875     +         %end;
20876     +      %end;
20878     +      /* nodecolor */
20879     +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
20880     +       %if &multipleTar ne Y %then %do;
20881     +        nodecolor=&predTarget;
20882     +       %end;
20883     +       %else %do;
20884     +         nodecolor=percentcorrect;
20885     +       %end;
20886     +      %end;
20887     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
20888     +        nodecolor=percentcorrect;
20889     +      %end;
20890     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
20891     +        nodecolor=1;
20892     +      %end;
20893     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
20894     +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
20895     +          nodecolor=percentcorrect;
20896     +        %end;
20897     +        %else %do;
20898     +          nodecolor=profitloss;
20899     +        %end;
20900     +      %end;
20902     +    end;
20903     +    %end;
20904     +    %if &em_intTarget eq Y %then %do;
20905     +     drop  PREDICTION  TARGET TARLEVEL
20906     +     %if &ValidFlag eq Y %then %do;
20907     +         VPREDICTION
20908     +     %end;
20909     +     ;
20910     +    %end;
20911     +    %if &em_classTarget eq Y %then %do;
20912     +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
20913     +     %if &ValidFlag eq Y %then %do;
20914     +         VSTATVALUE
20915     +     %end;
20916     +     ;
20917     +    %end;
20919     +  run;
20921     +  /* add leaf index information to plotds - based on primary target only*/
20922     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20923     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20924     +      set &EM_USER_OUTSTATS;
20925     +      if ((statname="PROBABILITY"
20926     +      %if &validexist %then %do;
20927     +       or statname="VALID: PROBABILITY"
20928     +      %end;
20929     +      ) AND (CATEGORY="&TARGETEVENT")
20930     +      %if "&multipleTar" eq "Y" %then %do;
20931     +        AND (Target="%EM_TARGET")
20932     +      %end;
20933     +      );
20934     +    run;
20936     +    %if &validexist %then %do;
20937     +      proc sort data=tempprob; by node; run;
20938     +      %let vpredTarget = V%substr(&predTarget, 2);
20939     +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
20940     +         by node;
20941     +         id statname;
20942     +      run;
20943     +    %end;
20944     +  %end;
20945     +  %else %do;
20946     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20947     +      set &EM_USER_OUTSTATS;
20948     +      if ((statname="PREDICTION"
20949     +      %if &validexist %then %do;
20950     +       or statname="VALID: PREDICTION"
20951     +      %end;
20952     +      )
20953     +      %if "&multipleTar" eq "Y" %then %do;
20954     +        AND (Target="%EM_TARGET")
20955     +      %end;
20956     +      );
20957     +    run;
20958     +    %if &validexist %then %do;
20959     +      proc sort data=tempprob; by node; run;
20960     +      %let vpredTarget = V%substr(&predTarget, 2);
20961     +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
20962     +         by node;
20963     +         id statname;
20964     +      run;
20965     +    %end;
20966     +  %end;
20968     +  proc sort data=tempprob; by node; run;
20969     +  data tempoutnodes;
20970     +    merge tempoutnodes tempprob;
20971     +    by node;
20972     +  run;
20974     +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
20975     +  data tempnodes;
20976     +    retain traintotal validtotal;
20977     +    set tempnodes(where=(leaf ne . ));
20978     +    tprob=round(&predTarget, .01);
20979     +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20980     +      percevent_train=round(tprob*100, .01);
20981     +    %end;
20982     +    %else %do;
20983     +      percevent_train=tprob;
20984     +    %end;
20986     +    perc_train=round((n/traintotal)*100, 0.01);
20987     +    /* leafwidth already has a *10 multiplier */
20988     +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
20990     +    %if &validexist %then %do;
20991     +      %let vpredTarget = V%substr(&predTarget,2);
20992     +      vprob=round(&vpredTarget, .01);
20993     +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20994     +        percevent_valid=round(vprob*100, .01);
20995     +      %end;
20996     +      %else %do;
20997     +        percevent_valid=vprob;
20998     +      %end;
20999     +      perc_valid=round((vn/validtotal)*100, .01);
21000     +    %end;
21002     +    index=_N_;
21003     +    keep node index tprob perc_train percevent_train
21004     +    %if &validexist %then %do;
21005     +        vprob percevent_valid perc_valid
21006     +    %end;
21007     +    ;
21008     +  run;
21009     +  proc sort data=tempnodes; by node; run;
21010     +  data &EM_USER_TREE_PLOT;
21011     +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
21012     +    by node;
21013     +    if missing(node) then delete;
21014     +    %if &oldexists %then %do;
21015     +      if missing(nodecolor) then nodecolor=oldnodecolor;
21016     +      drop oldnodecolor;
21017     +    %end;
21018     +    abovetext = compbl(abovetext);
21020     +    /* add variable labels */
21021     +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
21022     +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
21023     +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
21024     +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
21025     +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
21026     +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
21028     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21029     +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
21030     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
21031     +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
21032     +          %end;
21033     +          %else %do;
21034     +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
21035     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
21036     +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
21037     +          %end;
21038     +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
21040     +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
21041     +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
21042     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21043     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
21044     +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
21045     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
21046     +          %end;
21047     +          %else %do;
21048     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
21049     +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
21050     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
21051     +          %end;
21052     +    ;
21053     +  run;
21055     +  /* delete temporary tables */
21056     +  proc datasets lib=work nolist;
21057     +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
21058     +  run;
21060     +%mend em_tree_makePlotDs;
21064     +%macro em_tree_report;
21066     +   /* report properties */
21067     +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
21068     +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
21069     +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
21070     +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
21071     +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
21072     +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
21073     +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
21074     +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
21075     +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
21076     +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
21077     +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
21078     +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
21079     +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
21081     +   %let validexist=0;
21082     +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
21083     +     %let validexist=1;
21084     +   %end;
21086     +   /* determine if multiple targets will be processed */
21087     +   %let em_tree_multipleTargets=N;
21088     +   %let em_tree_numTarget=1;
21089     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
21090     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
21091     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
21092     +         %let em_tree_multipleTargets=N;
21093     +      %end;
21094     +      %else %do;
21095     +        data _null_;
21096     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
21097     +          if eof then
21098     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
21099     +        run;
21101     +        %if &em_tree_numTarget gt 1 %then %do;
21102     +           %let em_tree_multipleTargets=Y;
21103     +        %end;
21104     +     %end;
21105     +   %end;
21107     +  %if "&em_tree_multipleTargets" eq "N" %then %do;
21109     +   /* variable importance */
21110     +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
21111     +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
21113     +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
21114     +     /* and the columns may not be generated                                                                                 */
21115     +     %let em_tree_cvexists=;
21116     +     %let em_tree_surrexists=.;
21117     +     data _null_;
21118     +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
21119     +       if eof then do ;
21120     +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
21121     +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
21122     +       end;
21123     +     run;
21125     +     data &EM_USER_OUTIMPORT;
21126     +         set &EM_USER_OUTIMPORT;
21127     +         /* format columns based on Precison value specified */
21128     +         format importance 15.&EM_PROPERTY_PRECISION
21129     +              %if &validexist %then %do;
21130     +                vimportance ratio 15.&EM_PROPERTY_PRECISION
21131     +              %end;
21132     +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
21133     +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
21134     +              %end;
21135     +         ;
21136     +     run;
21138     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
21139     +     proc print data=&EM_USER_OUTIMPORT
21140     +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
21141     +          (where=((nrules>0) OR (nsurrogates>0)))
21142     +        %end;
21143     +        %else %do;
21144     +           (where=(nrules>0))
21145     +        %end;
21146     +        label noobs
21147     +        ;
21148     +     run;
21149     +     title10;
21151     +   %end;
21153     +   /* Sequence */
21154     +   %EM_GETNAME(key=OUTSEQ, type=DATA);
21155     +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
21156     +   data _null_ ;
21157     +      set &EM_USER_outseq (obs=2) end=eof ;
21158     +      if eof then do ;
21159     +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
21160     +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
21161     +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
21162     +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
21163     +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
21164     +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
21165     +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
21166     +      end;
21167     +    run;
21169     +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
21170     +      data &EM_USER_OUTSEQ;
21171     +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
21172     +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
21173     +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21174     +           _XMISC_=_VMISC_
21175     +        %end;
21176     +        %if "&em_tree_aprof" ne "."  %then %do;
21177     +           _XAPROF_=_VAPROF_
21178     +           _XPROF_ = _VPROF_
21179     +        %end;
21180     +        %if "&em_tree_aloss" ne "."  %then %do;
21181     +           _XALOSS_=_VALOSS_
21182     +        %end;
21183     +        %if "&EM_TREE_PRIOR" ne "." %then %do;
21184     +           _XPASE_ = _VPASE_
21185     +           _XPMISC_ = _VPMISC_
21186     +        %end;
21188     +        ));
21189     +     %end;
21190     +     %else %do;
21191     +        set &EM_USER_OUTSEQ;
21192     +     %end;
21194     +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
21195     +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21196     +            _MISC_   15.&EM_PROPERTY_PRECISION
21197     +         %end;
21198     +         %if "&EM_TREE_PRIOR" ne "." %then %do;
21199     +            _PASE_  15.&EM_PROPERTY_PRECISION
21200     +            _PMISC_ 15.&EM_PROPERTY_PRECISION
21201     +         %end;
21202     +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
21203     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
21204     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21205     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
21206     +            %end;
21207     +            %if "&EM_TREE_PRIOR" ne "." %then %do;
21208     +              _VPASE_  15.&EM_PROPERTY_PRECISION
21209     +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
21210     +            %end;
21211     +         %end;
21212     +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
21213     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
21214     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21215     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
21216     +            %end;
21217     +         %end;
21218     +         %if "&em_tree_seq" ne "." %then %do;
21219     +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
21220     +         %end;
21221     +         %if "&em_tree_vseq" ne "." %then %do;
21222     +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
21223     +         %end;
21224     +         %if "&em_tree_aprof" ne "." %then %do;
21225     +           _APROF_ 15.&EM_PROPERTY_PRECISION
21226     +           _PROF_ 15.&EM_PROPERTY_PRECISION
21227     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
21228     +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
21229     +             _VPROF_ 15.&EM_PROPERTY_PRECISION
21230     +           %end;
21231     +         %end;
21232     +         %else %if "&em_tree_aloss" ne "." %then %do;
21233     +           _ALOSS_  15.&EM_PROPERTY_PRECISION
21234     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
21235     +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
21236     +           %end;
21237     +         %end;
21238     +      ;
21239     +    run;
21240     +   %end;
21242     +   /* Observation Based Importance */
21243     +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
21245     +      /* need to check for 0 obs */
21246     +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
21247     +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
21248     +      %let rc=%sysfunc(close(&dsid));
21250     +      %if &onobs %then %do;
21251     +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
21252     +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
21254     +         data &EM_USER_OUTOBSIMP;
21255     +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
21256     +           if _a;
21257     +           by _INPUT1_;
21258     +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
21259     +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21260     +                     _MISC_ 15.&EM_PROPERTY_PRECISION
21261     +                   %end;
21262     +                   ;
21263     +         run;
21264     +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
21265     +      %end;
21266     +   %end;
21268     +  %end;
21270     +  /* create dataset to support tree diagram and icicle plot */
21271     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
21272     +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
21274     +  /* display tree diagram */
21275     +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
21276     +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
21278     +  /* display icicle diagram */
21279     +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
21280     +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
21282     +  /* Leaf Statistics Plot */
21283     +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
21285     +  /* print leaf information to output window */
21286     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
21288     +     proc sort data=&EM_USER_TREE_PLOT out=t;
21289     +       by descending N;
21290     +     run;
21292     +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
21293     +     %local vn;
21294     +     data _null_;
21295     +       set t (obs=2) end=eof;
21296     +       if eof then do;
21297     +         call symput("vn", strip(put(vn, best.)));
21298     +       end;
21299     +     run;
21301     +     data t;
21302     +       set t;
21303     +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
21304     +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
21305     +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21306     +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
21307     +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
21308     +       %end;
21309     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
21310     +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
21311     +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21312     +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
21313     +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
21314     +          %end;
21315     +       %end;
21316     +       ;
21317     +     run;
21319     +     /* determine if rase is found in t */
21320     +    %let dsid=%sysfunc(open(t,i));
21321     +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
21322     +    %let rc=%sysfunc(close(&dsid));
21324     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
21325     +     proc print data=t noobs label;
21326     +       where tprob ne .;
21327     +       var node depth N tprob
21328     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
21329     +         %if "&vn" ne "." %then %do;
21330     +           VN
21331     +         %end;
21332     +         vprob
21333     +       %end;
21334     +       %if &raseexists %then %do;
21335     +            RASE
21336     +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
21337     +              VRASE
21338     +            %end;
21339     +       %end;
21340     +       ;
21341     +     run;
21342     +     title10;
21343     +  %end;
21345     +  /* create plots that are done during training of node */
21346     +  /* display iterative plot, including reference line */
21347     +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
21348     +   /* %if &nleaves eq  %then %do; */
21349     +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
21350     +      data _null_;
21351     +        set &EM_USER_OUTTOPOLOGY end=eof;
21352     +        if eof then do;
21353     +          call symput('nleaves', LEAF);
21354     +        end;
21355     +      run;
21356     +   /* %end; */
21358     +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
21359     +    /*%EM_REPORT(view=1, Y=_ASE_); */
21360     +  %end;
21362     +  /* display leaf statistics */
21363     +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
21365     +  /* stats by node if multiple targets = Y */
21366     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
21367     +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
21368     +    data &EM_USER_OUTSTATS;
21369     +      set &EM_USER_OUTSTATS;
21371     +     * if STATNAME="TARGET" then delete;
21372     +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
21373     +      drop leaf;
21374     +    run;
21375     +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
21377     +  %end;
21378     +  %else %do;
21379     +    /* add outstats and outdescribe to spk but not results */
21380     +    %EM_REPORT(viewtype=, key=OUTSTATS);
21381     +  %end;
21383     +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 14 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 5 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 13 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_ORGYN_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_ORGYN_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 12 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 12 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 12 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 12 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 12 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 12 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 16 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 16 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 16 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 16 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 16 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 24 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 281 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 24 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 24 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 12 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 12 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 25 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 24 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 12 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 12 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 12 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 12 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 175 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 175 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 175 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 150 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 25 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 175 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 175 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 175 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 25 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 175 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 175 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 175 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 175 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 25 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 50 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 25 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: There were 50 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 50 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: There were 25 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 25 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.OLD_TREE_PLOT has 15 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.OLD_TREE_PLOT.
NOTE: The data set WORK.OLD_TREE_PLOT has 15 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1167:196   
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 25 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 25 observations read from the data set WORK.TEMPN.
NOTE: There were 25 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 25 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      


NOTE: There were 175 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 25 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 13 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 13 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 25 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 13 observations read from the data set WORK.TEMPNODES.
NOTE: There were 15 observations read from the data set WORK.OLD_TREE_PLOT.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 39 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.04 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 39 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 39 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 39 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 39 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 25 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

21384      
21385      *------------------------------------------------------------*;
21386      * End REPORT: Tree;
21387      *------------------------------------------------------------*;

21388      /* Reset EM Options */
21389      options formchar="|----|+|---+=|-/\<>*";
21390      options nocenter ls=256 ps=10000;
21391      goptions reset=all device=GIF NODISPLAY;
21392      proc sort data=WORK.EM_USER_REPORT;
21393      by ID VIEW;
21394      run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

21395      proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
21396      by NAME;
21397      run;

NOTE: There were 18 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 18 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

21398      proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
21399      by NAME;
21400      run;

NOTE: There were 18 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 18 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21401      data WORK.ASSESS_META;
21402      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
21403      by NAME;
21404      run;

NOTE: There were 18 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 18 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 18 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

21405      data EM_temp_assessMeta;
21406      set EMWS1.Tree_CMeta_TRAIN;
21407      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
21408      run;

NOTE: There were 12 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

21409      data EM_temp_assessdata;
21410      set EMWS1.Tree_TRAIN(keep=
21411      F_ORGYN
21412      I_ORGYN
21413      P_ORGYN0
21414      P_ORGYN1
21415      Q_ORGYN0
21416      Q_ORGYN1
21417      R_ORGYN0
21418      R_ORGYN1
21419      U_ORGYN
21420      V_ORGYN0
21421      V_ORGYN1
21422      _WARN_
21423      ORGYN
21424      );
21425      run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4000 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 4000 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      
















25703      data EM_temp_assessMeta;
25704      set EMWS1.Tree_CMeta_TRAIN;
25705      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
25706      run;

NOTE: There were 12 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

25707      data EM_temp_assessdata;
25708      set EMWS1.Tree_VALIDATE(keep=
25709      F_ORGYN
25710      I_ORGYN
25711      P_ORGYN0
25712      P_ORGYN1
25713      Q_ORGYN0
25714      Q_ORGYN1
25715      R_ORGYN0
25716      R_ORGYN1
25717      U_ORGYN
25718      V_ORGYN0
25719      V_ORGYN1
25720      _WARN_
25721      ORGYN
25722      );
25723      run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      
NOTE: There were 3000 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 3000 observations read from the data set EMWS1.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 3000 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
















30010      %let _cn = %sysfunc(getoption(CENTER));
30011      options nocenter;
30012      proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
30013      var STAT LABEL TRAIN
30014      VALIDATE
30015      TEST
30016      ;
30017      by TARGET TARGETLABEL;
30018      title9 ' ';
30019      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
30020      run;

NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

30021      title10;
30022      options &_cn;
30023      proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
30024      by DATAROLE TARGET TARGETLABEL;
30025      run;

NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

30026      %let _cn = %sysfunc(getoption(CENTER));
30027      options nocenter;
30028      proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
30029      var from into pct_row pct_col count percent
30030      ;
30031      by DATAROLE TARGET TARGETLABEL;
30032      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
30033      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
30034      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
30035      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
30036      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
30037      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
30038      where _TYPE_='PREDICTION';
30039      title9 ' ';
30040      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
30041      run;

NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

30042      title9;
30043      title10;
30044      options &_cn;
30045      %let _cn = %sysfunc(getoption(CENTER));
30046      options nocenter;
30047      data EMWS1.Tree_EMEVENTREPORT;
30048      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
30049      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
30049    ! FALSEEVENT
30050      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
30051         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
30052      FALSEEVENT=0;
30053      FALSENEVENT=0;
30054      TRUEEVENT=0;
30055      TRUENEVENT=0;
30056      set EMWS1.Tree_EMEVENTREPORT;
30057      run;

NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
      

30058      proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
30059      title9 ' ';
30060      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
30061      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
30062      run;

NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

30063      title10;
30064      options &_cn;
30065      proc datasets library=EMWS1 nolist;
30066      modify Tree_EMRANK;
30067      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
30068      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
30069      run;

NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
30070      quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
      

30071      %let _cn = %sysfunc(getoption(CENTER));
30072      options nocenter;
30073      proc print data=EMWS1.Tree_EMRANK label noobs;
30074      var
30075      decile gain lift liftc resp respc N _meanP_;
30076      by
30077      notsorted DATAROLE
30078      notsorted TARGET
30079      notsorted TARGETLABEL
30080      ;
30081      title9 ' ';
30082      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
30083      run;

NOTE: There were 40 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

30084      title10;
30085      options &_cn;
30086      proc datasets library=EMWS1 nolist;
30087      modify Tree_EMSCOREDIST;
30088      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
30089      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
30090      run;

NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
30091      quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

30915      proc printto;
30916      run;

