*------------------------------------------------------------*
User:                P2503016
Date:                29 November 2021
Time:                16:10:29
Site:                51200470
Platform:            X64_10PRO
Maintenance Release: 9.04.01M7P080520
EM Version:          15.2
* 
*------------------------------------------------------------*
* Training Log
Date:                29 November 2021
Time:                16:10:11
*------------------------------------------------------------*
15240  proc freq data=EMWS1.Tree_VariableSet noprint;
15241  table ROLE*LEVEL/out=WORK.TreeMETA;
15242  run;
 
NOTE: There were 18 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
15243  proc print data=WORK.TreeMETA label noobs;
15244  var ROLE LEVEL COUNT;
15245  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15246  title9 ' ';
15247  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15248  run;
 
NOTE: There were 5 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
15249  title10;
 
15250  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15297  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15298  length ORDER $20;
15299  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15300     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15301  set EMWS1.TREE_ORGYN_DM( where=(_TYPE_="TARGET"));
15302  NumLevels=2;
15303  select(upcase(ORDER));
15304  when('DESC') ORDER = 'Descending';
15305  when('ASC') ORDER = 'Ascending';
15306  when('FMTDESC') ORDER = 'Formatted Descending';
15307  when('FMTASC') ORDER = 'Formatted Ascending';
15308  otherwise ORDER = 'Descending';
15309  end;
15310  output;
15311  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_ORGYN_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
15312  title9 ' ';
15313  proc print data=WORK.Tree_EVENT noobs label;
15314  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15315  title9 ' ';
15316  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15317  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
15318  title10;
 
"No decisions defined for target "ORGYN"."
15319  proc print data = EMWS1.Tree_ORGYN_DM noobs label;
15320  var _type_ variable label;
15321  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15322  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15323  title9 ' ';
15324  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15325  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_ORGYN_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
15326  title10;
 
15327  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15852  *------------------------------------------------------------*;
15853  * Tree: Generation of macros and macro variables;
15854  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15855  *------------------------------------------------------------*;
 
15856  %let EMEXCEPTIONSTRING=;
15857  *------------------------------------------------------------*;
15858  * TRAIN: Tree;
15859  *------------------------------------------------------------*;
15860  %let EM_ACTION = TRAIN;
15861  %let syscc = 0;
15862  %macro main;
15863
15864    %if %upcase(&EM_ACTION) = CREATE %then %do;
15865      filename temp catalog 'sashelp.emmodl.tree_create.source';
15866      %include temp;
15867      filename temp;
15868
15869      %em_tree_create;
15870    %end;
15871
15872     %else
15873     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15874
15875         filename temp catalog 'sashelp.emmodl.tree_train.source';
15876         %include temp;
15877         filename temp;
15878         %em_tree_train;
15879     %end;
15880
15881    %else
15882    %if %upcase(&EM_ACTION) = SCORE %then %do;
15883      filename temp catalog 'sashelp.emmodl.tree_score.source';
15884      %include temp;
15885      filename temp;
15886
15887      %em_tree_score;
15888
15889    %end;
15890
15891    %else
15892    %if %upcase(&EM_ACTION) = REPORT %then %do;
15893
15894         filename temp catalog 'sashelp.emmodl.tree_report.source';
15895         %include temp;
15896         filename temp;
15897
15898         %em_tree_report;
15899     %end;
15900
15901    %else
15902    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15903
15904         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15905         %include temp;
15906         filename temp;
15907         %EM_TREE_OPENTREEVIEWER;
15908
15909     %end;
15910
15911    %else
15912    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15913
15914         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15915         %include temp;
15916         filename temp;
15917         %EM_TREE_CLOSETREEVIEWER;
15918
15919     %end;
15920
15921
15922     %doendm:
15923  %mend main;
15924
15925  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15927 +%macro em_tree_train;
15929 +   %if &EM_IMPORT_DATA eq %then %do;
15930 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15931 +       %put &em_codebar;
15932 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15933 +       %put &errormsg;
15934 +       %put &em_codebar;
15935 +       %goto doendm;
15936 +   %end;
15937 +   %else
15938 +       %let EMEXCEPTIONSTRING =;
15940 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15941 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15942 +        %put &em_codebar;
15943 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15944 +        %put &errormsg;
15945 +        %put &em_codebar;
15946 +        %goto doendm;
15947 +   %end;
15949 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15950 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15951 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15952 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15953 +        %put &em_codebar;
15954 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15955 +        %put &errormsg;
15956 +        %put &em_codebar;
15957 +        %goto doendm;
15958 +   %end;
15960 +   /* Initialize property macro variables */
15961 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15962 +   %include temp;
15963 +   filename temp;
15965 +   %EM_SetProperties;
15967 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15968 +   %EM_GETNAME(key=EMTREE, type=DATA);
15969 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15970 +     /* if import eq Y and no importtable defined, throw an exception */
15971 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15972 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15973 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15974 +         %put &em_codebar;
15975 +         %put &errmsg;
15976 +         %put &em_codebar;
15977 +         %goto doendm;
15978 +      %end;
15979 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15980 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15981 +         %put &em_codebar;
15982 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15983 +         %put &errormsg;
15984 +         %put &em_codebar;
15985 +         %goto doendm;
15986 +      %end;
15987 +      %else %do;
15988 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15989 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15990 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15991 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15992 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15993 +         %let dsid = %sysfunc(close(&dsid));
15994 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15995 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15996 +            %put &em_codebar;
15997 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15998 +            %put &errormsg;
15999 +            %put &em_codebar;
16000 +            %goto doendm;
16001 +         %end;
16002 +      %end;
16003 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
16004 +         proc delete data=&EM_USER_EMTREE;
16005 +         run;
16006 +      %end;
16007 +   %end;
16008 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
16009 +      proc delete data=&EM_USER_EMTREE;
16010 +      run;
16011 +   %end;
16013 +   /* load tree macros */
16014 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16015 +   %include temp;
16016 +   filename temp;
16018 +   /* data sets */
16019 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
16020 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
16021 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
16023 +   /* files */
16024 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
16026 +   /* check actual num of target levels */
16027 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
16028 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16029 +                              nLevel=_nTargetLevel );
16030 +      %if &_nTargetLevel  > 2 %then %do;
16031 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16032 +        %put &em_codebar;
16033 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16034 +        %put &errormsg;
16035 +        %put &em_codebar;
16036 +        %goto doendm;
16037 +      %end;
16038 +   %end;
16040 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16041 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16042 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16043 +        %let costflag=0;
16044 +        data _null_;
16045 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16046 +          if eof then call symput("costflag", _N_);
16047 +        run;
16048 +        %if &costflag gt 0 %then %do;
16049 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16050 +          %put &em_codebar;
16051 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16052 +          %put &errormsg;
16053 +          %put &em_codebar;
16054 +          %goto doendm;
16055 +       %end;
16056 +     %end;
16057 +   %end;
16059 +   /* determine if multiple targets will be processed */
16060 +   %let em_tree_multipleTargets=N;
16061 +   %let em_tree_numTarget = 1;
16062 +   %let em_tree_targetVars=;
16064 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16065 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16066 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16067 +         %let em_tree_multipleTargets=N;
16068 +      %end;
16069 +      %else %do;
16070 +         /* create macro array of targets  */
16071 +         data _null_;
16072 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16073 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16074 +           if eof then
16075 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16076 +        run;
16078 +        %if &em_tree_numTarget gt 1 %then %do;
16079 +           %let em_tree_multipleTargets=Y;
16080 +        %end;
16081 +      %end;
16082 +   %end;
16084 +   /* create view of only necessary variable for performance reasons */
16085 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16086 +   data &tempData / view=&tempData;
16087 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16088 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16089 +       %EM_TARGET
16090 +     %end;
16091 +     %else %do;
16092 +       %if &em_tree_numTarget ne 0 %then %do;
16093 +         %do i=1 %to &em_tree_numTarget;
16094 +            &&em_tree_targetVars&i
16095 +         %end;
16096 +       %end;
16097 +     %end;
16098 +     );
16099 +   run;
16101 +   /* run Tree procedure */
16102 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16104 +   /* Check return code and throw exception if error is detected */
16105 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16106 +   %if &syserr %then %do;
16107 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16108 +     %goto doendm;
16109 +   %end;
16111 +   /* add decision score code if multiple targets are processed */
16112 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16113 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16114 +   %end;
16116 +   /* create outfit dataset if multiple score statements have been executed */
16117 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16119 +   /* create English Rules */
16120 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16121 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16122 +       %em_tree_makeEnglishRules;
16124 +       /* English Rules */
16125 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16127 +     %end;
16128 +   filename x;
16130 +   %doendm:
16131 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16132 +%macro EM_SetProperties;
16134 +   /* train properties */
16135 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16148 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16149 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16150 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16153 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16154 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16155 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16163 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16165 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16166 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16167 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16168 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16169 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16170 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16171 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16172 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16173 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16174 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16175 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16177 +   /* properties for interactive sample */
16178 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16179 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16180 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16181 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16183 +   /* report properties */
16184 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16185 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16186 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16187 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16188 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16189 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16190 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16191 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16192 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16193 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16194 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16195 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16196 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16198 +   /* score properties */
16199 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16200 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16202 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16204 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16205 +  %global &nLevel;
16206 +  proc dmdb batch data=&indata
16207 +    classout=_tmp_dmdbout;
16208 +    class &target;
16209 +  run;
16210 +  data _tmp_dmdbout;
16211 +    set _tmp_dmdbout;
16212 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16213 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16214 +  run;
16215 +  data _null_;
16216 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16217 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16218 +    %let dsid = %sysfunc(close(&dsid));
16219 +     call symput("&nLevel", put(&_obs, Best12.));
16220 +  run;
16222 +  proc datasets lib=work nolist;
16223 +     delete _tmp_dmdbout;
16224 +  run;
16225 +  quit;
16226 +%Mend EM_CheckBinaryTargetLevel;
16229 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16231 +  /* determine the number of obs in training data */
16232 +  proc sql;
16233 +    reset noprint;
16234 +    select count(*) into :em_nobs from &indata;
16235 +  quit;
16237 +  /* determine the number of input variables */
16238 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16239 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16241 +  /* retrieve targetEvent from decmeta */
16242 +  %let targetEvent=;
16243 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16244 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16245 +      data _null_;
16246 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16247 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16248 +      run;
16249 +    %end;
16250 +  %end;
16252 +  /* create targetTable if multipleTar eq Y */
16253 +  data temptarget;
16254 +    set &EM_DATA_VARIABLESET;
16255 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16256 +  run;
16258 + /* data sets */
16259 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16260 + %EM_GETNAME(key=EMTREE,        type=DATA);
16261 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16262 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16263 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16264 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16265 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16266 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16267 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16268 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16270 + /* files */
16271 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16272 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16274 + /* turn on pmml if requested */
16275 + %let nnpmml=0;
16276 + %if %symexist(EM_PMML) %then %do;
16277 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16278 +       %let nnpmml=1;
16280 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16281 +   %end;
16282 +%end;
16284 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16286 +%if &nnpmml or &numClassTarget %then %do;
16288 +    /* create dmdb needed for pmml generation */
16289 +    %let tree_maxlevel = 512;
16290 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16291 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16292 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16293 +      %end;
16294 +    %end;
16295 +    %if &tree_maxlevel gt 0 %then %do;
16296 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16297 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16298 +    %end;
16300 +    %let targetOrderString =;
16301 +    %let targetString = ;
16302 +    data _null_;
16303 +       length orderString nameString $10000;
16304 +       retain orderString nameString;
16305 +       set &em_data_variableset end=eof;
16306 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16307 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16308 +       %end;
16309 +       %else %do;
16310 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16311 +       %end;          select(order);
16312 +         when('')        order ='DESC';
16313 +         when('FMTASC')  order='ASCFMT';
16314 +         when('FMTDESC') order='DESFMT';
16315 +         otherwise;
16316 +       end;
16317 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16318 +       nameString = trim(nameString)!!' '!!trim(NAME);
16320 +       if eof then do;
16321 +          call symput('targetOrderString', trim(orderString));
16322 +          call symput('targetString', trim(nameString));
16323 +       end;
16324 +    run;
16326 +    %let arborkluge= "work._treeDMDB";
16328 +    proc dmdb batch data=&indata
16329 +    %if &nnpmml %then %do;
16330 +        PMML
16331 +    %end;
16332 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16334 +      %if &nnpmml %then %do;
16335 +           %if "%EM_ID" ne "" %then %do;
16336 +             id %EM_ID;
16337 +           %end;
16338 +           %if &EM_NUM_CLASS gt 0 %then %do;
16339 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16340 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16341 +                  &targetOrderString;
16342 +           %end;
16343 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16344 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16345 +           %end;
16346 +           target &targetString %EM_INTERVAL_TARGET;
16347 +           %if "%EM_FREQ" ne "" %then %do;
16348 +             freq %EM_FREQ;
16349 +           %end;
16350 +      %end;
16351 +      %else %do;
16352 +         class  &targetOrderString;
16353 +         target &targetString %EM_INTERVAL_TARGET;
16354 +      %end;
16355 +    run;
16356 +    quit;
16358 +    proc datasets lib=work nolist;
16359 +       delete classout varout;
16360 +    run;
16361 +    quit;
16363 + %end;
16366 + /* run Arbor procedure */
16367 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16368 +  proc arbor data=&INDATA
16370 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16371 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16372 +  %end;
16374 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16375 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16376 +  %end;
16378 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16379 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16380 +  %end;
16382 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16383 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16384 +  %end;
16386 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16387 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16388 +  %end;
16390 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16391 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16392 +  %end;
16393 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16394 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16395 +  %end;
16396 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16397 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16398 +  %end;
16400 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16401 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16402 +      alpha = &EM_PROPERTY_SIGLEVEL
16403 +    %end;
16404 +  %end;
16406 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16407 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16408 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16409 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16410 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16412 +        padjust =
16413 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16414 +          &chaid
16415 +        %end;
16416 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16417 +          DEPTH
16418 +        %end;
16419 +      %end;
16420 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16421 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16422 +         pvars = &num_inputs
16423 +      %end;
16424 +    %end;
16425 +  %end;
16426 +  %else %do;
16427 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16428 +         padjust = NONE
16429 +      %end;
16430 +  %end;
16432 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16433 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16434 +    Maxrules = &num_nrules
16435 +  %end;
16437 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16438 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16439 +    Maxsurrs = &num_nsurrs
16440 +  %end;
16442 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16443 +     Missing=&EM_PROPERTY_MISSINGVALUE
16444 +  %end;
16446 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16447 +     USEVARONCE
16448 +  %end;
16450 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16451 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16452 +  %end;
16455 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16456 +    event = "&targetEvent"
16457 +  %end;
16459 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16460 +     DECSEARCH
16461 +  %end;
16463 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16464 +     PRIORSSEARCH
16465 +  %end;
16467 +  %if &arbor_1 ne %then %do;
16468 +    &arbor_1
16469 +  %end;
16471 +  %if &em_arbor ne %then %do;
16472 +     &em_arbor
16473 +  %end;
16474 +  ;
16475 + %end;
16476 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16477 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16478 +       Performance &EM_PROPERTY_PERFORMANCE
16479 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16480 +         nodesize=&EM_PROPERTY_NODESAMPLE
16481 +       %end;
16482 +       ;
16483 +       interact;
16484 + %end;
16485 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16486 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16487 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16488 +    %put &em_codebar;
16489 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16490 +    %put &errormsg;
16491 +    %put &em_codebar;
16492 +    %goto doendm;
16493 +   %end;
16494 +   %else %do;
16495 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16496 +       Performance &EM_PROPERTY_PERFORMANCE
16497 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16498 +         nodesize=&EM_PROPERTY_NODESAMPLE
16499 +       %end;
16500 +       ;
16501 +       interact;
16502 +   %end;
16503 + %end;
16505 + %else %do;
16506 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16507 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16508 +    %put &em_codebar;
16509 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16510 +    %put &errormsg;
16511 +    %put &em_codebar;
16512 +    %goto doendm;
16513 +   %end;
16514 +   %else %do;
16515 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16516 +       Performance &EM_PROPERTY_PERFORMANCE
16517 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16518 +         nodesize=&EM_PROPERTY_NODESAMPLE
16519 +       %end;
16520 +       ;
16521 +        interact;
16522 +   %end;
16523 + %end;
16525 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16526 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16527 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16528 +    %end;
16530 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16531 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16532 +    %end;
16534 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16535 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16536 +    %end;
16538 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16539 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16540 +    %end;
16542 +    %if "%EM_FREQ" ne "" %then %do;
16543 +       freq %EM_FREQ;
16544 +    %end;
16546 +    %if "&multipleTar" eq "Y" %then %do;
16547 +       /* cycle through all target vars in variableset */
16548 +       %let tdsid = %sysfunc(open(temptarget));
16549 +       %if &tdsid %then %do;
16550 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16551 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16552 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16553 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16554 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16555 +             target &var / level = &lvl
16556 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16557 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16558 +             %end;
16559 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16560 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16561 +             %end;
16562 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16563 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16564 +             %end;
16565 +          %end;
16566 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16567 +       %end;
16568 +       useTarget variable = %EM_TARGET;
16569 +    %end;
16570 +    %else %do;
16571 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16572 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16573 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16574 +      %end;
16575 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16576 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16577 +      %end;
16578 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16579 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16580 +      %end;
16581 +    %end;
16583 +    %if "&multipleTar" eq "N" %then %do;
16584 +      &EM_DEC_STATEMENT;
16585 +    %end;
16587 +    Performance &EM_PROPERTY_PERFORMANCE
16588 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16589 +      nodesize=&EM_PROPERTY_NODESAMPLE
16590 +    %end;
16591 +    ;
16593 +    %if "&intFlag" eq "Y" %then %do;
16594 +       INTERACT Largest;
16595 +       Train maxnewdepth=0;
16596 +    %end;
16598 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16599 +         Assess
16600 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16601 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16602 +              %put &em_codebar;
16603 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16604 +              %put &errormsg;
16605 +              %put &em_codebar;
16606 +            %end;
16607 +            %else %do;
16608 +               Validata=&EM_IMPORT_VALIDATE
16609 +            %end;
16610 +         %end;
16611 +         %else %do;
16612 +           NoValidata
16613 +         %end;
16614 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16615 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16616 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16617 +               %if &dsid %then %do;
16618 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16619 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16620 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16621 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16622 +                   %else %do;
16623 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16624 +                      %else %let measure= MISC;
16625 +                   %end;
16626 +                 %end;
16627 +               %end;
16628 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16629 +            %end;
16630 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16631 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16632 +                 %let measure=ASE;
16633 +              %end;
16634 +              %else %do;
16635 +                 %let measure=MISC;
16636 +              %end;
16637 +            %end;
16638 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16639 +              %let measure=ASE;
16640 +            %end;
16641 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16642 +               %let measure = LIFT;
16643 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16644 +               %if &dsid %then %do;
16645 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16646 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16647 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16648 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16649 +                 %end;
16650 +               %end;
16651 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16652 +            %end;
16653 +            measure=&measure
16654 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16655 +               event = "&targetEvent"
16656 +            %end;
16657 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16658 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16659 +            %end;
16660 +         %end;
16661 +         %if "&multipleTar" eq "N" %then %do;
16662 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16663 +               CV
16664 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16665 +                 CVNITer = &EM_PROPERTY_CVNITER
16666 +               %end;
16667 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16668 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16669 +               %end;
16670 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16671 +                 CVSeed = &EM_PROPERTY_CVSEED
16672 +               %end;
16673 +            %end;
16674 +         %end;
16675 +       %end;
16676 +      ;
16678 +      %if "&intFlag" ne "Y" %then %do;
16679 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16680 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16681 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16682 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16684 +          SUBTREE &subtree
16685 +          %if "&subtree" eq "NLEAVES" %then %do;
16686 +            =&EM_PROPERTY_NSUBTREE
16687 +          %end;
16688 +          ;
16689 +        %end;
16691 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16692 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16693 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16694 +          %end;
16695 +       %end;
16696 +      %end;
16697 + %end;
16700 + MakeMacro nleaves = nleaves;
16701 + save
16702 + %if "&EM_USER_EMTREE" ne "" %then %do;
16703 +   MODEL=&EM_USER_EMTREE
16704 + %end;
16705 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16706 +   SEQUENCE=&EM_USER_OUTSEQ
16707 + %end;
16708 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16709 +   IMPORTANCE=&EM_USER_OUTIMPORT
16710 + %end;
16711 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16712 +   NODESTAT=&EM_USER_OUTNODES
16713 + %end;
16714 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16715 +   SUMMARY=&EM_USER_OUTSUMMARY
16716 + %end;
16717 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16718 +   STATSBYNODE=&EM_USER_OUTSTATS
16719 + %end;
16720 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16721 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16722 + %end;
16723 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16724 +   Pathlistnonmissing=&EM_USER_OUTPATH
16725 + %end;
16726 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16727 +   RULES = &EM_USER_OUTRULES
16728 + %end;
16729 + ;
16731 + %if "&intFlag" ne "Y" %then %do;
16733 +   %let lookupString = ;
16734 +   %if ^%symexist(EM_OPTION) %then
16735 +      %let EM_OPTION=;
16737 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16738 +      %let lookupString = LOOKUP=SELECT;
16739 +   %end;
16741 +   %let codetext=;
16742 +   %let norescodetxt=;
16744 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16745 +     %let codetext=&codetext DUMMY;
16746 +     %let norescodetxt=&norescodetxt DUMMY;
16747 +   %end;
16748 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16749 +     %let codetext=&codetext NOLEAFID;
16750 +     %let norescodetxt=&norescodetxt NOLEAFID;
16751 +   %end;
16752 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16753 +     %let norescodetxt=&norescodetxt NOPRED;
16754 +   %end;
16756 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16757 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16759 +   %if &nnpmml %then %do;
16760 +     code pmml;
16761 +   %end;
16763 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16764 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16765 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16766 +   %end;
16767 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16768 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16769 +   %end;
16770 + %end;
16772 + run;
16773 + quit;
16775 + /*%em_checkerror(); */
16776 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16777 +   /* Delete DMDB catalog */
16778 +   proc datasets lib=work nolist;
16779 +       delete _treeDMDB / mt=cat;
16780 +  run;
16781 +  %end;
16783 + %if &nnpmml %then %do;
16784 +    ods pmml close;
16785 + %end;
16787 +  %doendm:
16789 +%mend em_tree_runTreeProcedure;
16791 +%macro em_tree_createFitStats( multipleTar= );
16794 +  /* create targetTable is multipleTar eq Y */
16795 +  data temptarget;
16796 +    set &EM_DATA_VARIABLESET;
16797 +    where ROLE="TARGET";
16798 +  run;
16800 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16801 +   data &EM_USER_EMOUTFIT;
16802 +     length target $32;
16803 +     merge work.fit_train
16804 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16805 +       work.fit_valid
16806 +     %end;
16807 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16808 +       work.fit_test
16809 +     %end;
16810 +     ;
16811 +     %if "&multipleTar" eq "N" %then %do;
16812 +       target="%EM_TARGET";
16813 +     %end;
16814 +     %else %do;
16815 +       target = _TARGET_;
16816 +     %end;
16817 +     drop _NW_ _SUMW_
16818 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16819 +        _VSUMW_
16820 +     %end;
16821 +     ;
16822 +   run;
16824 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16825 +     proc datasets library=work nolist;
16826 +       delete fit_valid;
16827 +     run;
16828 +   %end;
16829 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16830 +     proc datasets library=work nolist;
16831 +       delete fit_test;
16832 +     run;
16833 +   %end;
16835 +%mend em_tree_createFitStats;
16838 +%macro em_tree_makeEnglishRules;
16840 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16841 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16843 +  /* verify that necessary tables exist and if not, skip processing */
16844 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16845 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16846 +    %goto doendm;
16847 +  %end;
16848 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16849 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16850 +    %goto doendm;
16851 +  %end;
16853 +  /* determine length of variable in outpath dataset */
16854 +  %let vlength= ;
16855 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16856 +  %if &dsid ne %then %do;
16857 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16858 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16859 +  %end;
16860 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16862 +  data tempoutpath;
16863 +    length varname $&vlength;
16864 +    retain varname;
16865 +    set &EM_USER_OUTPATH;
16867 +    if ^missing(variable) then varname=variable;
16868 +    else if ^missing(var_name) then varname=var_name;
16869 +    output;
16870 +  run;
16872 +  /* create an array of generated predicted variable names */
16873 +  %let tree_pred_vars = ;
16874 +  %let tree_pred_label = ;
16875 +  %let numpred= 0;
16876 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16878 +    data _null_;
16879 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16880 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16881 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16882 +     if eof then
16883 +       call symput('numpred', strip(put(_N_, BEST.)));
16884 +    run;
16885 +  %end;
16887 +  /* determine if NPRIORS exists in outnodes  */
16888 +  %local nprior_flag;
16889 +  data _null_;
16890 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16891 +    if eof then do;
16892 +      call symput('nprior_flag', strip(put(npriors, best.)));
16893 +    end;
16894 +  run;
16896 +  proc sort data=tempoutpath; by node; run;
16897 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16899 +  data tempoutpath;
16900 +    merge tempoutpath(in=_a) outnodes(keep= node
16901 +    %if "&nprior_flag" ne "." %then %do;
16902 +      NPRIORS
16903 +    %end;
16904 +    %else %do;
16905 +      N
16906 +    %end;
16907 +    %if &numpred gt 0 %then %do;
16908 +      %do i=1 %to &numpred;
16909 +        &&tree_pred_vars&i
16910 +      %end;
16911 +    %end;
16912 +    );
16913 +    by node;
16914 +    if _a;
16915 +  run;
16917 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16919 +  data _null_;
16920 +    file x;
16921 +    set tempoutpath;
16922 +    by node descending varname;
16923 +    retain origvar oldnode string;
16924 +    length origvar $32 oldnode 8 string $5000;
16926 +    if _N_ = 1 then do;
16927 +      origvar = varname;
16928 +      oldnode = node;
16929 +    end;
16931 +    if first.node then do;
16932 +       put "&EM_CODEBAR";
16933 +       put " Node = " node;
16934 +       put "&EM_CODEBAR";
16935 +    end;
16937 +      if first.varname then do;
16938 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16939 +            if MISSING(CHARACTER_VALUE) then do;
16940 +             if NUMERIC_VALUE ne .  then do;
16941 +              if ^first.node then do;
16942 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16943 +              end;
16944 +              else do;
16945 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16946 +              end;
16947 +             end;
16948 +            end;
16949 +            else do;
16950 +              if ^first.node then do;
16951 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16952 +              end;
16953 +              else do;
16954 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16955 +              end;
16956 +             end;
16957 +         end;
16958 +         else if RELATION in ("=") then do;
16959 +            if ^first.node then do;
16960 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16961 +            end;
16962 +            else do;
16963 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16964 +            end;
16965 +         end;
16966 +         else if RELATION in ("ISMISSING") then do;
16967 +            if ^first.node then do;
16968 +              string = " AND "|| strip(varname) || " equals Missing";
16969 +            end;
16970 +            else do;
16971 +              string = "if "|| strip(varname) ||" equals Missing";
16972 +            end;
16973 +         end;
16974 +         else if RELATION in ("ISNOTMISSING") then do;
16975 +            if ^first.node then do;
16976 +              string = " AND "|| strip(varname) || " equals All Values";
16977 +            end;
16978 +            else do;
16979 +              string = "if "|| strip(varname) ||" equals All Values";
16980 +            end;
16981 +         end;
16982 +         if ^missing(varname) then origvar = varname;
16983 +         oldnode=node;
16985 +      end;
16986 +      else do;
16987 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16988 +          if MISSING(CHARACTER_VALUE) then do;
16989 +           if  NUMERIC_VALUE ne .  then do;
16990 +            if ^MISSING(string) then
16991 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16992 +            else
16993 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16994 +           end;
16995 +          end;
16996 +          else do;
16997 +            if ^MISSING(string) then
16998 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16999 +            else
17000 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17001 +          end;
17003 +         end;
17004 +         else if RELATION in ("=") then do;
17005 +           string = strip(string)||", "||strip(character_value);
17006 +         end;
17007 +         else if RELATION in ("ISMISSING") then do;
17009 +         end;
17010 +         if ^missing(varname) then origvar = varname;
17011 +         oldnode=node;
17012 +      end;
17013 +      if last.varname then do;
17014 +         if RELATION in ("ISMISSING") then do;
17015 +           if ^first.varname then do;
17016 +             string = strip(string) || " or MISSING";
17017 +           end;
17018 +         end;
17019 +         put string;
17020 +         if ^missing(varname) then origvar = varname;
17021 +         oldnode=node;
17022 +      end;
17024 +      if last.node then do;
17025 +         put "then ";
17026 +         put " Tree Node Identifier   = " node;
17028 +         %if "&nprior_flag" ne "." %then %do;
17029 +           put " Number of Observations = " NPRIORS;
17030 +         %end;
17031 +         %else %do;
17032 +           put " Number of Observations = " N;
17033 +         %end;
17035 +         %if &numpred gt 0 %then %do;
17036 +           %do i=1 %to &numpred;
17037 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17038 +           %end;
17039 +         %end;
17041 +         put " ";
17042 +         if ^missing(varname) then origvar = varname;
17043 +         oldnode=node;
17044 +      end;
17046 +  run;
17048 +  proc datasets lib=work nolist;
17049 +    delete tempoutpath outnodes;
17050 +  run;
17052 +  %doendm:
17053 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 4000   Memory used = 511K.
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_ORGYN_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 4000   Memory used = 511K.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4000 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: 1596456 kilobytes of physical memory.
NOTE: Will use 4000 out of 4000 training cases.
NOTE: Using memory pool with 152157184 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 1516696 bytes of work memory.
NOTE: The subtree sequence contains 19 subtrees. The largest has 37 nodes and 19 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Using subtree with 15 nodes and 8 leaves.
NOTE: Created macro variable NLEAVES equal to 8.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 14 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 1125 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 15 observations and 24 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 50 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 251 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 19 observations and 20 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 105 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 15 observations and 5 variables.
NOTE: External file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
 
 
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           1.02 seconds
      cpu time            0.32 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4000 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.04 seconds
      cpu time            0.32 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 50 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_ORGYN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 50 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 15 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 50 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 50 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=29 November 2021 16:10:17,
      Create Time=29 November 2021 16:10:17
 
NOTE: 93 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 50 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
17055
17056  *------------------------------------------------------------*;
17057  * End TRAIN: Tree;
17058  *------------------------------------------------------------*;
 
17059  *------------------------------------------------------------*;
17060  * Close any missing semi colons;
17061  *------------------------------------------------------------*;
17062  ;
17063  ;
17064  ;
17065  ;
17066  quit;
17067  *------------------------------------------------------------*;
17068  * Close any unbalanced quotes;
17069  *------------------------------------------------------------*;
17070  /*; *"; *'; */
17071  ;
17072  run;
17073  quit;
17074  /* Reset EM Options */
17075  options formchar="|----|+|---+=|-/\<>*";
17076  options nocenter ls=256 ps=10000;
17077  goptions reset=all device=GIF NODISPLAY;
 
17078  proc sort data=WORK.EM_USER_REPORT;
17079  by ID VIEW;
17080  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                29 November 2021
Time:                16:10:18
*------------------------------------------------------------*
17182  %let EMEXCEPTIONSTRING=;
17183  *------------------------------------------------------------*;
17184  * SCORE: Tree;
17185  *------------------------------------------------------------*;
17186  %let EM_ACTION = SCORE;
17187  %let syscc = 0;
17188  %macro main;
17189
17190    %if %upcase(&EM_ACTION) = CREATE %then %do;
17191      filename temp catalog 'sashelp.emmodl.tree_create.source';
17192      %include temp;
17193      filename temp;
17194
17195      %em_tree_create;
17196    %end;
17197
17198     %else
17199     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17200
17201         filename temp catalog 'sashelp.emmodl.tree_train.source';
17202         %include temp;
17203         filename temp;
17204         %em_tree_train;
17205     %end;
17206
17207    %else
17208    %if %upcase(&EM_ACTION) = SCORE %then %do;
17209      filename temp catalog 'sashelp.emmodl.tree_score.source';
17210      %include temp;
17211      filename temp;
17212
17213      %em_tree_score;
17214
17215    %end;
17216
17217    %else
17218    %if %upcase(&EM_ACTION) = REPORT %then %do;
17219
17220         filename temp catalog 'sashelp.emmodl.tree_report.source';
17221         %include temp;
17222         filename temp;
17223
17224         %em_tree_report;
17225     %end;
17226
17227    %else
17228    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17229
17230         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17231         %include temp;
17232         filename temp;
17233         %EM_TREE_OPENTREEVIEWER;
17234
17235     %end;
17236
17237    %else
17238    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17239
17240         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17241         %include temp;
17242         filename temp;
17243         %EM_TREE_CLOSETREEVIEWER;
17244
17245     %end;
17246
17247
17248     %doendm:
17249  %mend main;
17250
17251  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17253 +%macro em_tree_score;
17255 +   /* determine if multiple targets will be processed */
17256 +   %let em_tree_multipleTargets=N;
17257 +   %let em_tree_numTarget=1;
17258 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17259 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17260 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17261 +         %let em_tree_multipleTargets=N;
17262 +      %end;
17263 +      %else %do;
17264 +         /* create macro array of targets  */
17265 +         data _null_;
17266 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17267 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17268 +           if eof then
17269 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17270 +        run;
17272 +        %if &em_tree_numTarget gt 1 %then %do;
17273 +           %let em_tree_multipleTargets=Y;
17274 +        %end;
17275 +      %end;
17276 +   %end;
17278 +   /* build flow and publish scoring code */
17279 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17280 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17282 +   filename treeflow "&EM_USER_TREEFLOW";
17283 +   filename treepub "&EM_USER_TREEPUBLISH";
17285 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17286 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17288 +   %em_copyfile(infref=treeflow, outfref=flowref);
17289 +   %em_copyfile(infref=treepub, outfref=pubref);
17291 +   filename treeflow;
17292 +   filename treepub;
17294 +   /* if priors are used, add code to generate unadjusted residuals in export */
17295 +   %let useAdjPriors = N;
17296 +   data _null_;
17297 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17298 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17299 +   run;
17300 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17301 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17302 +      %include temp;
17303 +      filename temp;
17305 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17306 +      filename adjref "&EM_USER_adjResidualCode";
17307 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17309 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17311 +      filename adjref;
17312 +   %end;
17314 +   /* LEAF */
17315 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17316 +      data _null_;
17317 +        file flowref mod;
17318 +        put 'drop _LEAF_;';
17319 +      run;
17321 +      data _null_;
17322 +        file pubref mod;
17323 +        put 'drop _LEAF_;';
17324 +      run;
17326 +   %end;
17328 +   filename flowref;
17329 +   filename pubref;
17331 +   /* em_metachange code */
17332 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17333 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17334 +   %end;
17336 +   /* variable selection based on importance stat    */
17337 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17338 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17339 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17340 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17341 +     %let obs = %sysfunc(fetch(&dsid));
17342 +     %do %while(&obs=0);
17343 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17344 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17345 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17346 +       %let obs = %sysfunc(fetch(&dsid));
17347 +     %end;
17348 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17349 +   %end;
17351 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17352 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17353 +    %let tree_pred_vars = ;
17354 +    %let tree_pred_lvl =;
17355 +    %let numpred= 0;
17357 +    data _null_;
17358 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17359 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17360 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17361 +     if eof then
17362 +       call symput('numpred', strip(put(_N_, BEST.)));
17363 +    run;
17364 +   %end;
17366 +   %if &numpred ne 0 %then %do;
17367 +    %do i=1 %to &numpred;
17368 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17369 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17370 +    %end;
17371 +   %end;
17373 +   /* determine if multiple targets will be processed */
17374 +   %let em_tree_multipleTargets=N;
17375 +   %let em_tree_numTarget=1;
17376 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17377 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17378 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17379 +         %let em_tree_multipleTargets=N;
17380 +      %end;
17381 +      %else %do;
17382 +        data _null_;
17383 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17384 +          if eof then
17385 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17386 +        run;
17388 +        %if &em_tree_numTarget gt 1 %then %do;
17389 +           %let em_tree_multipleTargets=Y;
17390 +        %end;
17391 +     %end;
17392 +   %end;
17394 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17395 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17397 +      /* variable importance */
17398 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17399 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17401 +         %let validexist=0;
17402 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17403 +           %let validexist=1;
17404 +         %end;
17406 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17407 +         /* and the columns may not be generated                                                                                 */
17408 +         %let em_tree_cvexists=;
17409 +         %let em_tree_surrexists=.;
17410 +         data _null_;
17411 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17412 +            if eof then do ;
17413 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17414 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17415 +            end;
17416 +         run;
17418 +         data &EM_USER_OUTIMPORT;
17419 +            set &EM_USER_OUTIMPORT;
17421 +            /* format columns based on Precison value specified */
17422 +            format importance 15.&EM_PROPERTY_PRECISION
17423 +                 %if &validexist %then %do;
17424 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17425 +                 %end;
17426 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17427 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17428 +                 %end;
17429 +            ;
17430 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17431 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17432 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17433 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17434 +                 %if "&em_tree_surrexists" ne "" %then %do;
17435 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17436 +                 %end;
17437 +                 %if &validexist %then %do;
17438 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17439 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17440 +                 %end;
17441 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17442 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17443 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17444 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17445 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17446 +                 %end;
17447 +            ;
17448 +         run;
17450 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17451 +      %end;
17452 +   %end;
17454 +   %doendm:
17455 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=29 November 2021 16:10:18,
      Create Time=29 November 2021 16:10:18
 
NOTE: 174 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=29 November 2021 16:10:18,
      Create Time=29 November 2021 16:10:18
 
NOTE: 152 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_ORGYN_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5918,
      Last Modified=29 November 2021 16:10:18,
      Create Time=29 November 2021 16:10:18
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5333,
      Last Modified=29 November 2021 16:10:18,
      Create Time=29 November 2021 16:10:18
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_ORGYN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 14 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.19 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
17456
17457  *------------------------------------------------------------*;
17458  * End SCORE: Tree;
17459  *------------------------------------------------------------*;
 
17460  proc sort data=WORK.EM_METACHANGE;
17461  by key uname;
17462  run;
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17463  filename x "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
17464  data _null_;
17465  file x;
17466  put 'if upcase(NAME) = "BILL" then do;';
17467  put 'ROLE = "REJECTED";';
17468  put 'end;';
17469  put 'else ';
17470  put 'if upcase(NAME) = "CLASS" then do;';
17471  put 'ROLE = "REJECTED";';
17472  put 'end;';
17473  put 'else ';
17474  put 'if upcase(NAME) = "LTIME" then do;';
17475  put 'ROLE = "REJECTED";';
17476  put 'end;';
17477  put 'else ';
17478  put 'if upcase(NAME) = "NGROUP" then do;';
17479  put 'ROLE = "REJECTED";';
17480  put 'end;';
17481  put 'else ';
17482  put 'if upcase(NAME) = "OAC" then do;';
17483  put 'ROLE = "REJECTED";';
17484  put 'end;';
17485  put 'else ';
17486  put 'if upcase(NAME) = "Q_ORGYN0" then do;';
17487  put 'ROLE = "ASSESS";';
17488  put 'end;';
17489  put 'else ';
17490  put 'if upcase(NAME) = "Q_ORGYN1" then do;';
17491  put 'ROLE = "ASSESS";';
17492  put 'end;';
17493  put 'else ';
17494  put 'if upcase(NAME) = "REGION" then do;';
17495  put 'ROLE = "REJECTED";';
17496  put 'end;';
17497  put 'else ';
17498  put 'if upcase(NAME) = "S_CONV" then do;';
17499  put 'ROLE = "REJECTED";';
17500  put 'end;';
17501  put 'else ';
17502  put 'if upcase(NAME) = "S_FVEG" then do;';
17503  put 'ROLE = "REJECTED";';
17504  put 'end;';
17505  put 'else ';
17506  put 'if upcase(NAME) = "S_MT" then do;';
17507  put 'ROLE = "REJECTED";';
17508  put 'end;';
17509  put 'else ';
17510  put 'if upcase(NAME) = "S_TOIL" then do;';
17511  put 'ROLE = "REJECTED";';
17512  put 'end;';
17513  put 'else ';
17514  put 'if upcase(NAME) = "TV_REG" then do;';
17515  put 'ROLE = "REJECTED";';
17516  put 'end;';
17517  put 'else ';
17518  put 'if upcase(NAME) = "_NODE_" then do;';
17519  put 'ROLE = "SEGMENT";';
17520  put 'LEVEL = "NOMINAL";';
17521  put 'end;';
17522  run;
 
NOTE: The file X is:
      Filename=H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=29 November 2021 16:10:19,
      Create Time=19 November 2021 12:40:51
 
NOTE: 56 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 37.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17523  filename x;
NOTE: Fileref X has been deassigned.
 
17524  filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17525  *------------------------------------------------------------*;
17526  * Tree: Scoring DATA data;
17527  *------------------------------------------------------------*;
17528  data EMWS1.Tree_TRAIN
17529  / view=EMWS1.Tree_TRAIN
17530  ;
17531  set EMWS1.Part_TRAIN
17532  ;
17533  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17534 +****************************************************************;
17535 +******             DECISION TREE SCORING CODE             ******;
17536 +****************************************************************;
17537 +
17538 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17539 +LENGTH F_ORGYN  $   12;
17540 +LENGTH I_ORGYN  $   12;
17541 +LENGTH _WARN_  $    4;
17542 +
17543 +******              LABELS FOR NEW VARIABLES              ******;
17544 +label _NODE_ = 'Node' ;
17545 +label _LEAF_ = 'Leaf' ;
17546 +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
17547 +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
17548 +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
17549 +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
17550 +label V_ORGYN1 = 'Validated: ORGYN=1' ;
17551 +label V_ORGYN0 = 'Validated: ORGYN=0' ;
17552 +label R_ORGYN1 = 'Residual: ORGYN=1' ;
17553 +label R_ORGYN0 = 'Residual: ORGYN=0' ;
17554 +label F_ORGYN = 'From: ORGYN' ;
17555 +label I_ORGYN = 'Into: ORGYN' ;
17556 +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
17557 +label _WARN_ = 'Warnings' ;
17558 +
17559 +
17560 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17561 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17562 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17563 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17564 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17565 +
17566 +
17567 +_ARBFMT_12 = PUT( ORGYN , BEST12.);
17568 + %DMNORMCP( _ARBFMT_12, F_ORGYN );
17569 +
17570 +******             ASSIGN OBSERVATION TO NODE             ******;
17571 +IF  NOT MISSING(AGE ) AND
17572 +  AGE  <                 44.5 THEN DO;
17573 +  IF  NOT MISSING(AFFL ) AND
17574 +    AFFL  <                 10.5 THEN DO;
17575 +    _ARBFMT_1 = PUT( GENDER , $1.);
17576 +     %DMNORMIP( _ARBFMT_1);
17577 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17578 +      IF  NOT MISSING(AFFL ) AND
17579 +        AFFL  <                  5.5 THEN DO;
17580 +        _NODE_  =                   16;
17581 +        _LEAF_  =                    1;
17582 +        P_ORGYN1  =             0.265625;
17583 +        P_ORGYN0  =             0.734375;
17584 +        Q_ORGYN1  =             0.265625;
17585 +        Q_ORGYN0  =             0.734375;
17586 +        V_ORGYN1  =     0.31914893617021;
17587 +        V_ORGYN0  =     0.68085106382978;
17588 +        I_ORGYN  = '0' ;
17589 +        U_ORGYN  =                    0;
17590 +        END;
17591 +      ELSE DO;
17592 +        _NODE_  =                   17;
17593 +        _LEAF_  =                    2;
17594 +        P_ORGYN1  =     0.54601226993865;
17595 +        P_ORGYN0  =     0.45398773006134;
17596 +        Q_ORGYN1  =     0.54601226993865;
17597 +        Q_ORGYN0  =     0.45398773006134;
17598 +        V_ORGYN1  =     0.60829493087557;
17599 +        V_ORGYN0  =     0.39170506912442;
17600 +        I_ORGYN  = '1' ;
17601 +        U_ORGYN  =                    1;
17602 +        END;
17603 +      END;
17604 +    ELSE DO;
17605 +      _NODE_  =                    9;
17606 +      _LEAF_  =                    3;
17607 +      P_ORGYN1  =     0.21186440677966;
17608 +      P_ORGYN0  =     0.78813559322033;
17609 +      Q_ORGYN1  =     0.21186440677966;
17610 +      Q_ORGYN0  =     0.78813559322033;
17611 +      V_ORGYN1  =     0.22110552763819;
17612 +      V_ORGYN0  =      0.7788944723618;
17613 +      I_ORGYN  = '0' ;
17614 +      U_ORGYN  =                    0;
17615 +      END;
17616 +    END;
17617 +  ELSE DO;
17618 +    _NODE_  =                    5;
17619 +    _LEAF_  =                    4;
17620 +    P_ORGYN1  =     0.72849462365591;
17621 +    P_ORGYN0  =     0.27150537634408;
17622 +    Q_ORGYN1  =     0.72849462365591;
17623 +    Q_ORGYN0  =     0.27150537634408;
17624 +    V_ORGYN1  =     0.75686274509803;
17625 +    V_ORGYN0  =     0.24313725490196;
17626 +    I_ORGYN  = '1' ;
17627 +    U_ORGYN  =                    1;
17628 +    END;
17629 +  END;
17630 +ELSE DO;
17631 +  IF  NOT MISSING(AFFL ) AND
17632 +                    12.5 <= AFFL  THEN DO;
17633 +    IF  NOT MISSING(AFFL ) AND
17634 +                      17.5 <= AFFL  THEN DO;
17635 +      _NODE_  =                   15;
17636 +      _LEAF_  =                    8;
17637 +      P_ORGYN1  =      0.9090909090909;
17638 +      P_ORGYN0  =     0.09090909090909;
17639 +      Q_ORGYN1  =      0.9090909090909;
17640 +      Q_ORGYN0  =     0.09090909090909;
17641 +      V_ORGYN1  =                 0.95;
17642 +      V_ORGYN0  =                 0.05;
17643 +      I_ORGYN  = '1' ;
17644 +      U_ORGYN  =                    1;
17645 +      END;
17646 +    ELSE DO;
17647 +      _ARBFMT_1 = PUT( GENDER , $1.);
17648 +       %DMNORMIP( _ARBFMT_1);
17649 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
17650 +        _NODE_  =                   26;
17651 +        _LEAF_  =                    6;
17652 +        P_ORGYN1  =     0.51764705882352;
17653 +        P_ORGYN0  =     0.48235294117647;
17654 +        Q_ORGYN1  =     0.51764705882352;
17655 +        Q_ORGYN0  =     0.48235294117647;
17656 +        V_ORGYN1  =     0.52678571428571;
17657 +        V_ORGYN0  =     0.47321428571428;
17658 +        I_ORGYN  = '1' ;
17659 +        U_ORGYN  =                    1;
17660 +        END;
17661 +      ELSE DO;
17662 +        _NODE_  =                   27;
17663 +        _LEAF_  =                    7;
17664 +        P_ORGYN1  =     0.25773195876288;
17665 +        P_ORGYN0  =     0.74226804123711;
17666 +        Q_ORGYN1  =     0.25773195876288;
17667 +        Q_ORGYN0  =     0.74226804123711;
17668 +        V_ORGYN1  =      0.2289156626506;
17669 +        V_ORGYN0  =     0.77108433734939;
17670 +        I_ORGYN  = '0' ;
17671 +        U_ORGYN  =                    0;
17672 +        END;
17673 +      END;
17674 +    END;
17675 +  ELSE DO;
17676 +    _NODE_  =                    6;
17677 +    _LEAF_  =                    5;
17678 +    P_ORGYN1  =     0.11979358643568;
17679 +    P_ORGYN0  =     0.88020641356432;
17680 +    Q_ORGYN1  =     0.11979358643568;
17681 +    Q_ORGYN0  =     0.88020641356432;
17682 +    V_ORGYN1  =     0.12046444121915;
17683 +    V_ORGYN0  =     0.87953555878084;
17684 +    I_ORGYN  = '0' ;
17685 +    U_ORGYN  =                    0;
17686 +    END;
17687 +  END;
17688 +
17689 +*****  RESIDUALS R_ *************;
17690 +IF  F_ORGYN  NE '1'
17691 +AND F_ORGYN  NE '0'  THEN DO;
17692 +        R_ORGYN1  = .;
17693 +        R_ORGYN0  = .;
17694 + END;
17695 + ELSE DO;
17696 +       R_ORGYN1  =  -P_ORGYN1 ;
17697 +       R_ORGYN0  =  -P_ORGYN0 ;
17698 +       SELECT( F_ORGYN  );
17699 +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
17700 +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
17701 +       END;
17702 + END;
17703 +
17704 +****************************************************************;
17705 +******          END OF DECISION TREE SCORING CODE         ******;
17706 +****************************************************************;
17707 +
17708 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17709  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
17710  quit;
17711  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17712  filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17713  *------------------------------------------------------------*;
17714  * Tree: Scoring VALIDATE data;
17715  *------------------------------------------------------------*;
17716  data EMWS1.Tree_VALIDATE
17717  / view=EMWS1.Tree_VALIDATE
17718  ;
17719  set EMWS1.Part_VALIDATE
17720  ;
17721  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17722 +****************************************************************;
17723 +******             DECISION TREE SCORING CODE             ******;
17724 +****************************************************************;
17725 +
17726 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17727 +LENGTH F_ORGYN  $   12;
17728 +LENGTH I_ORGYN  $   12;
17729 +LENGTH _WARN_  $    4;
17730 +
17731 +******              LABELS FOR NEW VARIABLES              ******;
17732 +label _NODE_ = 'Node' ;
17733 +label _LEAF_ = 'Leaf' ;
17734 +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
17735 +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
17736 +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
17737 +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
17738 +label V_ORGYN1 = 'Validated: ORGYN=1' ;
17739 +label V_ORGYN0 = 'Validated: ORGYN=0' ;
17740 +label R_ORGYN1 = 'Residual: ORGYN=1' ;
17741 +label R_ORGYN0 = 'Residual: ORGYN=0' ;
17742 +label F_ORGYN = 'From: ORGYN' ;
17743 +label I_ORGYN = 'Into: ORGYN' ;
17744 +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
17745 +label _WARN_ = 'Warnings' ;
17746 +
17747 +
17748 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17749 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17750 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17751 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17752 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17753 +
17754 +
17755 +_ARBFMT_12 = PUT( ORGYN , BEST12.);
17756 + %DMNORMCP( _ARBFMT_12, F_ORGYN );
17757 +
17758 +******             ASSIGN OBSERVATION TO NODE             ******;
17759 +IF  NOT MISSING(AGE ) AND
17760 +  AGE  <                 44.5 THEN DO;
17761 +  IF  NOT MISSING(AFFL ) AND
17762 +    AFFL  <                 10.5 THEN DO;
17763 +    _ARBFMT_1 = PUT( GENDER , $1.);
17764 +     %DMNORMIP( _ARBFMT_1);
17765 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17766 +      IF  NOT MISSING(AFFL ) AND
17767 +        AFFL  <                  5.5 THEN DO;
17768 +        _NODE_  =                   16;
17769 +        _LEAF_  =                    1;
17770 +        P_ORGYN1  =             0.265625;
17771 +        P_ORGYN0  =             0.734375;
17772 +        Q_ORGYN1  =             0.265625;
17773 +        Q_ORGYN0  =             0.734375;
17774 +        V_ORGYN1  =     0.31914893617021;
17775 +        V_ORGYN0  =     0.68085106382978;
17776 +        I_ORGYN  = '0' ;
17777 +        U_ORGYN  =                    0;
17778 +        END;
17779 +      ELSE DO;
17780 +        _NODE_  =                   17;
17781 +        _LEAF_  =                    2;
17782 +        P_ORGYN1  =     0.54601226993865;
17783 +        P_ORGYN0  =     0.45398773006134;
17784 +        Q_ORGYN1  =     0.54601226993865;
17785 +        Q_ORGYN0  =     0.45398773006134;
17786 +        V_ORGYN1  =     0.60829493087557;
17787 +        V_ORGYN0  =     0.39170506912442;
17788 +        I_ORGYN  = '1' ;
17789 +        U_ORGYN  =                    1;
17790 +        END;
17791 +      END;
17792 +    ELSE DO;
17793 +      _NODE_  =                    9;
17794 +      _LEAF_  =                    3;
17795 +      P_ORGYN1  =     0.21186440677966;
17796 +      P_ORGYN0  =     0.78813559322033;
17797 +      Q_ORGYN1  =     0.21186440677966;
17798 +      Q_ORGYN0  =     0.78813559322033;
17799 +      V_ORGYN1  =     0.22110552763819;
17800 +      V_ORGYN0  =      0.7788944723618;
17801 +      I_ORGYN  = '0' ;
17802 +      U_ORGYN  =                    0;
17803 +      END;
17804 +    END;
17805 +  ELSE DO;
17806 +    _NODE_  =                    5;
17807 +    _LEAF_  =                    4;
17808 +    P_ORGYN1  =     0.72849462365591;
17809 +    P_ORGYN0  =     0.27150537634408;
17810 +    Q_ORGYN1  =     0.72849462365591;
17811 +    Q_ORGYN0  =     0.27150537634408;
17812 +    V_ORGYN1  =     0.75686274509803;
17813 +    V_ORGYN0  =     0.24313725490196;
17814 +    I_ORGYN  = '1' ;
17815 +    U_ORGYN  =                    1;
17816 +    END;
17817 +  END;
17818 +ELSE DO;
17819 +  IF  NOT MISSING(AFFL ) AND
17820 +                    12.5 <= AFFL  THEN DO;
17821 +    IF  NOT MISSING(AFFL ) AND
17822 +                      17.5 <= AFFL  THEN DO;
17823 +      _NODE_  =                   15;
17824 +      _LEAF_  =                    8;
17825 +      P_ORGYN1  =      0.9090909090909;
17826 +      P_ORGYN0  =     0.09090909090909;
17827 +      Q_ORGYN1  =      0.9090909090909;
17828 +      Q_ORGYN0  =     0.09090909090909;
17829 +      V_ORGYN1  =                 0.95;
17830 +      V_ORGYN0  =                 0.05;
17831 +      I_ORGYN  = '1' ;
17832 +      U_ORGYN  =                    1;
17833 +      END;
17834 +    ELSE DO;
17835 +      _ARBFMT_1 = PUT( GENDER , $1.);
17836 +       %DMNORMIP( _ARBFMT_1);
17837 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
17838 +        _NODE_  =                   26;
17839 +        _LEAF_  =                    6;
17840 +        P_ORGYN1  =     0.51764705882352;
17841 +        P_ORGYN0  =     0.48235294117647;
17842 +        Q_ORGYN1  =     0.51764705882352;
17843 +        Q_ORGYN0  =     0.48235294117647;
17844 +        V_ORGYN1  =     0.52678571428571;
17845 +        V_ORGYN0  =     0.47321428571428;
17846 +        I_ORGYN  = '1' ;
17847 +        U_ORGYN  =                    1;
17848 +        END;
17849 +      ELSE DO;
17850 +        _NODE_  =                   27;
17851 +        _LEAF_  =                    7;
17852 +        P_ORGYN1  =     0.25773195876288;
17853 +        P_ORGYN0  =     0.74226804123711;
17854 +        Q_ORGYN1  =     0.25773195876288;
17855 +        Q_ORGYN0  =     0.74226804123711;
17856 +        V_ORGYN1  =      0.2289156626506;
17857 +        V_ORGYN0  =     0.77108433734939;
17858 +        I_ORGYN  = '0' ;
17859 +        U_ORGYN  =                    0;
17860 +        END;
17861 +      END;
17862 +    END;
17863 +  ELSE DO;
17864 +    _NODE_  =                    6;
17865 +    _LEAF_  =                    5;
17866 +    P_ORGYN1  =     0.11979358643568;
17867 +    P_ORGYN0  =     0.88020641356432;
17868 +    Q_ORGYN1  =     0.11979358643568;
17869 +    Q_ORGYN0  =     0.88020641356432;
17870 +    V_ORGYN1  =     0.12046444121915;
17871 +    V_ORGYN0  =     0.87953555878084;
17872 +    I_ORGYN  = '0' ;
17873 +    U_ORGYN  =                    0;
17874 +    END;
17875 +  END;
17876 +
17877 +*****  RESIDUALS R_ *************;
17878 +IF  F_ORGYN  NE '1'
17879 +AND F_ORGYN  NE '0'  THEN DO;
17880 +        R_ORGYN1  = .;
17881 +        R_ORGYN0  = .;
17882 + END;
17883 + ELSE DO;
17884 +       R_ORGYN1  =  -P_ORGYN1 ;
17885 +       R_ORGYN0  =  -P_ORGYN0 ;
17886 +       SELECT( F_ORGYN  );
17887 +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
17888 +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
17889 +       END;
17890 + END;
17891 +
17892 +****************************************************************;
17893 +******          END OF DECISION TREE SCORING CODE         ******;
17894 +****************************************************************;
17895 +
17896 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17897  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
17898  quit;
17899  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17900  filename emflow "H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17901  *------------------------------------------------------------*;
17902  * Tree: Scoring TEST data;
17903  *------------------------------------------------------------*;
17904  data EMWS1.Tree_TEST
17905  / view=EMWS1.Tree_TEST
17906  ;
17907  set EMWS1.Part_TEST
17908  ;
17909  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file H:\DMU_Final Year\Data Mining\FinalCW\FinalCourseWork\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17910 +****************************************************************;
17911 +******             DECISION TREE SCORING CODE             ******;
17912 +****************************************************************;
17913 +
17914 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17915 +LENGTH F_ORGYN  $   12;
17916 +LENGTH I_ORGYN  $   12;
17917 +LENGTH _WARN_  $    4;
17918 +
17919 +******              LABELS FOR NEW VARIABLES              ******;
17920 +label _NODE_ = 'Node' ;
17921 +label _LEAF_ = 'Leaf' ;
17922 +label P_ORGYN1 = 'Predicted: ORGYN=1' ;
17923 +label P_ORGYN0 = 'Predicted: ORGYN=0' ;
17924 +label Q_ORGYN1 = 'Unadjusted P: ORGYN=1' ;
17925 +label Q_ORGYN0 = 'Unadjusted P: ORGYN=0' ;
17926 +label V_ORGYN1 = 'Validated: ORGYN=1' ;
17927 +label V_ORGYN0 = 'Validated: ORGYN=0' ;
17928 +label R_ORGYN1 = 'Residual: ORGYN=1' ;
17929 +label R_ORGYN0 = 'Residual: ORGYN=0' ;
17930 +label F_ORGYN = 'From: ORGYN' ;
17931 +label I_ORGYN = 'Into: ORGYN' ;
17932 +label U_ORGYN = 'Unnormalized Into: ORGYN' ;
17933 +label _WARN_ = 'Warnings' ;
17934 +
17935 +
17936 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17937 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17938 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17939 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17940 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17941 +
17942 +
17943 +_ARBFMT_12 = PUT( ORGYN , BEST12.);
17944 + %DMNORMCP( _ARBFMT_12, F_ORGYN );
17945 +
17946 +******             ASSIGN OBSERVATION TO NODE             ******;
17947 +IF  NOT MISSING(AGE ) AND
17948 +  AGE  <                 44.5 THEN DO;
17949 +  IF  NOT MISSING(AFFL ) AND
17950 +    AFFL  <                 10.5 THEN DO;
17951 +    _ARBFMT_1 = PUT( GENDER , $1.);
17952 +     %DMNORMIP( _ARBFMT_1);
17953 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17954 +      IF  NOT MISSING(AFFL ) AND
17955 +        AFFL  <                  5.5 THEN DO;
17956 +        _NODE_  =                   16;
17957 +        _LEAF_  =                    1;
17958 +        P_ORGYN1  =             0.265625;
17959 +        P_ORGYN0  =             0.734375;
17960 +        Q_ORGYN1  =             0.265625;
17961 +        Q_ORGYN0  =             0.734375;
17962 +        V_ORGYN1  =     0.31914893617021;
17963 +        V_ORGYN0  =     0.68085106382978;
17964 +        I_ORGYN  = '0' ;
17965 +        U_ORGYN  =                    0;
17966 +        END;
17967 +      ELSE DO;
17968 +        _NODE_  =                   17;
17969 +        _LEAF_  =                    2;
17970 +        P_ORGYN1  =     0.54601226993865;
17971 +        P_ORGYN0  =     0.45398773006134;
17972 +        Q_ORGYN1  =     0.54601226993865;
17973 +        Q_ORGYN0  =     0.45398773006134;
17974 +        V_ORGYN1  =     0.60829493087557;
17975 +        V_ORGYN0  =     0.39170506912442;
17976 +        I_ORGYN  = '1' ;
17977 +        U_ORGYN  =                    1;
17978 +        END;
17979 +      END;
17980 +    ELSE DO;
17981 +      _NODE_  =                    9;
17982 +      _LEAF_  =                    3;
17983 +      P_ORGYN1  =     0.21186440677966;
17984 +      P_ORGYN0  =     0.78813559322033;
17985 +      Q_ORGYN1  =     0.21186440677966;
17986 +      Q_ORGYN0  =     0.78813559322033;
17987 +      V_ORGYN1  =     0.22110552763819;
17988 +      V_ORGYN0  =      0.7788944723618;
17989 +      I_ORGYN  = '0' ;
17990 +      U_ORGYN  =                    0;
17991 +      END;
17992 +    END;
17993 +  ELSE DO;
17994 +    _NODE_  =                    5;
17995 +    _LEAF_  =                    4;
17996 +    P_ORGYN1  =     0.72849462365591;
17997 +    P_ORGYN0  =     0.27150537634408;
17998 +    Q_ORGYN1  =     0.72849462365591;
17999 +    Q_ORGYN0  =     0.27150537634408;
18000 +    V_ORGYN1  =     0.75686274509803;
18001 +    V_ORGYN0  =     0.24313725490196;
18002 +    I_ORGYN  = '1' ;
18003 +    U_ORGYN  =                    1;
18004 +    END;
18005 +  END;
18006 +ELSE DO;
18007 +  IF  NOT MISSING(AFFL ) AND
18008 +                    12.5 <= AFFL  THEN DO;
18009 +    IF  NOT MISSING(AFFL ) AND
18010 +                      17.5 <= AFFL  THEN DO;
18011 +      _NODE_  =                   15;
18012 +      _LEAF_  =                    8;
18013 +      P_ORGYN1  =      0.9090909090909;
18014 +      P_ORGYN0  =     0.09090909090909;
18015 +      Q_ORGYN1  =      0.9090909090909;
18016 +      Q_ORGYN0  =     0.09090909090909;
18017 +      V_ORGYN1  =                 0.95;
18018 +      V_ORGYN0  =                 0.05;
18019 +      I_ORGYN  = '1' ;
18020 +      U_ORGYN  =                    1;
18021 +      END;
18022 +    ELSE DO;
18023 +      _ARBFMT_1 = PUT( GENDER , $1.);
18024 +       %DMNORMIP( _ARBFMT_1);
18025 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
18026 +        _NODE_  =                   26;
18027 +        _LEAF_  =                    6;
18028 +        P_ORGYN1  =     0.51764705882352;
18029 +        P_ORGYN0  =     0.48235294117647;
18030 +        Q_ORGYN1  =     0.51764705882352;
18031 +        Q_ORGYN0  =     0.48235294117647;
18032 +        V_ORGYN1  =     0.52678571428571;
18033 +        V_ORGYN0  =     0.47321428571428;
18034 +        I_ORGYN  = '1' ;
18035 +        U_ORGYN  =                    1;
18036 +        END;
18037 +      ELSE DO;
18038 +        _NODE_  =                   27;
18039 +        _LEAF_  =                    7;
18040 +        P_ORGYN1  =     0.25773195876288;
18041 +        P_ORGYN0  =     0.74226804123711;
18042 +        Q_ORGYN1  =     0.25773195876288;
18043 +        Q_ORGYN0  =     0.74226804123711;
18044 +        V_ORGYN1  =      0.2289156626506;
18045 +        V_ORGYN0  =     0.77108433734939;
18046 +        I_ORGYN  = '0' ;
18047 +        U_ORGYN  =                    0;
18048 +        END;
18049 +      END;
18050 +    END;
18051 +  ELSE DO;
18052 +    _NODE_  =                    6;
18053 +    _LEAF_  =                    5;
18054 +    P_ORGYN1  =     0.11979358643568;
18055 +    P_ORGYN0  =     0.88020641356432;
18056 +    Q_ORGYN1  =     0.11979358643568;
18057 +    Q_ORGYN0  =     0.88020641356432;
18058 +    V_ORGYN1  =     0.12046444121915;
18059 +    V_ORGYN0  =     0.87953555878084;
18060 +    I_ORGYN  = '0' ;
18061 +    U_ORGYN  =                    0;
18062 +    END;
18063 +  END;
18064 +
18065 +*****  RESIDUALS R_ *************;
18066 +IF  F_ORGYN  NE '1'
18067 +AND F_ORGYN  NE '0'  THEN DO;
18068 +        R_ORGYN1  = .;
18069 +        R_ORGYN0  = .;
18070 + END;
18071 + ELSE DO;
18072 +       R_ORGYN1  =  -P_ORGYN1 ;
18073 +       R_ORGYN0  =  -P_ORGYN0 ;
18074 +       SELECT( F_ORGYN  );
18075 +          WHEN( '1'  ) R_ORGYN1  = R_ORGYN1  +1;
18076 +          WHEN( '0'  ) R_ORGYN0  = R_ORGYN0  +1;
18077 +       END;
18078 + END;
18079 +
18080 +****************************************************************;
18081 +******          END OF DECISION TREE SCORING CODE         ******;
18082 +****************************************************************;
18083 +
18084 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18085  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
18086  quit;
18087  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
18089  proc sort data=WORK.EM_USER_REPORT;
18090  by ID VIEW;
18091  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18092  *------------------------------------------------------------*;
18093  * Tree: Computing metadata for TRAIN data;
18094  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
18498  data WORK.MODELTEMP_INFO;
18499  set EMWS1.Tree_EMINFO;
18500  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18501  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18502  data EMWS1.Tree_EMINFO;
18503  length TARGET KEY $32 DATA $43;
18504  input TARGET KEY DATA $;
18505  cards;
 
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
18509  run;
18510  data EMWS1.Tree_EMINFO;
18511  set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
18512  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
18513  proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
18514  by TARGET KEY;
18515  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
18516  proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18517  by TARGET KEY;
18518  run;
 
NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
18519  proc sort data = EMWS1.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18520  by TARGET KEY;
18521  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
18522  data EMWS1.Tree_EMINFO;
18523  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18524  by TARGET KEY;
18525  run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
18526  proc datasets lib=work nolist;
18527  delete TEMP_INFO SORTEDEMINFO;
18528  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18529  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.TREE_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                29 November 2021
Time:                16:10:21
*------------------------------------------------------------*
18553  data EMWS1.Tree_EMOUTFIT;
18554  set EMWS1.Tree_EMOUTFIT;
18555  length TargetLabel $200;
18556  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18557  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
18558  proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
18559  by TARGET;
18560  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.22 seconds
      cpu time            0.00 seconds
 
 
18561  %let _EMwarndup = 0;
18562  %let _EMtargetdup =;
18563  %let _EMASEtargetdup =;
18564  data _null_;
18565  set EMWS1.Tree_EMOUTFIT;
18566  if .<_ASE_<0.000001 then do;
18567  call symput('_EMwarndup', '1');
18568  call symput('_EMtargetdup', target);
18569  call symput('_EMASEtargetdup', put(_ASE_, best.));
18570  end;
18571  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18572  %let EMEXCEPTIONSTRING=;
18573  *------------------------------------------------------------*;
18574  * REPORT: Tree;
18575  *------------------------------------------------------------*;
18576  %let EM_ACTION = REPORT;
18577  %let syscc = 0;
18578  %macro main;
18579
18580    %if %upcase(&EM_ACTION) = CREATE %then %do;
18581      filename temp catalog 'sashelp.emmodl.tree_create.source';
18582      %include temp;
18583      filename temp;
18584
18585      %em_tree_create;
18586    %end;
18587
18588     %else
18589     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18590
18591         filename temp catalog 'sashelp.emmodl.tree_train.source';
18592         %include temp;
18593         filename temp;
18594         %em_tree_train;
18595     %end;
18596
18597    %else
18598    %if %upcase(&EM_ACTION) = SCORE %then %do;
18599      filename temp catalog 'sashelp.emmodl.tree_score.source';
18600      %include temp;
18601      filename temp;
18602
18603      %em_tree_score;
18604
18605    %end;
18606
18607    %else
18608    %if %upcase(&EM_ACTION) = REPORT %then %do;
18609
18610         filename temp catalog 'sashelp.emmodl.tree_report.source';
18611         %include temp;
18612         filename temp;
18613
18614         %em_tree_report;
18615     %end;
18616
18617    %else
18618    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18619
18620         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18621         %include temp;
18622         filename temp;
18623         %EM_TREE_OPENTREEVIEWER;
18624
18625     %end;
18626
18627    %else
18628    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18629
18630         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18631         %include temp;
18632         filename temp;
18633         %EM_TREE_CLOSETREEVIEWER;
18634
18635     %end;
18636
18637
18638     %doendm:
18639  %mend main;
18640
18641  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18643 +%macro em_tree_makePlotDs( multipleTar= );
18645 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18646 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18647 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18648 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18650 +  /* determine if validation statistics will be displayed */
18651 +  %let validflag=N;
18652 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18653 +    /* determine if validation data exists */
18654 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18655 +      %let validflag=Y;
18656 +    %end;
18657 +  %end;
18659 +   /* retrieve name of decmeta even in presence of multiple targets */
18660 +   %let decmeta = ;
18661 +   %if &EM_DEC_DECMETA eq %then %do;
18662 +     data _Target;
18663 +       set &em_data_variableset;
18664 +       where ROLE='TARGET' and USE in('D', 'Y');
18665 +       keep NAME;
18666 +     run;
18667 +     proc sort data=_Target;
18668 +       by NAME;
18669 +     run;
18670 +     proc sort data=EM_TARGETDECINFO;
18671 +       by TARGET;
18672 +     run;
18673 +     data _Target;
18674 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18675 +       by NAME;
18676 +       if _a then do;
18677 +         call symput('decmeta', trim(DECMETA));
18678 +       end;
18679 +     run;
18680 +     proc delete data=_Target;run;
18681 +   %end;
18682 +   %else %let decmeta = &EM_DEC_DECMETA;
18685 +  /* retrieve targetEvent from decmeta */
18686 +  %let targetEvent=;
18687 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18688 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18689 +      data _null_;
18690 +       set &DECMETA(where=(_TYPE_="TARGET"));
18691 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18692 +      run;
18693 +    %end;
18694 +  %end;
18696 +  /* retrieve predicted var for targetEvent from decmeta */
18697 +  %let predTarget=;
18698 +  %let predLvl=;
18699 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18700 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18701 +      data _null_;
18702 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18703 +       call symput('predTarget', strip(VARIABLE));
18704 +       call symput('predLvl', strip(LEVEL));
18705 +      run;
18706 +    %end;
18707 +  %end;
18708 +  %else %do;
18709 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18710 +      data _null_;
18711 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18712 +       call symput('predTarget', strip(VARIABLE));
18713 +      run;
18714 +    %end;
18715 +  %end;
18717 +  /* create BelowText value */
18718 +  data belowtext;
18719 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18720 +    keep node belowtext;
18721 +  run;
18723 +  /* replace belowtext with variable label if it exists */
18724 +  data belowtext2;
18725 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18726 +    keep node belowtextlbl;
18727 +  run;
18729 +  proc sort data=belowtext; by node; run;
18730 +  proc sort data=belowtext2; by node; run;
18732 +  data belowtext;
18733 +    merge belowtext belowtext2(in=_a);
18734 +    by node;
18735 +    if _a then belowtext=belowtextlbl;
18736 +    keep node belowtext;
18737 +  run;
18739 +  /* create AboveText value */
18740 +  data abovetext;
18741 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18742 +  run;
18743 +  proc sort data=abovetext; by node numeric_value; run;
18745 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18746 +  data abovetext;
18747 +    set abovetext(rename=(node=parent));
18748 +    by parent numeric_value;
18749 +    retain abovetext tempstring flag branch origval origchar ;
18750 +    length abovetext $256;
18751 +    length tempstring origchar $64;
18753 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18754 +      if first.parent then do;
18755 +        if missing(character_value) then do;
18756 +          numeric_value = round(numeric_value, &sp_precision);
18757 +          abovetext = "< "||strip(NUMERIC_VALUE);
18758 +          branch = 1;
18759 +          origval = numeric_value;
18760 +          output;
18761 +        end;
18762 +        else do;
18763 +          abovetext = "< "||strip(CHARACTER_VALUE);
18764 +          branch = 1;
18765 +          origchar = character_value;
18766 +          output;
18767 +        end;
18769 +        if first.parent AND last.parent then do;
18770 +          if missing(character_value) then do;
18771 +            numeric_value = round(numeric_value, &sp_precision);
18772 +            branch = branch + 1;
18773 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18774 +            output;
18775 +          end;
18776 +          else do;
18777 +            branch = branch + 1;
18778 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18779 +            output;
18780 +          end;
18781 +        end;
18782 +      end;
18783 +      else if last.parent then do;
18784 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18785 +          if missing(character_value) then do;
18786 +            numeric_value = round(numeric_value, &sp_precision);
18787 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18788 +          end;
18789 +          else do;
18790 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18791 +          end;
18792 +          branch = branch + 1;
18793 +          output;
18795 +          if missing(character_value) then do;
18796 +            numeric_value = round(numeric_value, &sp_precision);
18797 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18798 +          end;
18799 +          else do;
18800 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18801 +          end;
18802 +          branch = branch + 1;
18803 +          output;
18804 +        end;
18805 +        else do;
18806 +          if missing(character_value) then do;
18807 +            numeric_value = round(numeric_value, &sp_precision);
18808 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18809 +          end;
18810 +          else do;
18811 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18812 +          end;
18813 +          branch = branch + 1;
18814 +          output;
18815 +        end;
18816 +      end;
18817 +      else do;
18818 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18819 +          if missing(character_value) then do;
18820 +            numeric_value = round(numeric_value,&sp_precision);
18821 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18822 +            origval = numeric_value;
18823 +          end;
18824 +          else do;
18825 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18826 +            origchar = character_value;
18827 +          end;
18828 +          branch = branch + 1;
18829 +          output;
18831 +        end;
18832 +        else do;
18833 +          if missing(character_value) then do;
18834 +            numeric_value = round(numeric_value, &sp_precision);
18835 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18836 +            origval = numeric_value;
18837 +          end;
18838 +          else do;
18839 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18840 +            origval = character_value;
18841 +          end;
18842 +          branch = branch + 1;
18843 +          output;
18844 +        end;
18845 +      end;
18846 +    end;
18847 +    else do;
18848 +       if first.numeric_value then do;
18849 +         flag = 0;
18850 +         abovetext = strip(CHARACTER_VALUE);
18851 +         branch = numeric_value;
18852 +         if first.numeric_value AND last.numeric_value then do;
18853 +           output;
18854 +         end;
18855 +       end;
18856 +       else if last.numeric_value then do;
18857 +         if flag=0 then do;
18858 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18859 +           length = length(strip(tempstring));
18860 +           if length < 32 then do;
18861 +             abovetext = strip(tempstring);
18862 +           end;
18863 +           else do;
18864 +             abovetext = strip(abovetext)||", ...";
18865 +             flag = 1;
18866 +           end;
18867 +         end;
18868 +         branch = numeric_value;
18869 +         output;
18870 +       end;
18871 +       else do;
18872 +         if flag=0 then do;
18873 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18874 +           length = length(strip(tempstring));
18875 +           if length < 32 then do;
18876 +             abovetext = strip(tempstring);
18877 +           end;
18878 +           else do;
18879 +             abovetext = strip(abovetext)||", ...";
18880 +             flag=1;
18881 +           end;
18882 +         end;
18883 +         branch = numeric_value;
18884 +       end;
18885 +    end;
18886 +    keep parent branch abovetext;
18887 +  run;
18889 +  /* Missing value to abovetext */
18890 +  data tempmissing;
18891 +    set &EM_USER_OUTRULES;
18892 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18893 +    rename node=parent numeric_value=branch character_value=misschar;
18894 +  run;
18897 +  proc sort data=abovetext; by parent branch; run;
18898 +  proc sort data=tempmissing; by parent branch; run;
18899 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18901 +  data tempoutnodes;
18902 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18903 +    by parent branch;
18904 +    length traintotal validtotal 8;
18905 +    retain traintotal validtotal;
18907 +    if _a then do;
18908 +      if ^MISSING(abovetext) then do;
18909 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18910 +      end;
18911 +      else do;
18912 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18913 +      end;
18914 +    end;
18915 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18917 +    if node=1 then do;
18918 +      traintotal = N;
18919 +      validtotal=VN;
18920 +    end;
18922 +    drop role rank stat misschar belowtext;
18923 +  run;
18924 +  proc sort data=tempoutnodes; by node; run;
18925 +  proc sort data=belowtext; by node; run;
18927 +  data tempoutnodes;
18928 +    merge tempoutnodes belowtext;
18929 +    by node;
18931 +  run;
18933 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18934 +  %let adjusted = N;
18935 +  %let npriors = 0;
18936 +  data _null_ ;
18937 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18938 +    if eof then do ;
18939 +      call symput("npriors" , strip(put(_N_,best.))) ;
18940 +    end;
18941 +  run;
18942 +  %if &npriors gt 0 %then %let adjusted=Y;
18945 +  /* create a table with targetUsed and targetLevel columns for each node */
18946 +  data temptarmeta;
18947 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18948 +    %if &multipleTar eq N %then %do;
18949 +      AND USE in ('D', 'Y')
18950 +    %end;
18951 +    ));
18952 +    length TARGET $32;
18953 +    Target=name;
18954 +    keep target level;
18955 +  run;
18957 +  %if &multipleTar eq Y %then %do;
18958 +    data temptargetused;
18959 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18960 +      keep node target;
18961 +    run;
18962 +    proc sort data=temptargetused; by target; run;
18963 +    proc sort data=temptarmeta; by target; run;
18964 +    data temptargetused;
18965 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18966 +      by target;
18967 +      if _a and _b;
18968 +    run;
18969 +  %end;
18970 +  %else %do;
18971 +    data temptargetused;
18972 +      set &EM_USER_OUTSTATS;
18973 +      length target $32 tarlevel $10;
18974 +      target="%EM_TARGET";
18975 +      tarlevel="%EM_TARGET_LEVEL";
18976 +      keep node target tarlevel;
18977 +    run;
18978 +    proc sort data=temptargetused nodupkey; by node; run;
18979 +  %end;
18981 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
18982 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18983 +  proc sort data=temptargetused; by node; run;
18986 +  /* create tables for all interval targets as well as all class targets */
18987 +  data tempinterval tempclass;
18988 +    merge tempoutstats temptargetused( rename=(target=targetused));
18989 +    by node;
18990 +    %if "&multipleTar" eq "Y" %then %do;
18991 +      if ((missing(Target)) OR (target=targetused ));
18992 +    %end;
18994 +    if tarlevel="INTERVAL" then output tempinterval;
18995 +    else output tempclass;
18996 +  run;
18998 +  /* initialize intTarget and classTarget flags */
18999 +  %let em_intNobs =0;
19000 +  %let em_classNobs = 0;
19001 +  %let em_intTarget= N;
19002 +  %let em_classTarget= N;
19004 +  proc sql;
19005 +    reset noprint;
19006 +    select count(*) into :em_intNobs from tempinterval;
19007 +  quit;
19008 +  proc sql;
19009 +    reset noprint;
19010 +    select count(*) into :em_classNobs from tempclass;
19011 +  quit;
19013 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19014 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19016 +  /* retrieve all information for interval targets */
19017 +  %if &em_intTarget eq Y %then %do;
19019 +    /* determine if leaf variable exists */
19020 +    %let dsid=%sysfunc(open(tempinterval,i));
19021 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19022 +    %let rc=%sysfunc(close(&dsid));
19024 +    proc transpose data=tempinterval
19025 +      %if &leafexists %then %do;
19026 +        (drop=leaf)
19027 +      %end;
19028 +      %if &validexist %then %do;
19029 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19030 +      %end;
19031 +      %else %do;
19032 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19033 +      %end;
19034 +      by node;
19035 +      id statname;
19036 +    run;
19037 +    data tempinterval;
19038 +      set tempinterval;
19039 +      if missing(N) then delete;
19040 +    run;
19041 +  %end;
19043 +  /* retrieve all information for class targets */
19044 +  %if &em_classTarget eq Y %then %do;
19045 +    proc sort data=tempclass; by node category; run;
19046 +    %if &validflag eq N %then %do;
19047 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19048 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19049 +    %end;
19050 +    %else %do;
19051 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19052 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19053 +    %end;
19054 +      set tempclass;
19056 +      %if &validflag eq N %then %do;
19057 +        %if "&adjusted" eq "N" %then %do;
19058 +          if statname="N" then output tempn;
19059 +        %end;
19060 +        %else %do;
19061 +          if statname="NPRIORS" then output tempn;
19062 +        %end;
19063 +        else if statname="PREDICTION" then output temppredict;
19064 +        else if statname="PROBABILITY" then output tempprob;
19065 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19066 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19067 +      %end;
19068 +      %else %do;
19069 +        %if "&adjusted" eq "N" %then %do;
19070 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19071 +        %end;
19072 +        %else %do;
19073 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19074 +        %end;
19075 +        else if statname="PREDICTION" then output temppredict;
19076 +        else if statname="PROBABILITY" then output tempprob;
19077 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19078 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19079 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19080 +      %end;
19081 +    run;
19084 +    /* determine if profit/loss exists in tempprofit */
19085 +    %let em_profitflag=0;
19086 +    %let em_lossflag=0;
19087 +    proc sql;
19088 +      reset noprint;
19089 +      select count(*) into :em_profitflag from tempprofit;
19090 +    quit;
19091 +    proc sql;
19092 +      reset noprint;
19093 +      select count(*) into :em_lossflag from temploss;
19094 +    quit;
19096 +    %if &validFlag eq Y %then %do;
19097 +      proc transpose data=tempn
19098 +        %if "&adjusted" eq "N" %then %do;
19099 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19100 +        %end;
19101 +        %else %do;
19102 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19103 +        %end;
19104 +        by node;
19105 +        id statname;
19106 +      run;
19107 +      %if &em_profitflag ne 0 %then %do;
19108 +        proc transpose data=tempprofit out=tempprofit;
19109 +          by node category;
19110 +          id statname ;
19111 +        run;
19112 +      %end;
19113 +      %if &em_lossflag ne 0 %then %do;
19114 +        proc transpose data=temploss out=temploss;
19115 +          by node category;
19116 +          id statname ;
19117 +        run;
19118 +      %end;
19119 +      data tempprob;
19120 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19121 +        by node
19122 +        %if &multipleTar eq Y %then %do;
19123 +          target
19124 +        %end;
19125 +        category;
19126 +      run;
19127 +    %end;
19129 +    /* store percentcorrect value */
19130 +    data temppredict;
19131 +      merge tempprob temppredict(in=_a);
19132 +      by node category;
19133 +      if _a then do;
19134 +        percentCorrect = statvalue;
19135 +        %if &validFlag eq Y %then %do;
19136 +          vpercentCorrect= vstatvalue;
19137 +        %end;
19138 +      end;
19139 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19140 +      %if &validFlag eq Y %then %do;
19141 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19142 +      %end;
19143 +      ;
19144 +      if missing(percentCorrect) then delete;
19145 +      drop target;
19146 +    run;
19148 +    /* build profittext */
19149 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19150 +      data tempprofittext(keep= node profittext profitloss);
19151 +        length profittext $800 profitloss 8.;
19152 +        retain profittext profitloss;
19154 +        merge tempprob
19155 +        %if &em_profitflag ne 0 %then %do;
19156 +          tempprofit
19157 +        %end;
19158 +        %else %if &em_lossflag ne 0 %then %do;
19159 +          temploss
19160 +        %end;
19161 +        ;
19162 +        by node category;
19164 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19165 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19166 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19167 +          %let profittype = ALL;
19168 +        %end;
19170 +        /* create the profitloss variable for nodecolor if selected */
19171 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19173 +        %if "&profittype" eq "ALL" %then %do;
19174 +          if strip(CATEGORY)="&targetEvent" then do;
19175 +            profitloss=statvalue;
19176 +          end;
19177 +          if first.node then do;
19178 +            %if &validFlag eq N %then %do;
19179 +             %if &em_profitflag ne 0 %then %do;
19180 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19181 +             %end;
19182 +             %if &em_lossflag ne 0 %then %do;
19183 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19184 +             %end;
19185 +            %end;
19186 +            %else %do;
19187 +             %if &em_profitflag ne 0 %then %do;
19188 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19188!+;
19189 +             %end;
19190 +             %if &em_lossflag ne 0 %then %do;
19191 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19192 +             %end;
19193 +            %end;
19194 +          end;
19195 +          else if last.node then do;
19196 +            %if &validFlag eq N %then %do;
19197 +             %if &em_profitflag ne 0 %then %do;
19198 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19199 +             %end;
19200 +             %if &em_lossflag ne 0 %then %do;
19201 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19202 +             %end;
19203 +             /*if CATEGORY="&targetEvent" then do;
19204 +               profitloss=statvalue;
19205 +             end;*/
19206 +            %end;
19207 +            %else %do;
19208 +             %if &em_profitflag ne 0 %then %do;
19209 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19209!+14.&EM_PROPERTY_SPLITPRECISION);
19210 +                if CATEGORY="&targetEvent" then do;
19211 +                 profitloss=ALTERNATIVE_PROFIT;
19212 +                end;
19213 +             %end;
19214 +             %if &em_lossflag ne 0 %then %do;
19215 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19215!+14.&EM_PROPERTY_SPLITPRECISION);
19216 +                if CATEGORY="&targetEvent" then do;
19217 +                  profitloss=ALTERNATIVE_LOSS;
19218 +                end;
19219 +             %end;
19220 +            %end;
19221 +            output;
19222 +          end;
19223 +          else do;
19224 +            %if &validFlag eq N %then %do;
19225 +             %if &em_profitflag ne 0 %then %do;
19226 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19227 +             %end;
19228 +             %if &em_lossflag ne 0 %then %do;
19229 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19230 +             %end;
19231 +            %end;
19232 +            %else %do;
19233 +             %if &em_profitflag ne 0 %then %do;
19234 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19234!+14.&EM_PROPERTY_SPLITPRECISION);
19235 +             %end;
19236 +             %if &em_lossflag ne 0 %then %do;
19237 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19237!+14.&EM_PROPERTY_SPLITPRECISION);
19238 +             %end;
19239 +            %end;
19240 +          end;
19241 +        %end;
19242 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19243 +          if strip(CATEGORY) = "&targetevent" then do;
19244 +            %if &validFlag eq N %then %do;
19245 +             %if &em_profitflag ne 0 %then %do;
19246 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19247 +             %end;
19248 +             %if &em_lossflag ne 0 %then %do;
19249 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19250 +             %end;
19251 +             profitloss=statvalue;
19252 +            %end;
19253 +            %else %do;
19254 +             %if &em_profitflag ne 0 %then %do;
19255 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19255!+;
19256 +                profitloss=ALTERNATIVE_PROFIT;
19257 +             %end;
19258 +             %if &em_lossflag ne 0 %then %do;
19259 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19260 +                profitloss=ALTERNATIVE_LOSS;
19261 +             %end;
19262 +            %end;
19263 +            output;
19264 +          end;
19265 +        %end;
19266 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19267 +          if strip(CATEGORY) = "&targetevent" then do;
19268 +            %if &validFlag eq N %then %do;
19269 +             profitloss=statvalue;
19270 +            %end;
19271 +            %else %do;
19272 +             %if &em_profitflag ne 0 %then %do;
19273 +                profitloss=ALTERNATIVE_PROFIT;
19274 +             %end;
19275 +             %if &em_lossflag ne 0 %then %do;
19276 +                profitloss=ALTERNATIVE_LOSS;
19277 +             %end;
19278 +            %end;
19279 +            output;
19280 +          end;
19281 +        %end;
19282 +      run;
19283 +    %end;
19285 +    data tempprob(keep= node probtext);
19286 +      length probtext $800;
19287 +      retain probtext;
19288 +      set tempprob ;
19289 +      by node;
19291 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19292 +      %let probtype = &EM_PROPERTY_TARGET;
19293 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19294 +        %let probtype = ALL;
19295 +      %end;
19297 +      %if "&probtype" eq "ALL" %then %do;
19298 +        if first.node then do;
19299 +          %if &validFlag eq N %then %do;
19300 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19301 +          %end;
19302 +          %else %do;
19303 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19304 +          %end;
19305 +        end;
19306 +        else if last.node then do;
19307 +          %if &validFlag eq N %then %do;
19308 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19309 +          %end;
19310 +          %else %do;
19311 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19312 +          %end;
19313 +          output;
19314 +        end;
19315 +        else do;
19316 +          %if &validFlag eq N %then %do;
19317 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19318 +          %end;
19319 +          %else %do;
19320 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19321 +          %end;
19322 +        end;
19323 +      %end;
19324 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19325 +        if strip(CATEGORY) = "&targetevent" then do;
19326 +          %if &validFlag eq N %then %do;
19327 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19328 +          %end;
19329 +          %else %do;
19330 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19331 +          %end;
19332 +          output;
19333 +        end;
19334 +      %end;
19335 +      %else %if "&probtype" eq "NONE" %then %do;
19336 +        if last.node then do;
19337 +          output;
19338 +        end;
19339 +      %end;
19340 +    run;
19341 +  %end;
19343 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19345 +  %let oldexists=0;
19346 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19347 +     data old_tree_plot;
19348 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19349 +        rename nodecolor=oldnodecolor;
19350 +     run;
19352 +     proc sort data=old_tree_plot;
19353 +        by node;
19354 +     run;
19356 +     %let oldexists=1;
19357 +  %end;
19359 +  data &EM_USER_TREE_PLOT;
19360 +    length textall $800;
19361 +    merge tempoutnodes temptargetused
19363 +    %if &em_intTarget eq Y %then %do;
19364 +      tempinterval
19365 +    %end;
19367 +    %if &em_classTarget eq Y %then %do;
19369 +      %if &validFlag eq N %then %do;
19370 +        tempn(rename=(statvalue=N))
19371 +      %end;
19372 +      %else %do;
19373 +        tempn
19374 +      %end;
19376 +      temppredict tempprob
19378 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19379 +        tempprofittext
19380 +      %end;
19381 +    %end;
19382 +    ;
19383 +    by node;
19385 +    /* build nodetext based on user selection */
19386 +    textall="";
19388 +    %if &em_intTarget eq Y %then %do;
19389 +    if tarlevel="INTERVAL" then do;
19390 +      /* Nodeid */
19391 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19392 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19393 +      %end;
19395 +      /* Target identifier if multiple targets are used */
19396 +      %if "&multipleTar" eq "Y" %then %do;
19397 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19398 +      %end;
19400 +      %if &validFlag eq Y %then %do;
19401 +         /* Column labels displayed in validflag eq Y only */
19402 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19403 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19403!+noquote ))";
19404 +         %end;
19406 +         /* Average values */
19407 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19408 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19409 +         %end;
19411 +         /* RASE */
19412 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19413 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19414 +         %end;
19416 +         /* Count */
19417 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19418 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19419 +         %end;
19420 +      %end;
19421 +      %else %do;
19422 +         /* Average values */
19423 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19424 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19425 +         %end;
19427 +         /* RASE */
19428 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19429 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19430 +         %end;
19432 +         /* Count */
19433 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19434 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19435 +         %end;
19436 +      %end;
19438 +      /* nodecolor */
19439 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19440 +        nodecolor=PREDICTION;
19441 +      %end;
19442 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19443 +        nodecolor=RASE;
19444 +      %end;
19445 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19446 +        nodecolor=1;
19447 +      %end;
19449 +    end;
19450 +    %end;
19451 +    %if &em_classTarget eq Y %then %do;
19452 +    if tarlevel^="INTERVAL" then  do;
19454 +      /* Nodeid */
19455 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19456 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19457 +      %end;
19458 +      /* Target identifier if multiple targets are used */
19459 +      %if "&multipleTar" eq "Y" %then %do;
19460 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19461 +      %end;
19463 +      /* Predicted values */
19464 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19465 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19466 +      %end;
19468 +      /* Column labels displayed in validflag eq Y only */
19469 +      %if "&ValidFlag" eq "Y" %then %do;
19470 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19471 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19471!+noquote ))";
19472 +        %end;
19473 +      %end;
19475 +      /* Target Values */
19476 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19477 +        textall=strip(textall)||"0A"x||strip(probtext);
19478 +      %end;
19480 +      /* include profit or loss for all target levels */
19481 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19482 +        textall=strip(textall)||"0A"x||strip(profittext);
19483 +      %end;
19485 +      %if &validFlag eq N %then %do;
19486 +        /* Percent Correct */
19487 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19488 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19489 +        %end;
19491 +         /* Count */
19492 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19493 +          %if "&adjusted" eq "N" %then %do;
19494 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19495 +          %end;
19496 +          %else %do;
19497 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19498 +          %end;
19499 +         %end;
19500 +      %end;
19501 +      %else %do;
19502 +        /* Percent Correct */
19503 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19504 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19505 +        %end;
19507 +         /* Count */
19508 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19509 +          %if "&adjusted" eq "N" %then %do;
19510 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19511 +          %end;
19512 +          %else %do;
19513 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19514 +          %end;
19515 +         %end;
19516 +      %end;
19518 +      /* nodecolor */
19519 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19520 +       %if &multipleTar ne Y %then %do;
19521 +        nodecolor=&predTarget;
19522 +       %end;
19523 +       %else %do;
19524 +         nodecolor=percentcorrect;
19525 +       %end;
19526 +      %end;
19527 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19528 +        nodecolor=percentcorrect;
19529 +      %end;
19530 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19531 +        nodecolor=1;
19532 +      %end;
19533 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19534 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19535 +          nodecolor=percentcorrect;
19536 +        %end;
19537 +        %else %do;
19538 +          nodecolor=profitloss;
19539 +        %end;
19540 +      %end;
19542 +    end;
19543 +    %end;
19544 +    %if &em_intTarget eq Y %then %do;
19545 +     drop  PREDICTION  TARGET TARLEVEL
19546 +     %if &ValidFlag eq Y %then %do;
19547 +         VPREDICTION
19548 +     %end;
19549 +     ;
19550 +    %end;
19551 +    %if &em_classTarget eq Y %then %do;
19552 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19553 +     %if &ValidFlag eq Y %then %do;
19554 +         VSTATVALUE
19555 +     %end;
19556 +     ;
19557 +    %end;
19559 +  run;
19561 +  /* add leaf index information to plotds - based on primary target only*/
19562 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19563 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19564 +      set &EM_USER_OUTSTATS;
19565 +      if ((statname="PROBABILITY"
19566 +      %if &validexist %then %do;
19567 +       or statname="VALID: PROBABILITY"
19568 +      %end;
19569 +      ) AND (CATEGORY="&TARGETEVENT")
19570 +      %if "&multipleTar" eq "Y" %then %do;
19571 +        AND (Target="%EM_TARGET")
19572 +      %end;
19573 +      );
19574 +    run;
19576 +    %if &validexist %then %do;
19577 +      proc sort data=tempprob; by node; run;
19578 +      %let vpredTarget = V%substr(&predTarget, 2);
19579 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19580 +         by node;
19581 +         id statname;
19582 +      run;
19583 +    %end;
19584 +  %end;
19585 +  %else %do;
19586 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19587 +      set &EM_USER_OUTSTATS;
19588 +      if ((statname="PREDICTION"
19589 +      %if &validexist %then %do;
19590 +       or statname="VALID: PREDICTION"
19591 +      %end;
19592 +      )
19593 +      %if "&multipleTar" eq "Y" %then %do;
19594 +        AND (Target="%EM_TARGET")
19595 +      %end;
19596 +      );
19597 +    run;
19598 +    %if &validexist %then %do;
19599 +      proc sort data=tempprob; by node; run;
19600 +      %let vpredTarget = V%substr(&predTarget, 2);
19601 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19602 +         by node;
19603 +         id statname;
19604 +      run;
19605 +    %end;
19606 +  %end;
19608 +  proc sort data=tempprob; by node; run;
19609 +  data tempoutnodes;
19610 +    merge tempoutnodes tempprob;
19611 +    by node;
19612 +  run;
19614 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19615 +  data tempnodes;
19616 +    retain traintotal validtotal;
19617 +    set tempnodes(where=(leaf ne . ));
19618 +    tprob=round(&predTarget, .01);
19619 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19620 +      percevent_train=round(tprob*100, .01);
19621 +    %end;
19622 +    %else %do;
19623 +      percevent_train=tprob;
19624 +    %end;
19626 +    perc_train=round((n/traintotal)*100, 0.01);
19627 +    /* leafwidth already has a *10 multiplier */
19628 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19630 +    %if &validexist %then %do;
19631 +      %let vpredTarget = V%substr(&predTarget,2);
19632 +      vprob=round(&vpredTarget, .01);
19633 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19634 +        percevent_valid=round(vprob*100, .01);
19635 +      %end;
19636 +      %else %do;
19637 +        percevent_valid=vprob;
19638 +      %end;
19639 +      perc_valid=round((vn/validtotal)*100, .01);
19640 +    %end;
19642 +    index=_N_;
19643 +    keep node index tprob perc_train percevent_train
19644 +    %if &validexist %then %do;
19645 +        vprob percevent_valid perc_valid
19646 +    %end;
19647 +    ;
19648 +  run;
19649 +  proc sort data=tempnodes; by node; run;
19650 +  data &EM_USER_TREE_PLOT;
19651 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19652 +    by node;
19653 +    if missing(node) then delete;
19654 +    %if &oldexists %then %do;
19655 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19656 +      drop oldnodecolor;
19657 +    %end;
19658 +    abovetext = compbl(abovetext);
19660 +    /* add variable labels */
19661 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19662 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19663 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19664 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19665 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19666 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19668 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19669 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19670 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19671 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19672 +          %end;
19673 +          %else %do;
19674 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19675 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19676 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19677 +          %end;
19678 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19680 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19681 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19682 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19683 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19684 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19685 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19686 +          %end;
19687 +          %else %do;
19688 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19689 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19690 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19691 +          %end;
19692 +    ;
19693 +  run;
19695 +  /* delete temporary tables */
19696 +  proc datasets lib=work nolist;
19697 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19698 +  run;
19700 +%mend em_tree_makePlotDs;
19704 +%macro em_tree_report;
19706 +   /* report properties */
19707 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19708 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19709 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19710 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19711 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19712 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19713 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19714 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19715 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19716 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19717 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19718 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19719 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19721 +   %let validexist=0;
19722 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19723 +     %let validexist=1;
19724 +   %end;
19726 +   /* determine if multiple targets will be processed */
19727 +   %let em_tree_multipleTargets=N;
19728 +   %let em_tree_numTarget=1;
19729 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19730 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19731 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19732 +         %let em_tree_multipleTargets=N;
19733 +      %end;
19734 +      %else %do;
19735 +        data _null_;
19736 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19737 +          if eof then
19738 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19739 +        run;
19741 +        %if &em_tree_numTarget gt 1 %then %do;
19742 +           %let em_tree_multipleTargets=Y;
19743 +        %end;
19744 +     %end;
19745 +   %end;
19747 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19749 +   /* variable importance */
19750 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19751 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19753 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19754 +     /* and the columns may not be generated                                                                                 */
19755 +     %let em_tree_cvexists=;
19756 +     %let em_tree_surrexists=.;
19757 +     data _null_;
19758 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19759 +       if eof then do ;
19760 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19761 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19762 +       end;
19763 +     run;
19765 +     data &EM_USER_OUTIMPORT;
19766 +         set &EM_USER_OUTIMPORT;
19767 +         /* format columns based on Precison value specified */
19768 +         format importance 15.&EM_PROPERTY_PRECISION
19769 +              %if &validexist %then %do;
19770 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19771 +              %end;
19772 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19773 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19774 +              %end;
19775 +         ;
19776 +     run;
19778 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19779 +     proc print data=&EM_USER_OUTIMPORT
19780 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19781 +          (where=((nrules>0) OR (nsurrogates>0)))
19782 +        %end;
19783 +        %else %do;
19784 +           (where=(nrules>0))
19785 +        %end;
19786 +        label noobs
19787 +        ;
19788 +     run;
19789 +     title10;
19791 +   %end;
19793 +   /* Sequence */
19794 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19795 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19796 +   data _null_ ;
19797 +      set &EM_USER_outseq (obs=2) end=eof ;
19798 +      if eof then do ;
19799 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19800 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19801 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19802 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19803 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19804 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19805 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19806 +      end;
19807 +    run;
19809 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19810 +      data &EM_USER_OUTSEQ;
19811 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19812 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19813 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19814 +           _XMISC_=_VMISC_
19815 +        %end;
19816 +        %if "&em_tree_aprof" ne "."  %then %do;
19817 +           _XAPROF_=_VAPROF_
19818 +           _XPROF_ = _VPROF_
19819 +        %end;
19820 +        %if "&em_tree_aloss" ne "."  %then %do;
19821 +           _XALOSS_=_VALOSS_
19822 +        %end;
19823 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19824 +           _XPASE_ = _VPASE_
19825 +           _XPMISC_ = _VPMISC_
19826 +        %end;
19828 +        ));
19829 +     %end;
19830 +     %else %do;
19831 +        set &EM_USER_OUTSEQ;
19832 +     %end;
19834 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19835 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19836 +            _MISC_   15.&EM_PROPERTY_PRECISION
19837 +         %end;
19838 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19839 +            _PASE_  15.&EM_PROPERTY_PRECISION
19840 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19841 +         %end;
19842 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19843 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19844 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19845 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19846 +            %end;
19847 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19848 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19849 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19850 +            %end;
19851 +         %end;
19852 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19853 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19854 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19855 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19856 +            %end;
19857 +         %end;
19858 +         %if "&em_tree_seq" ne "." %then %do;
19859 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19860 +         %end;
19861 +         %if "&em_tree_vseq" ne "." %then %do;
19862 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19863 +         %end;
19864 +         %if "&em_tree_aprof" ne "." %then %do;
19865 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19866 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19867 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19868 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19869 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19870 +           %end;
19871 +         %end;
19872 +         %else %if "&em_tree_aloss" ne "." %then %do;
19873 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19874 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19875 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19876 +           %end;
19877 +         %end;
19878 +      ;
19879 +    run;
19880 +   %end;
19882 +   /* Observation Based Importance */
19883 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19885 +      /* need to check for 0 obs */
19886 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19887 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19888 +      %let rc=%sysfunc(close(&dsid));
19890 +      %if &onobs %then %do;
19891 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19892 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19894 +         data &EM_USER_OUTOBSIMP;
19895 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19896 +           if _a;
19897 +           by _INPUT1_;
19898 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19899 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19900 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19901 +                   %end;
19902 +                   ;
19903 +         run;
19904 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19905 +      %end;
19906 +   %end;
19908 +  %end;
19910 +  /* create dataset to support tree diagram and icicle plot */
19911 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19912 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19914 +  /* display tree diagram */
19915 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19916 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19918 +  /* display icicle diagram */
19919 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19920 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19922 +  /* Leaf Statistics Plot */
19923 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19925 +  /* print leaf information to output window */
19926 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19928 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19929 +       by descending N;
19930 +     run;
19932 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19933 +     %local vn;
19934 +     data _null_;
19935 +       set t (obs=2) end=eof;
19936 +       if eof then do;
19937 +         call symput("vn", strip(put(vn, best.)));
19938 +       end;
19939 +     run;
19941 +     data t;
19942 +       set t;
19943 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19944 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19945 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19946 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19947 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19948 +       %end;
19949 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19950 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19951 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19952 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19953 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19954 +          %end;
19955 +       %end;
19956 +       ;
19957 +     run;
19959 +     /* determine if rase is found in t */
19960 +    %let dsid=%sysfunc(open(t,i));
19961 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19962 +    %let rc=%sysfunc(close(&dsid));
19964 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19965 +     proc print data=t noobs label;
19966 +       where tprob ne .;
19967 +       var node depth N tprob
19968 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19969 +         %if "&vn" ne "." %then %do;
19970 +           VN
19971 +         %end;
19972 +         vprob
19973 +       %end;
19974 +       %if &raseexists %then %do;
19975 +            RASE
19976 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19977 +              VRASE
19978 +            %end;
19979 +       %end;
19980 +       ;
19981 +     run;
19982 +     title10;
19983 +  %end;
19985 +  /* create plots that are done during training of node */
19986 +  /* display iterative plot, including reference line */
19987 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19988 +   /* %if &nleaves eq  %then %do; */
19989 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19990 +      data _null_;
19991 +        set &EM_USER_OUTTOPOLOGY end=eof;
19992 +        if eof then do;
19993 +          call symput('nleaves', LEAF);
19994 +        end;
19995 +      run;
19996 +   /* %end; */
19998 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19999 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20000 +  %end;
20002 +  /* display leaf statistics */
20003 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20005 +  /* stats by node if multiple targets = Y */
20006 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20007 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20008 +    data &EM_USER_OUTSTATS;
20009 +      set &EM_USER_OUTSTATS;
20011 +     * if STATNAME="TARGET" then delete;
20012 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20013 +      drop leaf;
20014 +    run;
20015 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20017 +  %end;
20018 +  %else %do;
20019 +    /* add outstats and outdescribe to spk but not results */
20020 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20021 +  %end;
20023 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 19 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 19 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_ORGYN_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_ORGYN_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 11 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 11 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 251 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 105 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 90 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 105 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 30 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 15 observations read from the data set WORK.TEMPN.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 15 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 15 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
20024
20025  *------------------------------------------------------------*;
20026  * End REPORT: Tree;
20027  *------------------------------------------------------------*;
 
20028  /* Reset EM Options */
20029  options formchar="|----|+|---+=|-/\<>*";
20030  options nocenter ls=256 ps=10000;
20031  goptions reset=all device=GIF NODISPLAY;
 
20032  proc sort data=WORK.EM_USER_REPORT;
20033  by ID VIEW;
20034  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20035  proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20036  by NAME;
20037  run;
 
NOTE: There were 18 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 18 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20038  proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20039  by NAME;
20040  run;
 
NOTE: There were 18 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 18 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20041  data WORK.ASSESS_META;
20042  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20043  by NAME;
20044  run;
 
NOTE: There were 18 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 18 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 18 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20045  data EM_temp_assessMeta;
20046  set EMWS1.Tree_CMeta_TRAIN;
20047  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20048  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20049  data EM_temp_assessdata;
20050  set EMWS1.Tree_TRAIN(keep=
20051  F_ORGYN
20052  I_ORGYN
20053  P_ORGYN0
20054  P_ORGYN1
20055  Q_ORGYN0
20056  Q_ORGYN1
20057  R_ORGYN0
20058  R_ORGYN1
20059  U_ORGYN
20060  V_ORGYN0
20061  V_ORGYN1
20062  _WARN_
20063  ORGYN
20064  );
20065  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 4000 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4000 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 4000 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24343   data EM_temp_assessMeta;
24344   set EMWS1.Tree_CMeta_TRAIN;
24345   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24346   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24347   data EM_temp_assessdata;
24348   set EMWS1.Tree_VALIDATE(keep=
24349   F_ORGYN
24350   I_ORGYN
24351   P_ORGYN0
24352   P_ORGYN1
24353   Q_ORGYN0
24354   Q_ORGYN1
24355   R_ORGYN0
24356   R_ORGYN1
24357   U_ORGYN
24358   V_ORGYN0
24359   V_ORGYN1
24360   _WARN_
24361   ORGYN
24362   );
24363   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 3000 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 3000 observations read from the data set EMWS1.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 3000 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28650   %let _cn = %sysfunc(getoption(CENTER));
28651   options nocenter;
28652   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
28653   var STAT LABEL TRAIN
28654   VALIDATE
28655   TEST
28656   ;
28657   by TARGET TARGETLABEL;
28658   title9 ' ';
28659   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28660   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28661   title10;
28662   options &_cn;
 
28663   proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
28664   by DATAROLE TARGET TARGETLABEL;
28665   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
28666   %let _cn = %sysfunc(getoption(CENTER));
28667   options nocenter;
28668   proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
28669   var from into pct_row pct_col count percent
28670   ;
28671   by DATAROLE TARGET TARGETLABEL;
28672   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28673   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28674   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28675   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28676   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28677   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28678   where _TYPE_='PREDICTION';
28679   title9 ' ';
28680   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28681   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.15 seconds
      cpu time            0.03 seconds
 
 
28682   title9;
28683   title10;
28684   options &_cn;
 
28685   %let _cn = %sysfunc(getoption(CENTER));
28686   options nocenter;
28687   data EMWS1.Tree_EMEVENTREPORT;
28688   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
28689   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28689 ! FALSEEVENT
28690   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28691      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28692   FALSEEVENT=0;
28693   FALSENEVENT=0;
28694   TRUEEVENT=0;
28695   TRUENEVENT=0;
28696   set EMWS1.Tree_EMEVENTREPORT;
28697   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.07 seconds
 
 
28698   proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
28699   title9 ' ';
28700   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28701   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28702   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
28703   title10;
28704   options &_cn;
 
28705   proc datasets library=EMWS1 nolist;
28706   modify Tree_EMRANK;
28707   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28708   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28709   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
28710   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
 
 
28711   %let _cn = %sysfunc(getoption(CENTER));
28712   options nocenter;
28713   proc print data=EMWS1.Tree_EMRANK label noobs;
28714   var
28715   decile gain lift liftc resp respc N _meanP_;
28716   by
28717   notsorted DATAROLE
28718   notsorted TARGET
28719   notsorted TARGETLABEL
28720   ;
28721   title9 ' ';
28722   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28723   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28724   title10;
28725   options &_cn;
 
28726   proc datasets library=EMWS1 nolist;
28727   modify Tree_EMSCOREDIST;
28728   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28729   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28730   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
28731   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.11 seconds
      cpu time            0.03 seconds
 
 
